Namespace,Code,Interaction,Communication,Process,Effort,,,,,,,,,,,,,,,,,,,
AudioManager,"    private void Start()
    {
        playerGameSettings = PlayerGameSettings.Instance;
        StartCoroutine(CheckUserSettingsOnStart());
    }",0.00,0.00,1.00,0.02,,,,,,,,,,,,,,,,,,,
AudioManager,"    private IEnumerator CheckUserSettingsOnStart()
    {
        while (!playerGameSettings.CheckIsSettingsLoaded())
        {
            yield return new WaitForSeconds(1);
        }
        var settings = playerGameSettings.GetAllSettings();

        if (settings.ContainsKey(""_music""))
        {
            var shouldPlayMusic = settings[""_music""];
            if (shouldPlayMusic)
            {
                Play_defaultGameTheme();
            }
            else
            {
                Stop_defaultGameTheme();
            }
        }
    }",0.00,0.00,9.00,1.00,,,,,,,,,,,,,,,,,,,
AudioManager,"public void Play_defaultGameTheme()
    {
        defaultGameTheme.Play();
    }",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
AudioManager,"    public void Stop_defaultGameTheme()
    {
        defaultGameTheme.Stop();
    }",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
AudioManager,"    public void Play_defaultButtonClick()
    {
        defaultButtonClick.Play();
    }",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
AudioManager,"    public void Play_inGameNotification()
    {
        inGameNotification.Play();
    }",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
AudioManager,"    public void Play_errorAudio()
    {
        errorAudio.Play();
    }",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
AudioManager,"    public void Play_buildingClicked()
    {
        buildingClicked.Play();
    }",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
AudioManager,"    public void Play_buildingMenuPopups()
    {
        buildingMenuPopups.Play();
    }",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
AudioManager,"    public void Play_battery()
    {
        battery.Play();
    }",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
AudioManager,"    public void Play_cement()
    {
        cement.Play();
    }",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
AudioManager,"    public void Play_chemical()
    {
        chemical.Play();
    }",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
AudioManager,"    public void Play_cleaning()
    {
        cleaning.Play();
    }",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
AudioManager,"    public void Play_electronic()
    {
        electronic.Play();
    }",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
AudioManager,"    public void Play_factory()
    {
        factory.Play();
    }",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
AudioManager,"    public void Play_firedept()
    {
        firedept.Play();
    }",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
AudioManager,"    public void Play_house()
    {
        house.Play();
    }",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
AudioManager,"    public void Play_mechanical()
    {
        mechanical.Play();
    }",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
AudioManager,"    public void Play_park()
    {
        park.Play();
    }",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
AudioManager,"    public void Play_police()
    {
        police.Play();
    }",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
AudioManager,"    public void Play_research()
    {
        research.Play();
    }",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
AudioManager,"    public void Play_sewage()
    {
        sewage.Play();
    }",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
AudioManager,"    public void Play_uni()
    {
        uni.Play();
    }",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
AudioManager,"    public void Play_warehouse()
    {
        warehouse.Play();
    }",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
AudioManager,"    public void Play_water()
    {
        water.Play();
    }",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
AudioManager,"    public void Play_watertank()
    {
        watertank.Play();
    }",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
AudioManager,"    public void Play_watertreatmentplant()
    {
        watertreatmentplant.Play();
    }",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
AudioManager,"    public void Play_windturbine()
    {
        windturbine.Play();
    }",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
AudioManager,"    public void Play_coal()
    {
        coal.Play();
    }",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
AudioManager,"    public void Play_natGas()
    {
        natgas.Play();
    }",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
AppleGameKit_Auth,"void Start()
{
    playerAuthManager = PlayerAuthManager.Instance;
    displayError = DisplayError.Instance;
    await Login();
}",0.00,0.00,3.00,0.10,,,,,,,,,,,,,,,,,,,
AppleGameKit_Auth,"public void LoginWith_AppleGameCenter()
{
    Internal_LoginWith_AppleGameCenter();
}",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
AppleGameKit_Auth,"    private async void Internal_LoginWith_AppleGameCenter()
    {
        await Login();
    }",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
AppleGameKit_Auth,"    private IEnumerator DisableApiExceptionReporting()
    {
        yield return new WaitForSeconds(5);

        isApiReportingEnabled = false;
    }",0.00,0.00,3.00,0.10,,,,,,,,,,,,,,,,,,,
AppleGameKit_Auth,"public static string RemoveSpecialCharacters(string str)
{
    StringBuilder sb = new StringBuilder();
    for (int i = 0; i < str.Length; i++)
    {
        if ((str[i] >= '0' && str[i] <= '9')
            || (str[i] >= 'A' && str[i] <= 'z'
                || (str[i] == '.' || str[i] == '_')))
        {
            sb.Append(str[i]);
        }
    }

    return sb.ToString();
}",0.00,0.00,9.00,1.50,,,,,,,,,,,,,,,,,,,
GPGAuth,"    void Awake()
    {
        PlayGamesPlatform.Activate();
    }",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
GPGAuth,"    private void Start()
    {
        playerAuthManager = PlayerAuthManager.Instance;
    }",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
GPGAuth,"    public void LoginWith_GooglePlayGames()
    {
        Internal_LoginWith_GooglePlayGames();
    }",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
GPGAuth,"    private async void Internal_LoginWith_GooglePlayGames()
    {
        try
        {
            await UnityServices.InitializeAsync();
            await LoginGooglePlayGames();
            await SignInWithGooglePlayGamesAsync(Token);
        }
        catch (Exception ex)
        {
            if (isApiReportingEnabled)
            {
                OnExceptionDto dto = new(lastLocalSave: """", whereExceptionThrownScriptName: ""GPGAuth"", whereExceptionThrownFunctionName: ""Internal_LoginWith_GooglePlayGames"", exceptionMessage: ex.Message);

                StartCoroutine(playerAuthManager.SaveExceptionToServer(dto));
                StartCoroutine(DisableApiExceptionReporting());
            }

            playerAuthManager.OnAnyProcessEndedMainCallback();
        }
    }",0.00,0.00,9.00,3.00,,,,,,,,,,,,,,,,,,,
GPGAuth,"    private IEnumerator DisableApiExceptionReporting()
    {
        yield return new WaitForSeconds(5);

        isApiReportingEnabled = false;
    }",0.00,0.00,3.00,0.10,,,,,,,,,,,,,,,,,,,
PlayerAuthManager,"private void Awake()
{
    DontDestroyOnLoad(this);

    if (Instance == null)
    {
        Instance = this;
    }
    else if (Instance != this)
    {
        Destroy(gameObject);
    }
}",0.00,0.00,3.00,0.01,,,,,,,,,,,,,,,,,,,
PlayerAuthManager,"    private void Start()
    {
        displayError = DisplayError.Instance;
        customTimeManager = CustomTimeManager.Instance;
        StartCoroutine(StartMainCoroutineCallback());
    }",0.00,0.00,4.00,0.01,,,,,,,,,,,,,,,,,,,
PlayerAuthManager,"    private void GetAllDefaultGameValues()
    {
        StartCoroutine(GetDefaultBuildingInfos());
        StartCoroutine(GetDefaultAchievementsInfos());
        StartCoroutine(GetDefaultLeaderInfos());
        StartCoroutine(GetDefaultTechnologyInfos());
        StartCoroutine(GetDefaultRemoveCost());
        StartCoroutine(GetDefaultExhangeRates());
    }",0.00,0.00,12.00,0.10,,,,,,,,,,,,,,,,,,,
PlayerAuthManager,"    private IEnumerator Route_MainGameScene_WhileEnsureDefaultValuesInitialized()
    {
        OnAnyProcessStartMainCallback();
        firstSceneUIHelperManager.CloseAllHolders();

        while (defaultBuildingInfos == null ||
              defaultAchievementsInfos == null ||
               defaultLeaderInfos == null ||
              defaultTechnologyInfos == null ||
              !customTimeManager.Get_isDatetimeOnStartupInitialized())
        {
            Debug.Log(""loading defaults"");
            yield return new WaitForSeconds(1.0f);
        }

        OnAnyProcessEndedMainCallback();

        // go to game scene
        Debug.Log(""Route_NextScene_WhileEnsureDefaultValuesInitialized"");
        changeScene.GoToMainGameScene();

        yield return null;
    }",0.00,0.00,14.00,1.50,,,,,,,,,,,,,,,,,,,
PlayerAuthManager,"    private IEnumerator Route_StoryScene_WhileEnsureDefaultValuesInitializedAndRealTimeInit()
    {
        OnAnyProcessStartMainCallback();
        firstSceneUIHelperManager.CloseAllHolders();

        while (defaultBuildingInfos == null ||
              defaultAchievementsInfos == null ||
               defaultLeaderInfos == null ||
              defaultTechnologyInfos == null ||
              !customTimeManager.Get_isDatetimeOnStartupInitialized())
        {
            Debug.Log(""loading defaults"");
            yield return new WaitForSeconds(1.0f);
        }

        OnAnyProcessEndedMainCallback();

        // go to game scene
        Debug.Log(""Route_StoryScene_WhileEnsureDefaultValuesInitialized"");
        changeScene.GoToStoryScene();

        yield return null;
    }",0.00,0.00,14.00,0.50,,,,,,,,,,,,,,,,,,,
PlayerAuthManager,"    public IEnumerator CheckToken()
    {
        var uwr = new UnityWebRequest(APIURI + APICONTROLLERAUTHMANAGEMENT + ""CheckToken"", ""GET"");
        uwr.SetRequestHeader(""Content-Type"", ""application/json"");
        uwr.SetRequestHeader(""Authorization"", ""Bearer "" + bearerToken);

        uwr.downloadHandler = new DownloadHandlerBuffer();

        yield return uwr.SendWebRequest();

        if (uwr.responseCode != 200)
        {
            // not valid
            isBearerTokenValid = false;
            yield return false;
        }
        else
        {
            // valid
            isBearerTokenValid = true;
            yield return true;
        }
    }",0.00,1.00,9.00,1.00,,,,,,,,,,,,,,,,,,,
PlayerAuthManager,"    public IEnumerator CheckEmailConfirmed()
    {
        var uwr = new UnityWebRequest(APIURI + APICONTROLLERAUTHMANAGEMENT + ""CheckEmailConfirmed?email="" + email, ""GET"");
        uwr.SetRequestHeader(""Content-Type"", ""application/json"");

        uwr.downloadHandler = new DownloadHandlerBuffer();

        yield return uwr.SendWebRequest();

        if (uwr.responseCode != 200)
        {
            isEmailConfirmed = false;
            Debug.Log(""email not confirmed 2"");
            yield return false;
        }
        else
        {
            if (uwr.downloadHandler.text == ""true"")
            {
                isEmailConfirmed = true;
                Debug.Log(""email confirmed 2"");
                yield return true;
            }
            else
            {
                isEmailConfirmed = false;
                Debug.Log(""email not confirmed 2"");
            }
        }
    }",0.00,1.00,15.00,2.50,,,,,,,,,,,,,,,,,,,
PlayerAuthManager,"    public IEnumerator ConfirmEmail(string code)
    {
        OnAnyProcessStartMainCallback();

        var uwr = new UnityWebRequest(APIURI + APICONTROLLERAUTHMANAGEMENT + ""ConfirmEmail?email="" + email + ""&code="" + code, ""GET"");
        uwr.SetRequestHeader(""Content-Type"", ""application/json"");

        uwr.downloadHandler = new DownloadHandlerBuffer();

        yield return uwr.SendWebRequest();

        if (uwr.responseCode != 200)
        {
            var resp = uwr.downloadHandler.text;

            isEmailConfirmed = false;

            // show error
            var apiError = JsonConvert.DeserializeObject<ApiErrorResponse>(resp);
            displayError.ShowError(apiError.DisplayReason);

            yield return false;
        }
        else
        {
            isEmailConfirmed = true;

            StartCoroutine(StartMainCoroutineCallback());

            yield return true;
        }
        Debug.Log(""email confirmed: "" + isEmailConfirmed);
    }",0.00,1.00,15.00,2.00,,,,,,,,,,,,,,,,,,,
PlayerAuthManager,"    public IEnumerator ResendEmailVerificationCode()
    {
        OnAnyProcessStartMainCallback();

        var uwr = new UnityWebRequest(APIURI + APICONTROLLERAUTHMANAGEMENT + ""ResendEmailVerificationCode?email="" + email, ""GET"");
        uwr.SetRequestHeader(""Content-Type"", ""application/json"");

        uwr.downloadHandler = new DownloadHandlerBuffer();

        yield return uwr.SendWebRequest();

        if (uwr.responseCode != 200)
        {
            var resp = uwr.downloadHandler.text;

            // show error
            var apiError = JsonConvert.DeserializeObject<ApiErrorResponse>(resp);
            displayError.ShowError(apiError.DisplayReason);

            yield return false;
        }
        else
        {
            displayError.ShowError(""Email verification code successfully send. Please check your email"");
            yield return true;
        }

        OnAnyProcessEndedMainCallback();
    }",0.00,1.00,15.00,3.00,,,,,,,,,,,,,,,,,,,
PlayerAuthManager,"    public IEnumerator ResetPasswordToken(string emailTmp)
    {
        OnAnyProcessStartMainCallback();

        var uwr = new UnityWebRequest(APIURI + APICONTROLLERAUTHMANAGEMENT + ""ResetPasswordToken?email="" + emailTmp, ""GET"");
        uwr.SetRequestHeader(""Content-Type"", ""application/json"");

        uwr.downloadHandler = new DownloadHandlerBuffer();

        yield return uwr.SendWebRequest();

        if (uwr.responseCode != 200)
        {
            var resp = uwr.downloadHandler.text;

            // show error
            var apiError = JsonConvert.DeserializeObject<ApiErrorResponse>(resp);
            displayError.ShowError(apiError.DisplayReason);

            yield return false;
        }
        else
        {
            displayError.ShowError(""Password reset code successfully send. Please check your email"");

            firstSceneUIHelperManager.OpenForgetPasswordAfterCodeSent();
            yield return true;
        }

        OnAnyProcessEndedMainCallback();
    }",0.00,1.00,15.00,3.00,,,,,,,,,,,,,,,,,,,
PlayerAuthManager,"    public IEnumerator CheckResetPasswordToken(string code)
    {
        OnAnyProcessStartMainCallback();

        var uwr = new UnityWebRequest(APIURI + APICONTROLLERAUTHMANAGEMENT + ""CheckResetPasswordToken?email="" + email + ""&code="" + code, ""GET"");
        uwr.SetRequestHeader(""Content-Type"", ""application/json"");

        uwr.downloadHandler = new DownloadHandlerBuffer();

        yield return uwr.SendWebRequest();

        if (uwr.responseCode != 200)
        {
            var resp = uwr.downloadHandler.text;

            // show error
            var apiError = JsonConvert.DeserializeObject<ApiErrorResponse>(resp);
            displayError.ShowError(apiError.DisplayReason);

            yield return false;
        }
        else
        {
            yield return true;
        }

        OnAnyProcessEndedMainCallback();
    }",0.00,1.00,15.00,3.00,,,,,,,,,,,,,,,,,,,
PlayerAuthManager,public void SaveLeaderboardScoresToApiWrapper(LeaderboarSendScoresDto dto) { StartCoroutine(SaveLeaderboardScoresToApi(dto)); },0.00,0.00,2.00,0.01,,,,,,,,,,,,,,,,,,,
PlayerAuthManager,"    public IEnumerator SaveLeaderboardScoresToApi(LeaderboarSendScoresDto rq)
    {
        rq.Email = email;
        rq.Nickname = nickname;

        var uwr = new UnityWebRequest(APIURI + APICONTROLLERUSERGAMESAVE + ""SaveMyLeaderboardScore"", ""POST"");
        uwr.SetRequestHeader(""Content-Type"", ""application/json"");
        uwr.SetRequestHeader(""Authorization"", ""Bearer "" + bearerToken);

        byte[] jsonToSend = new System.Text.UTF8Encoding().GetBytes(rq.JsonifySelf());

        uwr.uploadHandler = new UploadHandlerRaw(jsonToSend);
        uwr.downloadHandler = new DownloadHandlerBuffer();

        yield return uwr.SendWebRequest();

        if (uwr.responseCode != 200)
        {
            // error
            yield return false;
        }
        else
        {
            // no error user save stored on server

            yield return true;
        }
    }",0.00,1.00,17.00,2.00,,,,,,,,,,,,,,,,,,,
PlayerAuthManager,"    public void On_GPGAuth_Clicked()
    {
#if UNITY_ANDROID
        OnAnyProcessStartMainCallback();
        gPGAuth.LoginWith_GooglePlayGames();
#endif
    }",2.00,1.00,3.00,0.10,,,,,,,,,,,,,,,,,,,
PlayerAuthManager,"    public void On_AGCAuth_Clicked()
    {
#if UNITY_IOS
        OnAnyProcessStartMainCallback();
        appleGameKit_Auth.LoginWith_AppleGameCenter();
#endif
    }",2.00,1.00,3.00,0.10,,,,,,,,,,,,,,,,,,,
PlayerAuthManager,"    public void On_GPGAuth_Authorized(string id, string password)
    {
#if UNITY_ANDROID
        // there are 2 possibilities
        // - user account exist in server -> get id and bearer token and save local, then proceed normally
        // - user account doesnt exist -> create new account and save id and bearer token local, then proceed normally

        // first get correct/modified email from id
        var modifiedEmail = GetModifiedUserEmailFromId(id, ""google"");

        StartCoroutine(CheckIfUserExistInServerAndLoginOrRegister(modifiedEmail, ""google"", password));

#endif
    }",0.00,0.00,5.00,1.00,,,,,,,,,,,,,,,,,,,
PlayerAuthManager,"    public void On_AGCAuth_Authorized(string id, string password)
    {
#if UNITY_IOS
        // there are 2 possibilities
        // - user account exist in server -> get id and bearer token and save local, then proceed normally
        // - user account doesnt exist -> create new account and save id and bearer token local, then proceed normally

        // first get correct/modified email from id
        var modifiedEmail = GetModifiedUserEmailFromId(id, ""apple"");

        StartCoroutine(CheckIfUserExistInServerAndLoginOrRegister(modifiedEmail, ""apple"", password));

#endif
    }",0.00,0.00,5.00,1.00,,,,,,,,,,,,,,,,,,,
PlayerAuthManager,"    private IEnumerator GetDefaultBuildingInfos()
    {
        var uwr = new UnityWebRequest(APIURI + APICONTROLLERGAMEDEFAULTVALUES + ""DefaultBuildingValues"", ""GET"");
        uwr.SetRequestHeader(""Content-Type"", ""application/json"");

        uwr.downloadHandler = new DownloadHandlerBuffer();

        yield return uwr.SendWebRequest();

        if (uwr.responseCode != 200)
        {
            yield return false;
            isAnyDefaultValueHasError = true;
        }
        else
        {
            defaultBuildingInfos = uwr.downloadHandler.text;
            yield return true;
        }
    }",0.00,1.00,7.00,0.60,,,,,,,,,,,,,,,,,,,
PlayerAuthManager,"private IEnumerator GetDefaultAchievementsInfos()
{
    var uwr = new UnityWebRequest(APIURI + APICONTROLLERGAMEDEFAULTVALUES + ""DefaultAchievementsValues"", ""GET"");
    uwr.SetRequestHeader(""Content-Type"", ""application/json"");

    uwr.downloadHandler = new DownloadHandlerBuffer();

    yield return uwr.SendWebRequest();

    if (uwr.responseCode != 200)
    {
        yield return false;
        isAnyDefaultValueHasError = true;
    }
    else
    {
        defaultAchievementsInfos = uwr.downloadHandler.text;
        yield return true;
    }
}",0.00,1.00,7.00,0.60,,,,,,,,,,,,,,,,,,,
PlayerAuthManager,"private IEnumerator GetDefaultLeaderInfos()
{
    var uwr = new UnityWebRequest(APIURI + APICONTROLLERGAMEDEFAULTVALUES + ""DefaultLeaderValues"", ""GET"");
    uwr.SetRequestHeader(""Content-Type"", ""application/json"");

    uwr.downloadHandler = new DownloadHandlerBuffer();

    yield return uwr.SendWebRequest();

    if (uwr.responseCode != 200)
    {
        yield return false;
        isAnyDefaultValueHasError = true;
    }
    else
    {
        defaultLeaderInfos = uwr.downloadHandler.text;
        yield return true;
    }
}",0.00,1.00,7.00,0.60,,,,,,,,,,,,,,,,,,,
PlayerAuthManager,"private IEnumerator GetDefaultTechnologyInfos()
{
    var uwr = new UnityWebRequest(APIURI + APICONTROLLERGAMEDEFAULTVALUES + ""DefaultTechValues"", ""GET"");
    uwr.SetRequestHeader(""Content-Type"", ""application/json"");

    uwr.downloadHandler = new DownloadHandlerBuffer();

    yield return uwr.SendWebRequest();

    if (uwr.responseCode != 200)
    {
        yield return false;
        isAnyDefaultValueHasError = true;
    }
    else
    {
        defaultTechnologyInfos = uwr.downloadHandler.text;
        //defaultTechnologyInfos = tempTech;
        yield return true;
    }
}",0.00,1.00,7.00,0.60,,,,,,,,,,,,,,,,,,,
PlayerAuthManager,"private IEnumerator GetDefaultRemoveCost()
{
    var uwr = new UnityWebRequest(APIURI + APICONTROLLERGAMEDEFAULTVALUES + ""DefaultRemoveCost"", ""GET"");
    uwr.SetRequestHeader(""Content-Type"", ""application/json"");

    uwr.downloadHandler = new DownloadHandlerBuffer();

    yield return uwr.SendWebRequest();

    if (uwr.responseCode != 200)
    {
        yield return false;
        isAnyDefaultValueHasError = true;
    }
    else
    {
        defaultRemoveCostInfo = uwr.downloadHandler.text;
        yield return true;
    }
}",0.00,1.00,7.00,0.60,,,,,,,,,,,,,,,,,,,
PlayerAuthManager,"private IEnumerator GetDefaultExhangeRates()
{
    var uwr = new UnityWebRequest(APIURI + APICONTROLLERGAMEDEFAULTVALUES + ""DefaultExchangeRates"", ""GET"");
    uwr.SetRequestHeader(""Content-Type"", ""application/json"");

    uwr.downloadHandler = new DownloadHandlerBuffer();

    yield return uwr.SendWebRequest();

    if (uwr.responseCode != 200)
    {
        yield return false;
        isAnyDefaultValueHasError = true;
    }
    else
    {
        defaultExhangeRatesInfo = uwr.downloadHandler.text;
        yield return true;
    }
}",0.00,1.00,7.00,0.60,,,,,,,,,,,,,,,,,,,
PlayerAuthManager,"    public IEnumerator GetMyLastSave()
    {
        var uwr = new UnityWebRequest(APIURI + APICONTROLLERUSERGAMESAVE + ""MyLastSave"" + ""?email="" + email, ""GET"");
        uwr.SetRequestHeader(""Content-Type"", ""application/json"");
        uwr.SetRequestHeader(""Authorization"", ""Bearer "" + bearerToken);

        uwr.downloadHandler = new DownloadHandlerBuffer();

        yield return uwr.SendWebRequest();

        if (uwr.responseCode != 200)
        {
            doesUserHasSaveOnServer = false;
            yield return false;
        }
        else
        {
            doesUserHasSaveOnServer = true;
            userSaveFromServer = uwr.downloadHandler.text;
            yield return true;
        }
    }",0.00,1.00,11.00,3.00,,,,,,,,,,,,,,,,,,,
PlayerAuthManager,"    public IEnumerator SaveMySave(UserSaveRequestDto rq)
    {
        rq.Email = email;

        var uwr = new UnityWebRequest(APIURI + APICONTROLLERUSERGAMESAVE + ""SaveMyData"", ""POST"");
        uwr.SetRequestHeader(""Content-Type"", ""application/json"");
        uwr.SetRequestHeader(""Authorization"", ""Bearer "" + bearerToken);

        byte[] jsonToSend = new System.Text.UTF8Encoding().GetBytes(rq.JsonifySelf());

        uwr.uploadHandler = new UploadHandlerRaw(jsonToSend);
        uwr.downloadHandler = new DownloadHandlerBuffer();

        yield return uwr.SendWebRequest();

        if (uwr.responseCode != 200)
        {
            // error
            yield return false;
        }
        else
        {
            // no error user save stored on server

            yield return true;
        }
    }",0.00,1.00,13.00,3.00,,,,,,,,,,,,,,,,,,,
PlayerAuthManager,"public void OnAnyProcessStartMainCallback()
{
    whileOnLoadingHolderTransform.gameObject.SetActive(true);
}",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
PlayerAuthManager,"    public void OnAnyProcessEndedMainCallback()
    {
        whileOnLoadingHolderTransform.gameObject.SetActive(false);
    }",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
PlayerAuthManager,"    private string GetModifiedUserEmailFromId(string id, string _3rdPartyProvider)
    {
        var lead = $""a-{_3rdPartyProvider}"";
        var trail = ""@d.a"";
        return lead + id + trail;
    }",0.00,0.00,2.00,0.10,,,,,,,,,,,,,,,,,,,
AchievementsInfo,"    private void Awake()
    {
        if (Instance == null)
        {
            Instance = this;
        }
        else if (Instance != this)
        {
            Destroy(gameObject);
        }
    }",0.00,0.00,3.00,0.01,,,,,,,,,,,,,,,,,,,
AchievementsInfo,"    void Start()
    {
        tempJson = PlayerAuthManager.Instance.GetDefaultAchievementsInfosString();
        myDeserializedAchievementsRootClass = JsonConvert.DeserializeObject<List<AchievementsRoot>>(tempJson);
    }",0.00,0.00,3.00,0.50,,,,,,,,,,,,,,,,,,,
BuildingInfo,"    private void Awake()
    {
        if (Instance == null)
        {
            Instance = this;
        }
        else if (Instance != this)
        {
            Destroy(gameObject);
        }
    }",0.00,0.00,3.00,0.01,,,,,,,,,,,,,,,,,,,
BuildingInfo,"    void Start()
    {
        tempJson = PlayerAuthManager.Instance.GetDefaultBuildingInfosString();
        myDeserializedClass = JsonConvert.DeserializeObject<List<Root>>(tempJson);
        Debug.Log(myDeserializedClass[0].Identifiers.Code);
    }",0.00,0.00,4.00,0.50,,,,,,,,,,,,,,,,,,,
BuildingInfo,"    public Root QByKod(string kod)
    {
        if (kod == ""ROAD"") { return null; }
        foreach (Root root in myDeserializedClass)
        {
            if (root.Identifiers.Code == kod) return root;
        }
        Debug.Log(""Problem: ***SEVERE*** \r\n cant find root"");
        return null;
    }",0.00,0.00,3.00,1.00,,,,,,,,,,,,,,,,,,,
BuildingInfo,"    public static int SimplifyValueNumber(int value)
    {
        var outputString = """";

        var outputLeading = """";
        char outputTrail;
        var outputMultiText = """";

        var inputString = value.ToString();
        var inputDigits = inputString.Length;

        if (inputDigits == 0) return 0;
        if (inputDigits < 4) return value;

        var mod3reminder = inputDigits % 3;
        if (mod3reminder == 0) mod3reminder = 3;

        outputLeading = inputString.Substring(0, mod3reminder);

        var reqZeros = inputDigits - mod3reminder;

        for (var i = 0; i < reqZeros; i++)
        {
            outputLeading += ""0"";
        }
        outputString = outputLeading;
        return int.Parse(outputString);
    }",0.00,0.00,11.00,4.50,,,,,,,,,,,,,,,,,,,
BuildingInfo,"    // kilo format
    public static string FormatNumber(long num)
    {
        if (num >= 100000000000)
        {
            return (num / 1000000000D).ToString(""0.#B"");
        }
        if (num >= 1000000000)
        {
            return (num / 1000000000D).ToString(""0.##B"");
        }
        if (num >= 100000000)
        {
            return (num / 1000000D).ToString(""0.#M"");
        }
        if (num >= 1000000)
        {
            return (num / 1000000D).ToString(""0.##M"");
        }
        if (num >= 100000)
        {
            return (num / 1000D).ToString(""0.#k"");
        }
        if (num >= 10000)
        {
            return (num / 1000D).ToString(""0.##k"");
        }

        return num.ToString(""#,0"");
    }",0.00,0.00,19.00,1.00,,,,,,,,,,,,,,,,,,,
TechnologyInfo,"    private void Awake()
    {
        if (Instance == null)
        {
            Instance = this;
        }
        else if (Instance != this)
        {
            Destroy(gameObject);
        }
    }",0.00,0.00,3.00,0.01,,,,,,,,,,,,,,,,,,,
TechnologyInfo,"    void Start()
    {
        tempTechJson = PlayerAuthManager.Instance.GetDefaultTechnologyInfosString();
        myDeserializedTechClass = JsonConvert.DeserializeObject<List<TechRoot>>(tempTechJson);
        Debug.Log(myDeserializedClass[0].Identifiers.Code);
    }",0.00,0.00,3.00,0.01,,,,,,,,,,,,,,,,,,,
TechnologyInfo,"    public TechRoot QTechByKod(string kod)
    {
        foreach (TechRoot root in myDeserializedTechClass)
        {
            if (root.TechIdentifiers.Code == kod) return root;
        }
        Debug.Log(""Problem: ***SEVERE*** \r\n cant find root"");
        return null;
    }",0.00,0.00,2.00,0.50,,,,,,,,,,,,,,,,,,,
FogManager,"    private void Awake()
    {
        if (Instance == null)
        {
            Instance = this;
        }
        else if (Instance != this)
        {
            Destroy(gameObject);
        }
    }",0.00,0.00,3.00,0.01,,,,,,,,,,,,,,,,,,,
FogManager,"    void Start()
    {
        RenderSettings.fogDensity = fogDensity;
        RenderSettings.fog = false;
        environment = EnvironmentManager.Instance;

        StartCoroutine(CheckDPAndChangeFogDensity());
    }",0.00,0.00,5.00,0.10,,,,,,,,,,,,,,,,,,,
FogManager,"    public void ChangeChangeFogDensityOneTimeAfterInitialValuesLoadedFromSave()
    {
        var dp = environment.getDP();
        var dpClamphed = Mathf.Clamp((float)dp, -10.0f, 10.0f);

        /*
         * Normalization formula
         * normal = (value - min) / (max - min)
         */
        var dpNormalized = (dpClamphed + 10.0f) / (20.0f);

        var newDensity = Mathf.Lerp(0.008f, 0.001f, dpNormalized);
        if (newDensity != fogDensity)
        {
            ChangeFogDensity(newDensity);
        }
    }",0.00,0.00,12.00,0.10,,,,,,,,,,,,,,,,,,,
GroundEnvironmentManager,"    private void Awake()
    {
        if (Instance == null)
        {
            Instance = this;
        }
        else if (Instance != this)
        {
            Destroy(gameObject);
        }
    }",0.00,0.00,3.00,0.01,,,,,,,,,,,,,,,,,,,
GroundEnvironmentManager,"    private void Start()
    {
        environment = EnvironmentManager.Instance;

        StartCoroutine(CheckDPAndChangeGround());
    }",0.00,0.00,3.00,0.02,,,,,,,,,,,,,,,,,,,
GroundEnvironmentManager,"    private IEnumerator CheckDPAndChangeGround()
    {
        while (true)
        {
            var dp = environment.getDP();
            var dpClamphed = Mathf.Clamp((float)dp, -10.0f, 10.0f);

            /*
             * Normalization formula
             * normal = (value - min) / (max - min)
             */
            var dpNormalized = (dpClamphed + 10.0f) / (20.0f);
            //Debug.Log(""normalized"" + dpNormalized);

            var newGroundDensity = Mathf.Lerp(100.0f, 0.0f, dpNormalized);
            //Debug.Log(""newGroundDensity"" + newGroundDensity);
            if (newGroundDensity != groundDensity)
            {
                groundDensity = newGroundDensity;
                groundTransform1.GetComponent<MeshRenderer>().sharedMaterial.SetFloat(""_Pollution"", groundDensity);
            }
            yield return new WaitForSeconds(10.0f);
        }
    }",0.00,0.00,12.00,6.00,,,,,,,,,,,,,,,,,,,
GroundEnvironmentManager,"    public void ChangeGroundOneTimeAfterInitialValuesLoadedFromSave()
    {
        var dp = environment.getDP();
        var dpClamphed = Mathf.Clamp((float)dp, -10.0f, 10.0f);

        /*
         * Normalization formula
         * normal = (value - min) / (max - min)
         */
        var dpNormalized = (dpClamphed + 10.0f) / (20.0f);
        //Debug.Log(""normalized"" + dpNormalized);

        var newGroundDensity = Mathf.Lerp(100.0f, 0.0f, dpNormalized);
        //Debug.Log(""newGroundDensity"" + newGroundDensity);
        if (newGroundDensity != groundDensity)
        {
            groundDensity = newGroundDensity;
            groundTransform1.GetComponent<MeshRenderer>().sharedMaterial.SetFloat(""_Pollution"", groundDensity);
        }
    }",0.00,0.00,12.00,0.10,,,,,,,,,,,,,,,,,,,
PostProcessManager,"    private void Awake()
    {
        if (Instance == null)
        {
            Instance = this;
        }
        else if (Instance != this)
        {
            Destroy(gameObject);
        }
    }",0.00,0.00,3.00,0.01,,,,,,,,,,,,,,,,,,,
PostProcessManager,"    private void Start()
    {
        Volume volume = GetComponent<Volume>();
        volume.profile.TryGet(out colorAdjustments);

        environmentManager = EnvironmentManager.Instance;

        StartCoroutine(CheckDPAndChangeGround());
    }",0.00,0.00,4.00,0.20,,,,,,,,,,,,,,,,,,,
PostProcessManager,"    public void SetSaturation(float value)
    {
        if (_currentSaturation == value) return;

        _currentSaturation = value;
        Debug.Log(""_currentSaturation: "" + _currentSaturation);
        if (colorAdjustments != null)
        {
            colorAdjustments.saturation.value = value;
        }
    }",0.00,0.00,5.00,1.00,,,,,,,,,,,,,,,,,,,
PostProcessManager,"    private IEnumerator CheckDPAndChangeGround()
    {
        while (true)
        {
            yield return new WaitForSeconds(3.2f);
            CheckDPAndChangeGroundMain();
        }
    }",0.00,0.00,2.00,0.50,,,,,,,,,,,,,,,,,,,
PostProcessManager,"    public void CheckAndInitGrayOnStart()
    {
        CheckDPAndChangeGroundMain();
    }",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
PostProcessManager,"    private void CheckDPAndChangeGroundMain()
    {
        var currentDp = environmentManager.getDP();

        // if DP
        // -60 and less saturation = -60
        // between -60 and 20  saturation = DP
        // 20 or more saturation = max 20

        if (currentDp <= -60)
        {
            SetSaturation(-60.0f);
        }
        else if (-60 < currentDp && currentDp <= 20)
        {
            SetSaturation((float)currentDp);
        }
        else
        {
            SetSaturation(20.0f);
        }
    }",0.00,0.00,6.00,0.50,,,,,,,,,,,,,,,,,,,
DebugHelper,"    void Start()
    {
        rawResource = RawResource.Instance;
        seedResource = SeedResource.Instance;
        saveManager = SaveManager.Instance;
        playerAuthManager = PlayerAuthManager.Instance;
    }",0.00,0.00,4.00,0.01,,,,,,,,,,,,,,,,,,,
DebugHelper,"    public void AddAllResDebug()
    {
        rawResource.increaseYCoin(10000);
        rawResource.increaseYp(10000);
        rawResource.increaseCement(10000);
        rawResource.increaseWire(10000);
        rawResource.increaseChemical(10000);
        rawResource.increaseMechanicalPart(10000);
        rawResource.increaseFood(500);

        seedResource.increaseRegularSeedAmount(10);
        seedResource.increasePremiumSeedAmount(10);
    }",2.00,0.00,9.00,0.10,,,,,,,,,,,,,,,,,,,
DebugHelper,"    public void DeleteSave()
    {
        var path = Application.persistentDataPath + ""/save.json"";
        File.Delete(path);

        StartCoroutine(ResetSaveAndQuit());
    }",2.00,0.00,4.00,0.20,,,,,,,,,,,,,,,,,,,
DebugHelper,"    public void OpenCloseDebug()
    {
        if (holder.gameObject.activeSelf)
        {
            holder.gameObject.SetActive(false);
        }
        else
        {
            holder.gameObject.SetActive(true);
        }
    }",2.00,0.00,3.00,0.01,,,,,,,,,,,,,,,,,,,
DebugHelper,"    public void ForceSaveApi()
    {
        StartCoroutine(ForceSaveApiC());
    }",2.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
DebugHelper,"    private IEnumerator ResetSaveAndQuit()
    {
        // reset save on server
        UserSaveRequestDto dto = new()
        {
            Email = """",
            SaveData = """"
        };
        yield return StartCoroutine(playerAuthManager.SaveMySave(dto));
        DeleteLeaderboardFile();

        Application.Quit();
    }",0.00,0.00,6.00,0.30,,,,,,,,,,,,,,,,,,,
DebugHelper,"    private void DeleteLeaderboardFile()
    {
        var path = Application.persistentDataPath + ""/userLeaderboard.json"";
        if (File.Exists(path))
        {
            File.Delete(path);
        }
    }",0.00,0.00,3.00,0.10,,,,,,,,,,,,,,,,,,,
DebugHelper,"    private IEnumerator ForceSaveApiC()
    {
        UserSaveRequestDto dto = new()
        {
            Email = """",
            SaveData = saveManager.GetLocalLastSave(),
        };
        yield return StartCoroutine(playerAuthManager.SaveMySave(dto));
    }",0.00,0.00,4.00,0.06,,,,,,,,,,,,,,,,,,,
DebugHelper,"public void FastForward1H()
{
    gameSimulator.StartInstantSimulateOnApplicationForeground(3600);
}",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
CriminalBtnHelper,"public void OnClicked()
{
    var selfData = transform.parent.parent.GetComponent<CriminalEventSelfData>();

    if (selfData != null)
    {
        CriminalEventsManager.Instance.Start_Resolving_MANUALLY(selfData.selfEventData);
    }
}",2.00,0.00,3.00,1.00,,,,,,,,,,,,,,,,,,,
CriminalBtnHelper,"public void OnCloseClicked()
{
    var selfData = transform.parent.parent.GetComponent<CriminalEventSelfData>();

    if (selfData != null)
    {
        selfData.TryCloseSelf();
    }
}",2.00,0.00,3.00,0.80,,,,,,,,,,,,,,,,,,,
CriminalEventSelfData,"    void Start()
    {
        criminalEventsManager = CriminalEventsManager.Instance;
        _mainCamera = Camera.main;

        headTextCorrect = criminalEventsManager.GetHeadFromEventType(selfEventData.criminalType);
        detailTextCorrect = criminalEventsManager.GetDetailsFromEventType(selfEventData.criminalType);

        detailsHolder = Instantiate(detailsHolder_toInst, parent: transform);
        detail_headText = Instantiate(detail_headText_toInst, parent: detailsHolder);
        detail_detail = Instantiate(detail_detail_toInst, parent: detailsHolder);

        // investigate btn
        investigateBtnTransform = Instantiate(investigateBtnTransformPrefab, parent: detailsHolder);

        StartCoroutine(UpdateSelfUIIfOpen());
    }",0.00,0.00,14.00,2.00,,,,,,,,,,,,,,,,,,,
CriminalEventSelfData,"    void LateUpdate()
    {
        // should update self position on the ui 
        // based on parent connected plcdobject_Done with-> camera world to screen

        Vector3 screenPos = _mainCamera.WorldToScreenPoint(selfEventData.worldPos + offset);
        transform.position = screenPos;
    }",0.00,0.00,3.00,1.00,,,,,,,,,,,,,,,,,,,
CriminalEventSelfData,"    private void OnEnable()
    {
        StartCoroutine(UpdateSelfUIIfOpen());
    }",0.00,0.00,2.00,0.20,,,,,,,,,,,,,,,,,,,
CriminalEventSelfData,"    private void OnDisable()
    {
        StopCoroutine(UpdateSelfUIIfOpen());
    }",0.00,0.00,2.00,0.20,,,,,,,,,,,,,,,,,,,
CriminalEventSelfData,"    public void TryCloseSelf()
    {
        if (detailsHolder.gameObject.activeSelf)
        {
            detailsHolder.gameObject.SetActive(false);
        }

        criminalEventsManager.RE_OpenAllOtherEventImageWhenOneOpened();
    }",0.00,0.00,4.00,0.10,,,,,,,,,,,,,,,,,,,
CriminalEventSelfData,"    private IEnumerator UpdateSelfUIIfOpen()
    {
        while (true)
        {
            yield return new WaitForSeconds(0.2f);

            if (detailsHolder.gameObject.activeSelf)
            {
                if (selfEventData.isCurrentlyResolving || selfEventData.isCurrentlyResolving_MANUALLY)
                {
                    var timeFormatted = GetFormattedTimeRemainingText(selfEventData.resolvingCountdownRemaining);
                    detail_detail.GetComponent<TextMeshProUGUI>().text = GetCorrectLangugeString_ForCriminalInvestigatipnOngoing(timeFormatted);
                }
            }
        }
    }",0.00,0.00,5.00,0.50,,,,,,,,,,,,,,,,,,,
CriminalEventSelfData,"    private string GetFormattedTimeRemainingText(int secs)
    {
        TimeSpan t = TimeSpan.FromSeconds(secs);

        if (t.Hours > 0)
        {
            return string.Format(""{0:D2}h {1:D2}m {2:D2}s"",
                t.Hours,
                t.Minutes,
                t.Seconds);
        }
        else
        {
            return string.Format(""{0:D2}m {1:D2}s"",
                t.Minutes,
                t.Seconds);
        }

    }",0.00,0.00,6.00,0.50,,,,,,,,,,,,,,,,,,,
CriminalEventSelfData,"    private string GetCorrectLangugeString_ForCriminalInvestigatipnOngoing(string timeFormatted)
    {
        var currentLocaleCode = LocalizationSettings.SelectedLocale.Identifier.Code;

        switch (currentLocaleCode)
        {
            // LANGUAGE
            case ""en"": return $""Investigation Ongoing \n Remaining Time: {timeFormatted}"";
            case ""zh"": return $""正在进行的调查 \n  剩余时间: {timeFormatted}"";
            case ""fr"": return $""Enquêter en cours \n  Temps restant: {timeFormatted}"";
            case ""de"": return $""Investigaion laufend \n  Verbleibende Zeit: {timeFormatted}"";
            case ""ru"": return $""Исследование продолжается \n  Оставшееся время: {timeFormatted}"";
            case ""es"": return $""Investigación en curso \n  Tiempo restante: {timeFormatted}"";
            case ""tr"": return $""Araştırma devam ediyor \n  Kalan süre: {timeFormatted}"";

            default: return $""Investigation Ongoing \n Remaining Time: {timeFormatted}"";
        };
    }",0.00,0.00,1.00,0.10,,,,,,,,,,,,,,,,,,,
CriminalEventsManager,"    private void Awake()
    {
        if (Instance == null)
        {
            Instance = this;
        }
        else if (Instance != this)
        {
            Destroy(gameObject);
        }
    }",0.00,0.00,3.00,0.01,,,,,,,,,,,,,,,,,,,
CriminalEventsManager,"    private void Start()
    {
        environmentManager = EnvironmentManager.Instance;
        saveManager = SaveManager.Instance;
        buildingsManager = BuildingsManager.Instance;
    }",0.00,0.00,3.00,0.01,,,,,,,,,,,,,,,,,,,
CriminalEventsManager,"    public bool CheckIfAddNewCriminalEvent(int tick_sec)
    {
        if (criminalEventList.Count >= max_event_possible_at_one_time) return false;

        //Debug.Log(""tick_sec: "" + tick_sec);

        var tick_normalization = (float)tick_sec / eventCheck_tick_seconds;
        //Debug.Log(""tick_normalization: "" + tick_normalization);

        // probability threshold based on tick
        var tick_correct_prob = event_probability * tick_normalization;
        //Debug.Log(""tick_correct_prob: "" + tick_correct_prob);

        var rand = Random.value;

        //Debug.Log(""rand: "" + rand);
        if (rand < tick_correct_prob)
        {
            // add event
            return true;
        }
        return false;
    }",0.00,0.00,5.00,1.00,,,,,,,,,,,,,,,,,,,
CriminalEventsManager,"    public void AddNewEvent(CustomCriminalEvent ev)
    {
        if (criminalEventList.Count < max_event_possible_at_one_time)
        {
            criminalEventList.Add(ev);

            environmentManager.RecalculateOnPollutionsChangedCallback();

            saveManager.SaveStartMainCallback();
        }
    }",0.00,0.00,4.00,1.00,,,,,,,,,,,,,,,,,,,
CriminalEventsManager,"    public void RemoveEvent(CustomCriminalEvent ev)
    {
        if (criminalEventList.Contains(ev))
        {
            criminalEventList.Remove(ev);
            Destroy(ev.selfWorldTransform.gameObject);

            environmentManager.RecalculateOnPollutionsChangedCallback();

            saveManager.SaveStartMainCallback();
        }
    }",0.00,0.00,6.00,1.00,,,,,,,,,,,,,,,,,,,
CriminalEventsManager,"    public CustomCriminalEvent GetFirstInTheList()
    {
        if (criminalEventList != null && criminalEventList.Count > 0)
        {
            return criminalEventList[0];
        }
        return null;
    }",0.00,0.00,1.00,0.10,,,,,,,,,,,,,,,,,,,
CriminalEventsManager,"    public bool IsThereAnyEventInTheList()
    {
        return criminalEventList.Count > 0;
    }",0.00,0.00,1.00,0.10,,,,,,,,,,,,,,,,,,,
CriminalEventsManager,"    public void Start_Resolving_MANUALLY(CustomCriminalEvent ev)
    {
        if (ev.isCurrentlyResolving || ev.isCurrentlyResolving_MANUALLY) { return; }
        foreach (var _event in criminalEventList)
        {
            if (_event.isCurrentlyResolving_MANUALLY) { return; }
        }

        ev.isCurrentlyResolving_MANUALLY = true;
        ev.resolvingCountdownRemaining = criminal_event_resolve_time_MANUAL;

        saveManager.SaveStartMainCallback();
    }",0.00,0.00,5.00,1.00,,,,,,,,,,,,,,,,,,,
CriminalEventsManager,"    public void Start_Resolving_AUTO(CustomCriminalEvent ev)
    {
        if (ev.isCurrentlyResolving || ev.isCurrentlyResolving_MANUALLY) { return; }

        ev.isCurrentlyResolving = true;
        ev.resolvingCountdownRemaining = criminal_event_resolve_time;

        saveManager.SaveStartMainCallback();
    }",0.00,0.00,4.00,0.80,,,,,,,,,,,,,,,,,,,
CriminalEventsManager,"public string GetHeadFromEventType(CriminalEventTypes type)
{
    switch (type)
    {
        case CriminalEventTypes.Illegal_Trash_Disposal:
            return ""Illegal Thrash Disposal"";
        case CriminalEventTypes.Vandalism:
            return ""Vandalism"";
        case CriminalEventTypes.DestroyingPlants:
            return ""Destroying Plants"";
        default:
            return ""Criminal Activity"";
    }
}",0.00,0.00,1.00,0.20,,,,,,,,,,,,,,,,,,,
CriminalEventsManager,"public string GetDetailsFromEventType(CriminalEventTypes type)
{
    switch (type)
    {
        case CriminalEventTypes.Illegal_Trash_Disposal:
            return ""Citizen dumping their yard waste to the street"";
        case CriminalEventTypes.Vandalism:
            return ""Citizen destroying public property"";
        case CriminalEventTypes.DestroyingPlants:
            return ""Citizen harming nearby plantlife"";
        default:
            return ""Ongoing criminal activity that needs to be taken action"";
    }
}",0.00,0.00,1.00,0.30,,,,,,,,,,,,,,,,,,,
CriminalEventsManager,"    public void InitCriminalEentsFromLoad(List<SaveCustomCriminalEvent> criminalEventList)
    {
        if (criminalEventList.Count < 1) return;
        foreach (var eventSave in criminalEventList)
        {
            var pos = new Vector3(eventSave.worldPos.x, eventSave.worldPos.y, eventSave.worldPos.z);
            var _tempEvent = InitAddRandomCriminalEventMainCallback(pos, false, eventSave.criminalType);

            _tempEvent.isCurrentlyResolving = eventSave.isCurrentlyResolving;
            _tempEvent.isCurrentlyResolving_MANUALLY = eventSave.isCurrentlyResolving_MANUALLY;
            _tempEvent.resolvingCountdownRemaining = eventSave.resolvingCountdownRemaining;
        }
    }",0.00,0.00,7.00,2.00,,,,,,,,,,,,,,,,,,,
CriminalEventsManager,"    public void CloseAllOpenEventsWhenAnotherTriesToOpen()
    {
        foreach (var event_ in criminalEventList)
        {
            event_.selfWorldTransform.GetComponent<CriminalEventSelfData>().TryCloseSelf();
        }
    }",0.00,0.00,2.00,0.05,,,,,,,,,,,,,,,,,,,
CriminalEventsManager,"    public void CloseAllOtherEventImageWhenOneOpened(CustomCriminalEvent openedEvent)
    {
        foreach (var event_ in criminalEventList)
        {
            if (event_ != openedEvent)
            {
                event_.selfWorldTransform.gameObject.SetActive(false);
            }
        }
    }",0.00,0.00,2.00,0.05,,,,,,,,,,,,,,,,,,,
CriminalEventsManager,"    public void RE_OpenAllOtherEventImageWhenOneOpened()
    {
        foreach (var event_ in criminalEventList)
        {
            event_.selfWorldTransform.gameObject.SetActive(true);
        }
    }",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
UtilsClass,"public static int GetSortingOrder(Vector3 position, int offset, int baseSortingOrder = sortingOrderDefault)
{
    return (int)(baseSortingOrder - position.y) + offset;
}",0.00,0.00,3.00,0.10,,,,,,,,,,,,,,,,,,,
UtilsClass,"public static Transform GetCanvasTransform()
{
    if (cachedCanvasTransform == null)
    {
        Canvas canvas = MonoBehaviour.FindObjectOfType<Canvas>();
        if (canvas != null)
        {
            cachedCanvasTransform = canvas.transform;
        }
    }
    return cachedCanvasTransform;
}",0.00,0.00,4.00,0.20,,,,,,,,,,,,,,,,,,,
UtilsClass,"public static GameObject CreateWorldSprite(string name, Sprite sprite, Vector3 position, Vector3 localScale, int sortingOrder, Color color)
{
    return CreateWorldSprite(null, name, sprite, position, localScale, sortingOrder, color);
}",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
UtilsClass,"        public static GameObject CreateWorldSprite(Transform parent, string name, Sprite sprite, Vector3 localPosition, Vector3 localScale, int sortingOrder, Color color)
        {
            GameObject gameObject = new GameObject(name, typeof(SpriteRenderer));
            Transform transform = gameObject.transform;
            transform.SetParent(parent, false);
            transform.localPosition = localPosition;
            transform.localScale = localScale;
            SpriteRenderer spriteRenderer = gameObject.GetComponent<SpriteRenderer>();
            spriteRenderer.sprite = sprite;
            spriteRenderer.sortingOrder = sortingOrder;
            spriteRenderer.color = color;
            return gameObject;
        }",0.00,0.00,12.00,0.30,,,,,,,,,,,,,,,,,,,
UtilsClass,"public static TextMesh CreateWorldText(string text, Transform parent = null, Vector3 localPosition = default(Vector3), int fontSize = 40, Color? color = null, TextAnchor textAnchor = TextAnchor.UpperLeft, TextAlignment textAlignment = TextAlignment.Left, int sortingOrder = sortingOrderDefault)
{
    if (color == null) color = Color.white;
    return CreateWorldText(parent, text, localPosition, fontSize, (Color)color, textAnchor, textAlignment, sortingOrder);
}",0.00,0.00,2.00,0.10,,,,,,,,,,,,,,,,,,,
UtilsClass,"public static TextMesh CreateWorldText(Transform parent, string text, Vector3 localPosition, int fontSize, Color color, TextAnchor textAnchor, TextAlignment textAlignment, int sortingOrder)
{
    GameObject gameObject = new GameObject(""World_Text"", typeof(TextMesh));
    Transform transform = gameObject.transform;
    transform.SetParent(parent, false);
    transform.localPosition = localPosition;
    TextMesh textMesh = gameObject.GetComponent<TextMesh>();
    textMesh.anchor = textAnchor;
    textMesh.alignment = textAlignment;
    textMesh.text = text;
    textMesh.fontSize = fontSize;
    textMesh.color = color;
    textMesh.GetComponent<MeshRenderer>().sortingOrder = sortingOrder;
    return textMesh;
}",0.00,0.00,16.00,0.30,,,,,,,,,,,,,,,,,,,
UtilsClass,"public static void CreateWorldTextPopup(string text, Vector3 localPosition)
{
    CreateWorldTextPopup(null, text, localPosition, 20, Color.white, localPosition + new Vector3(0, 10), 1f);
}",0.00,0.00,1.00,0.10,,,,,,,,,,,,,,,,,,,
UtilsClass,"public static void CreateWorldTextPopup(Transform parent, string text, Vector3 localPosition, int fontSize, Color color, Vector3 finalPopupPosition, float popupTime)
{
    TextMesh textMesh = CreateWorldText(parent, text, localPosition, fontSize, color, TextAnchor.LowerLeft, TextAlignment.Left, sortingOrderDefault);
    Transform transform = textMesh.transform;
    Vector3 moveAmount = (finalPopupPosition - localPosition) / popupTime;
    FunctionUpdater.Create(delegate () {
        transform.position += moveAmount * Time.deltaTime;
        popupTime -= Time.deltaTime;
        if (popupTime <= 0f)
        {
            UnityEngine.Object.Destroy(transform.gameObject);
            return true;
        }
        else
        {
            return false;
        }
    }, ""WorldTextPopup"");
}",0.00,0.00,6.00,0.30,,,,,,,,,,,,,,,,,,,
UtilsClass,"public static FunctionUpdater CreateUITextUpdater(Func<string> GetTextFunc, Vector2 anchoredPosition)
{
    Text text = DrawTextUI(GetTextFunc(), anchoredPosition, 20, GetDefaultFont());
    return FunctionUpdater.Create(() => {
        text.text = GetTextFunc();
        return false;
    }, ""UITextUpdater"");
}",0.00,0.00,4.00,0.10,,,,,,,,,,,,,,,,,,,
UtilsClass,"public static RectTransform DrawSprite(Color color, Transform parent, Vector2 pos, Vector2 size, string name = null)
{
    RectTransform rectTransform = DrawSprite(null, color, parent, pos, size, name);
    return rectTransform;
}",0.00,0.00,1.00,0.10,,,,,,,,,,,,,,,,,,,
UtilsClass,"public static RectTransform DrawSprite(Sprite sprite, Transform parent, Vector2 pos, Vector2 size, string name = null)
{
    RectTransform rectTransform = DrawSprite(sprite, Color.white, parent, pos, size, name);
    return rectTransform;
}",0.00,0.00,1.00,0.10,,,,,,,,,,,,,,,,,,,
UtilsClass,"public static RectTransform DrawSprite(Sprite sprite, Color color, Transform parent, Vector2 pos, Vector2 size, string name = null)
{
    // Setup icon
    if (name == null || name == """") name = ""Sprite"";
    GameObject go = new GameObject(name, typeof(RectTransform), typeof(Image));
    RectTransform goRectTransform = go.GetComponent<RectTransform>();
    goRectTransform.SetParent(parent, false);
    goRectTransform.sizeDelta = size;
    goRectTransform.anchoredPosition = pos;

    Image image = go.GetComponent<Image>();
    image.sprite = sprite;
    image.color = color;

    return goRectTransform;
}",0.00,0.00,11.00,0.20,,,,,,,,,,,,,,,,,,,
UtilsClass,"public static Text DrawTextUI(string textString, Vector2 anchoredPosition, int fontSize, Font font)
{
    return DrawTextUI(textString, GetCanvasTransform(), anchoredPosition, fontSize, font);
}",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
UtilsClass,"public static Text DrawTextUI(string textString, Transform parent, Vector2 anchoredPosition, int fontSize, Font font)
{
    GameObject textGo = new GameObject(""Text"", typeof(RectTransform), typeof(Text));
    textGo.transform.SetParent(parent, false);
    Transform textGoTrans = textGo.transform;
    textGoTrans.SetParent(parent, false);
    textGoTrans.localPosition = Vector3zero;
    textGoTrans.localScale = Vector3one;

    RectTransform textGoRectTransform = textGo.GetComponent<RectTransform>();
    textGoRectTransform.sizeDelta = new Vector2(0, 0);
    textGoRectTransform.anchoredPosition = anchoredPosition;

    Text text = textGo.GetComponent<Text>();
    text.text = textString;
    text.verticalOverflow = VerticalWrapMode.Overflow;
    text.horizontalOverflow = HorizontalWrapMode.Overflow;
    text.alignment = TextAnchor.MiddleLeft;
    if (font == null) font = GetDefaultFont();
    text.font = font;
    text.fontSize = fontSize;

    return text;
}",0.00,0.00,19.00,0.30,,,,,,,,,,,,,,,,,,,
UtilsClass,"public static float Parse_Float(string txt, float _default)
{
    float f;
    if (!float.TryParse(txt, out f))
    {
        f = _default;
    }
    return f;
}",0.00,0.00,2.00,0.10,,,,,,,,,,,,,,,,,,,
UtilsClass,"public static int Parse_Int(string txt, int _default)
{
    int i;
    if (!int.TryParse(txt, out i))
    {
        i = _default;
    }
    return i;
}",0.00,0.00,2.00,0.10,,,,,,,,,,,,,,,,,,,
UtilsClass,"public static int Parse_Int(string txt)
{
    return Parse_Int(txt, -1);
}",0.00,0.00,1.00,0.10,,,,,,,,,,,,,,,,,,,
UtilsClass,"public static Vector3 GetMouseWorldPosition()
{
    Vector3 vec = GetMouseWorldPositionWithZ(Input.mousePosition, Camera.main);
    vec.z = 0f;
    return vec;
}",0.00,0.00,2.00,0.10,,,,,,,,,,,,,,,,,,,
UtilsClass,"public static Vector3 GetMouseWorldPositionWithZ()
{
    return GetMouseWorldPositionWithZ(Input.mousePosition, Camera.main);
}",0.00,0.00,2.00,0.01,,,,,,,,,,,,,,,,,,,
UtilsClass,"public static Vector3 GetMouseWorldPositionWithZ(Camera worldCamera)
{
    return GetMouseWorldPositionWithZ(Input.mousePosition, worldCamera);
}",0.00,0.00,1.00,0.10,,,,,,,,,,,,,,,,,,,
UtilsClass,"public static Vector3 GetMouseWorldPositionWithZ(Vector3 screenPosition, Camera worldCamera)
{
    Vector3 worldPosition = worldCamera.ScreenToWorldPoint(screenPosition);
    return worldPosition;
}",0.00,0.00,2.00,0.10,,,,,,,,,,,,,,,,,,,
UtilsClass,"public static bool IsPointerOverUI()
{
    if (EventSystem.current.IsPointerOverGameObject())
    {
        return true;
    }
    else
    {
        PointerEventData pe = new PointerEventData(EventSystem.current);
        pe.position = Input.mousePosition;
        List<RaycastResult> hits = new List<RaycastResult>();
        EventSystem.current.RaycastAll(pe, hits);
        return hits.Count > 0;
    }
}",0.00,0.00,4.00,0.30,,,,,,,,,,,,,,,,,,,
UtilsClass,"public static string Dec_to_Hex(int value)
{
    return value.ToString(""X2"");
}",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
UtilsClass,"public static int Hex_to_Dec(string hex)
{
    return Convert.ToInt32(hex, 16);
}",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
UtilsClass,"public static string Dec01_to_Hex(float value)
{
    return Dec_to_Hex((int)Mathf.Round(value * 255f));
}",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
UtilsClass,"public static float Hex_to_Dec01(string hex)
{
    return Hex_to_Dec(hex) / 255f;
}",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
UtilsClass," public static string GetStringFromColor(Color color)
 {
     string red = Dec01_to_Hex(color.r);
     string green = Dec01_to_Hex(color.g);
     string blue = Dec01_to_Hex(color.b);
     return red + green + blue;
 }",0.00,0.00,4.00,0.07,,,,,,,,,,,,,,,,,,,
UtilsClass,"public static string GetStringFromColorWithAlpha(Color color)
{
    string alpha = Dec01_to_Hex(color.a);
    return GetStringFromColor(color) + alpha;
}",0.00,0.00,2.00,0.01,,,,,,,,,,,,,,,,,,,
UtilsClass,"public static void GetStringFromColor(Color color, out string red, out string green, out string blue, out string alpha)
{
    red = Dec01_to_Hex(color.r);
    green = Dec01_to_Hex(color.g);
    blue = Dec01_to_Hex(color.b);
    alpha = Dec01_to_Hex(color.a);
}",0.00,0.00,4.00,0.05,,,,,,,,,,,,,,,,,,,
UtilsClass,"public static string GetStringFromColor(float r, float g, float b)
{
    string red = Dec01_to_Hex(r);
    string green = Dec01_to_Hex(g);
    string blue = Dec01_to_Hex(b);
    return red + green + blue;
}",0.00,0.00,3.00,0.05,,,,,,,,,,,,,,,,,,,
UtilsClass,"public static string GetStringFromColor(float r, float g, float b, float a)
{
    string alpha = Dec01_to_Hex(a);
    return GetStringFromColor(r, g, b) + alpha;
}",0.00,0.00,2.00,0.01,,,,,,,,,,,,,,,,,,,
UtilsClass,"public static Color GetColorFromString(string color)
{
    float red = Hex_to_Dec01(color.Substring(0, 2));
    float green = Hex_to_Dec01(color.Substring(2, 2));
    float blue = Hex_to_Dec01(color.Substring(4, 2));
    float alpha = 1f;
    if (color.Length >= 8)
    {
        // Color string contains alpha
        alpha = Hex_to_Dec01(color.Substring(6, 2));
    }
    return new Color(red, green, blue, alpha);
}",0.00,0.00,9.00,0.80,,,,,,,,,,,,,,,,,,,
UtilsClass,"public static Vector3 GetRandomDir()
{
    return new Vector3(UnityEngine.Random.Range(-1f, 1f), UnityEngine.Random.Range(-1f, 1f)).normalized;
}",0.00,0.00,2.00,0.02,,,,,,,,,,,,,,,,,,,
UtilsClass,"public static Vector3 GetVectorFromAngle(int angle)
{
    // angle = 0 -> 360
    float angleRad = angle * (Mathf.PI / 180f);
    return new Vector3(Mathf.Cos(angleRad), Mathf.Sin(angleRad));
}",0.00,0.00,3.00,0.03,,,,,,,,,,,,,,,,,,,
UtilsClass,"public static Vector3 GetVectorFromAngle(float angle)
{
    // angle = 0 -> 360
    float angleRad = angle * (Mathf.PI / 180f);
    return new Vector3(Mathf.Cos(angleRad), Mathf.Sin(angleRad));
}",0.00,0.00,3.00,0.03,,,,,,,,,,,,,,,,,,,
UtilsClass,"public static Vector3 GetVectorFromAngleInt(int angle)
{
    // angle = 0 -> 360
    float angleRad = angle * (Mathf.PI / 180f);
    return new Vector3(Mathf.Cos(angleRad), Mathf.Sin(angleRad));
}",0.00,0.00,3.00,0.03,,,,,,,,,,,,,,,,,,,
UtilsClass,"public static float GetAngleFromVectorFloat(Vector3 dir)
{
    dir = dir.normalized;
    float n = Mathf.Atan2(dir.y, dir.x) * Mathf.Rad2Deg;
    if (n < 0) n += 360;

    return n;
}",0.00,0.00,3.00,0.10,,,,,,,,,,,,,,,,,,,
UtilsClass,"public static float GetAngleFromVectorFloat3D(Vector3 dir)
{
    dir = dir.normalized;
    float n = Mathf.Atan2(dir.z, dir.x) * Mathf.Rad2Deg;
    if (n < 0) n += 360;

    return n;
}",0.00,0.00,3.00,0.10,,,,,,,,,,,,,,,,,,,
UtilsClass,"public static int GetAngleFromVector(Vector3 dir)
{
    dir = dir.normalized;
    float n = Mathf.Atan2(dir.y, dir.x) * Mathf.Rad2Deg;
    if (n < 0) n += 360;
    int angle = Mathf.RoundToInt(n);

    return angle;
}",0.00,0.00,5.00,0.10,,,,,,,,,,,,,,,,,,,
UtilsClass,"public static int GetAngleFromVector180(Vector3 dir)
{
    dir = dir.normalized;
    float n = Mathf.Atan2(dir.y, dir.x) * Mathf.Rad2Deg;
    int angle = Mathf.RoundToInt(n);

    return angle;
}",0.00,0.00,3.00,0.01,,,,,,,,,,,,,,,,,,,
UtilsClass,"public static Vector3 ApplyRotationToVector(Vector3 vec, Vector3 vecRotation)
{
    return ApplyRotationToVector(vec, GetAngleFromVectorFloat(vecRotation));
}",0.00,0.00,2.00,0.01,,,,,,,,,,,,,,,,,,,
UtilsClass,"public static Vector3 ApplyRotationToVector(Vector3 vec, float angle)
{
    return Quaternion.Euler(0, 0, angle) * vec;
}",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
UtilsClass,"public static Vector3 ApplyRotationToVectorXZ(Vector3 vec, float angle)
{
    return Quaternion.Euler(0, angle, 0) * vec;
}",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
UtilsClass,"public static FunctionUpdater CreateMouseDraggingAction(Action<Vector3> onMouseDragging)
{
    return CreateMouseDraggingAction(0, onMouseDragging);
}",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
UtilsClass,"public static FunctionUpdater CreateMouseDraggingAction(int mouseButton, Action<Vector3> onMouseDragging)
{
    bool dragging = false;
    return FunctionUpdater.Create(() => {
        if (Input.GetMouseButtonDown(mouseButton))
        {
            dragging = true;
        }
        if (Input.GetMouseButtonUp(mouseButton))
        {
            dragging = false;
        }
        if (dragging)
        {
            onMouseDragging(UtilsClass.GetMouseWorldPosition());
        }
        return false;
    });
}",0.00,0.00,8.00,0.20,,,,,,,,,,,,,,,,,,,
UtilsClass,"public static FunctionUpdater CreateMouseClickFromToAction(Action<Vector3, Vector3> onMouseClickFromTo, Action<Vector3, Vector3> onWaitingForToPosition)
{
    return CreateMouseClickFromToAction(0, 1, onMouseClickFromTo, onWaitingForToPosition);
}",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
UtilsClass,"public static FunctionUpdater CreateMouseClickAction(Action<Vector3> onMouseClick)
{
    return CreateMouseClickAction(0, onMouseClick);
}",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
UtilsClass,"public static FunctionUpdater CreateMouseClickAction(int mouseButton, Action<Vector3> onMouseClick)
{
    return FunctionUpdater.Create(() => {
        if (Input.GetMouseButtonDown(mouseButton))
        {
            onMouseClick(GetWorldPositionFromUI());
        }
        return false;
    });
}",0.00,0.00,3.00,0.01,,,,,,,,,,,,,,,,,,,
UtilsClass,"public static FunctionUpdater CreateKeyCodeAction(KeyCode keyCode, Action onKeyDown)
{
    return FunctionUpdater.Create(() => {
        if (Input.GetKeyDown(keyCode))
        {
            onKeyDown();
        }
        return false;
    });
}",0.00,0.00,3.00,0.01,,,,,,,,,,,,,,,,,,,
UtilsClass,"public static Vector2 GetWorldUIPosition(Vector3 worldPosition, Transform parent, Camera uiCamera, Camera worldCamera)
{
    Vector3 screenPosition = worldCamera.WorldToScreenPoint(worldPosition);
    Vector3 uiCameraWorldPosition = uiCamera.ScreenToWorldPoint(screenPosition);
    Vector3 localPos = parent.InverseTransformPoint(uiCameraWorldPosition);
    return new Vector2(localPos.x, localPos.y);
}",0.00,0.00,3.00,0.01,,,,,,,,,,,,,,,,,,,
UtilsClass,"public static Vector3 GetWorldPositionFromUIZeroZ()
{
    Vector3 vec = GetWorldPositionFromUI(Input.mousePosition, Camera.main);
    vec.z = 0f;
    return vec;
}",0.00,0.00,2.00,0.01,,,,,,,,,,,,,,,,,,,
UtilsClass,"public static Vector3 GetWorldPositionFromUI()
{
    return GetWorldPositionFromUI(Input.mousePosition, Camera.main);
}",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
UtilsClass,"public static Vector3 GetWorldPositionFromUI(Camera worldCamera)
{
    return GetWorldPositionFromUI(Input.mousePosition, worldCamera);
}",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
UtilsClass,"public static Vector3 GetWorldPositionFromUI(Vector3 screenPosition, Camera worldCamera)
{
    Vector3 worldPosition = worldCamera.ScreenToWorldPoint(screenPosition);
    return worldPosition;
}",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
UtilsClass,"public static Vector3 GetWorldPositionFromUI_Perspective()
{
    return GetWorldPositionFromUI_Perspective(Input.mousePosition, Camera.main);
}",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
UtilsClass,"public static Vector3 GetWorldPositionFromUI_Perspective(Camera worldCamera)
{
    return GetWorldPositionFromUI_Perspective(Input.mousePosition, worldCamera);
}",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
UtilsClass,"public static Vector3 GetWorldPositionFromUI_Perspective(Vector3 screenPosition, Camera worldCamera)
{
    Ray ray = worldCamera.ScreenPointToRay(screenPosition);
    Plane xy = new Plane(Vector3.forward, new Vector3(0, 0, 0f));
    float distance;
    xy.Raycast(ray, out distance);
    return ray.GetPoint(distance);
}",0.00,0.00,6.00,0.20,,,,,,,,,,,,,,,,,,,
UtilsClass,"public static void ShakeCamera(float intensity, float timer)
{
    Vector3 lastCameraMovement = Vector3.zero;
    FunctionUpdater.Create(delegate () {
        timer -= Time.unscaledDeltaTime;
        Vector3 randomMovement = new Vector3(UnityEngine.Random.Range(-1f, 1f), UnityEngine.Random.Range(-1f, 1f)).normalized * intensity;
        Camera.main.transform.position = Camera.main.transform.position - lastCameraMovement + randomMovement;
        lastCameraMovement = randomMovement;
        return timer <= 0f;
    }, ""CAMERA_SHAKE"");
}",0.00,0.00,7.00,2.00,,,,,,,,,,,,,,,,,,,
FunctionUpdater,"private static void InitIfNeeded()
{
    if (initGameObject == null)
    {
        initGameObject = new GameObject(""FunctionUpdater_Global"");
        updaterList = new List<FunctionUpdater>();
    }
}",0.00,0.00,3.00,0.02,,,,,,,,,,,,,,,,,,,
FunctionUpdater,"public static FunctionUpdater Create(Action updateFunc)
{
    return Create(() => { updateFunc(); return false; }, """", true, false);
}",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
FunctionUpdater,"public static FunctionUpdater Create(Func<bool> updateFunc)
{
    return Create(updateFunc, """", true, false);
}",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
FunctionUpdater,"public static FunctionUpdater Create(Func<bool> updateFunc, string functionName)
{
    return Create(updateFunc, functionName, true, false);
}",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
FunctionUpdater,"public static FunctionUpdater Create(Func<bool> updateFunc, string functionName, bool active)
{
    return Create(updateFunc, functionName, active, false);
}",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
FunctionUpdater,"public static FunctionUpdater Create(Func<bool> updateFunc, string functionName, bool active, bool stopAllWithSameName)
{
    InitIfNeeded();

    if (stopAllWithSameName)
    {
        StopAllUpdatersWithName(functionName);
    }

    GameObject gameObject = new GameObject(""FunctionUpdater Object "" + functionName, typeof(MonoBehaviourHook));
    FunctionUpdater functionUpdater = new FunctionUpdater(gameObject, updateFunc, functionName, active);
    gameObject.GetComponent<MonoBehaviourHook>().OnUpdate = functionUpdater.Update;

    updaterList.Add(functionUpdater);
    return functionUpdater;
}",0.00,0.00,9.00,0.50,,,,,,,,,,,,,,,,,,,
FunctionUpdater,"private static void RemoveUpdater(FunctionUpdater funcUpdater)
{
    InitIfNeeded();
    updaterList.Remove(funcUpdater);
}",0.00,0.00,2.00,0.10,,,,,,,,,,,,,,,,,,,
FunctionUpdater,"public static void DestroyUpdater(FunctionUpdater funcUpdater)
{
    InitIfNeeded();
    if (funcUpdater != null)
    {
        funcUpdater.DestroySelf();
    }
}",0.00,0.00,4.00,0.15,,,,,,,,,,,,,,,,,,,
FunctionUpdater,"public static void StopUpdaterWithName(string functionName)
{
    InitIfNeeded();
    for (int i = 0; i < updaterList.Count; i++)
    {
        if (updaterList[i].functionName == functionName)
        {
            updaterList[i].DestroySelf();
            return;
        }
    }
}",0.00,0.00,4.00,0.50,,,,,,,,,,,,,,,,,,,
FunctionUpdater,"public static void StopAllUpdatersWithName(string functionName)
{
    InitIfNeeded();
    for (int i = 0; i < updaterList.Count; i++)
    {
        if (updaterList[i].functionName == functionName)
        {
            updaterList[i].DestroySelf();
            i--;
        }
    }
}",0.00,0.00,4.00,0.50,,,,,,,,,,,,,,,,,,,
FunctionUpdater,"private void Update()
{
    if (!active) return;
    if (updateFunc())
    {
        DestroySelf();
    }
}",0.00,0.00,3.00,0.08,,,,,,,,,,,,,,,,,,,
FunctionUpdater,"public void DestroySelf()
{
    RemoveUpdater(this);
    if (gameObject != null)
    {
        UnityEngine.Object.Destroy(gameObject);
    }
}",0.00,0.00,2.00,0.05,,,,,,,,,,,,,,,,,,,
Mouse3D,"    private void Awake()
    {
        if (Instance == null)
        {
            Instance = this;
        }
        else if (Instance != this)
        {
            Destroy(gameObject);
        }
    }",0.00,0.00,3.00,0.01,,,,,,,,,,,,,,,,,,,
Mouse3D,"private void Update()
{
    Ray ray = Camera.main.ScreenPointToRay(Input.mousePosition);
    if (Physics.Raycast(ray, out RaycastHit raycastHit, 999f, mouseColliderLayerMask))
    {
        transform.position = raycastHit.point;
    }
}",0.00,0.00,4.00,0.10,,,,,,,,,,,,,,,,,,,
Mouse3D,public static Vector3 GetMouseWorldPosition() => Instance.GetMouseWorldPosition_Instance();,0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
Mouse3D,public static Vector3 GetMouseWorldPosition_OffsetForFarmDrag(Vector3Int offset) => Instance.GetMouseWorldPosition_Instance_OffSetted_ForDrag(offset);,0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
Mouse3D,public static Vector3 GetCustomScreenToWorldPosition(Vector2 pos) => Instance.GetCustomScreenToWorldPosition_Instance(pos);,0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
Mouse3D,"private Vector3 GetMouseWorldPosition_Instance()
{
    Ray ray = Camera.main.ScreenPointToRay(Input.mousePosition);
    if (Physics.Raycast(ray, out RaycastHit raycastHit, 999f, mouseColliderLayerMask))
    {
        return raycastHit.point;
    }
    else
    {
        return Vector3.zero;
    }
}",0.00,0.00,4.00,0.50,,,,,,,,,,,,,,,,,,,
Mouse3D,"private Vector3 GetMouseWorldPosition_Instance_OffSetted_ForDrag(Vector3Int offset)
{
    Ray ray = Camera.main.ScreenPointToRay(Input.mousePosition + offset);
    if (Physics.Raycast(ray, out RaycastHit raycastHit, 999f, mouseColliderLayerMask))
    {
        return raycastHit.point;
    }
    else
    {
        return Vector3.zero;
    }
}",0.00,0.00,4.00,0.50,,,,,,,,,,,,,,,,,,,
Mouse3D,"private Vector3 GetCustomScreenToWorldPosition_Instance(Vector2 pos)
{
    Ray ray = Camera.main.ScreenPointToRay(pos);
    if (Physics.Raycast(ray, out RaycastHit raycastHit, 999f, mouseColliderLayerMask))
    {
        return raycastHit.point;
    }
    else
    {
        return Vector3.zero;
    }
}",0.00,0.00,4.00,0.20,,,,,,,,,,,,,,,,,,,
BuildingGhost,"    private void Start()
    {
        displayError = DisplayError.Instance;
        gridBuildingSystem = GridBuildingSystem.Instance;

        // safe are values
        safeArea = Screen.safeArea;
        xminSafe = safeArea.xMin;
        xmaxSafe = safeArea.xMax;
        yminSafe = safeArea.yMin;
        ymaxSafe = safeArea.yMax;

        xBoundaryMoveCameraStart = Screen.safeArea.width / 10.0f;
        yBoundaryMoveCameraStart = Screen.safeArea.height / 5.0f;

        RefreshVisual();

        GridBuildingSystem.Instance.OnSelectedChanged += Instance_OnSelectedChanged;
        screenManager = ScreenManager.Instance;

        tempVisualBetweenFirstAndLast = new();

        width = gridBuildingSystem.GetGrid().GetWidth();
        height = gridBuildingSystem.GetGrid().GetHeight();

        //Debug.Log(""width: "" + width);
        //Debug.Log(""height: "" + height);
    }",0.00,0.00,7.00,0.10,,,,,,,,,,,,,,,,,,,
BuildingGhost,"    private void Instance_OnSelectedChanged(object sender, System.EventArgs e)
    {
        isFirstClickOnTopOfGhost = true;
        cameraTarget.SetCanCameraMove(false);
        RefreshVisual();

        // check if new placedObjectTypeSO == ROAD
        // if road set checkRoadMouseUpSwitch to true
        // set false otherwise
        CheckAndAssignNewFirstConstructCalledWithRoad();
    }",0.00,0.00,4.00,1.50,,,,,,,,,,,,,,,,,,,
BuildingGhost,"private void SetLayerRecursive(GameObject targetGameObject, int layer)
{
    targetGameObject.layer = layer;
    foreach (Transform child in targetGameObject.transform)
    {
        SetLayerRecursive(child.gameObject, layer);
    }
}",0.00,0.00,1.00,0.50,,,,,,,,,,,,,,,,,,,
BuildingGhost,"    public void On_Cancel_New_Building()
    {
        confirmClicked = false;
        gridBuildingSystem.isMoveActive = false;

        gridBuildingSystem.DeselectObjectType();
        buildingConstructionCanvas.gameObject.SetActive(false);

        isFirstRoadConfirmed = false;

        DeleteAllTempVisualRoads();
    }",2.00,0.00,6.00,1.50,,,,,,,,,,,,,,,,,,,
BuildingGhost,"    public void On_Place_Multiple_Road_Mode_Activate()
    {

        // disable this btn so cant clicked again
        //roadMultipleButton.gameObject.SetActive(false);

        Vector3 mousePosition = Mouse3D.GetMouseWorldPosition();

        if (visual == null)
        {
            // TODO
            // first road must be selected pop up ui text show user
            displayError.ShowError(""You need to select a road"");
            return;
        }

        isFirstRoadConfirmed = true;
        firstRoadPos = targetPosition;
        lastRoadPos = targetPosition;
    }",0.00,0.00,6.00,1.00,,,,,,,,,,,,,,,,,,,
BuildingGhost,"    public void On_Rotate_Left_Btn_Clicked()
    {
        if (screenManager.screen == ScreenManager.ScreenData.Farmland) { return; }
        disableGhostTransformChange = true;

        gridBuildingSystem.RotateBuildingGhost_Left_OnConstruction();

        RefreshVisual();

        disableGhostTransformChange = false;
    }",2.00,0.00,5.00,1.00,,,,,,,,,,,,,,,,,,,
BuildingGhost,"    public void On_Rotate_Right_Btn_Clicked()
    {
        if (screenManager.screen == ScreenManager.ScreenData.Farmland) { return; }
        disableGhostTransformChange = true;

        gridBuildingSystem.RotateBuildingGhost_Right_OnConstruction();

        RefreshVisual();

        disableGhostTransformChange = false;
    }",2.00,0.00,5.00,1.00,,,,,,,,,,,,,,,,,,,
BuildingGhost,"    private void DeleteAllTempVisualRoads()
    {
        if (tempVisualBetweenFirstAndLast == null) { return; }
        foreach (var tempVisualRoad in tempVisualBetweenFirstAndLast)
        {
            if (tempVisualBetweenFirstAndLast != null)
            {
                Destroy(tempVisualRoad.gameObject);
            }
        }
        tempVisualBetweenFirstAndLast.Clear();
    }",0.00,0.00,5.00,1.00,,,,,,,,,,,,,,,,,,,
BuildingGhost,"    private void CheckAndAssignNewFirstConstructCalledWithRoad()
    {
        if (placedObjectTypeSO == null) return;
        if (placedObjectTypeSO.kod == ""ROAD"")
        {
            checkRoadMouseUpSwitch = true;
        }
        else
        {
            checkRoadMouseUpSwitch = false;
        }
    }",0.00,0.00,4.00,0.25,,,,,,,,,,,,,,,,,,,
BuildingGhost,"    public void SetSelfPositionToCenterOfScreenOnMoveStart()
    {
        var width = Screen.safeArea.width;
        var height = Screen.safeArea.height;

        var worldPos = Mouse3D.GetCustomScreenToWorldPosition(new Vector2(width / 2.0f, height / 2.0f));

        worldPos.y = 0;
        transform.position = worldPos;
    }",0.00,0.00,7.00,0.30,,,,,,,,,,,,,,,,,,,
BuildingGhost,"    private void OnSafeAreaChanged()
    {
        safeArea = Screen.safeArea;
        xminSafe = safeArea.xMin;
        xmaxSafe = safeArea.xMin;
        yminSafe = safeArea.yMin;
        ymaxSafe = safeArea.yMax;
    }",0.00,0.00,5.00,0.05,,,,,,,,,,,,,,,,,,,
FarmlandBuildingGhost,"    private void Start()
    {
        displayError = DisplayError.Instance;
        farmlandGridBuildingSystem = FarmlandGridBuildingSystem.Instance;

        // safe are values
        safeArea = Screen.safeArea;
        xminSafe = safeArea.xMin;
        xmaxSafe = safeArea.xMax;
        yminSafe = safeArea.yMin;
        ymaxSafe = safeArea.yMax;

        xBoundaryMoveCameraStart = Screen.safeArea.width / 10.0f;
        yBoundaryMoveCameraStart = Screen.safeArea.height / 5.0f;

        RefreshVisual();

        FarmlandGridBuildingSystem.Instance.FarmlandOnSelectedChanged += Instance_OnSelectedChanged;
        screenManager = ScreenManager.Instance;

        tempVisualBetweenFirstAndLast = new();

        width = farmlandGridBuildingSystem.GetGrid().GetWidth();
        height = farmlandGridBuildingSystem.GetGrid().GetHeight();

        //Debug.Log(""width: "" + width);
        //Debug.Log(""height: "" + height);
    }",0.00,0.00,7.00,0.10,,,,,,,,,,,,,,,,,,,
FarmlandBuildingGhost,"    private void Instance_OnSelectedChanged(object sender, System.EventArgs e)
    {
        isFirstClickOnTopOfGhost = true;
        cameraTarget.SetCanCameraMove(false);
        RefreshVisual();

        // check if new placedObjectTypeSO == ROAD
        // if road set checkRoadMouseUpSwitch to true
        // set false otherwise
        CheckAndAssignNewFirstConstructCalledWithRoad();
    }",0.00,0.00,4.00,1.50,,,,,,,,,,,,,,,,,,,
FarmlandBuildingGhost,"private void SetLayerRecursive(GameObject targetGameObject, int layer)
{
    targetGameObject.layer = layer;
    foreach (Transform child in targetGameObject.transform)
    {
        SetLayerRecursive(child.gameObject, layer);
    }
}",0.00,0.00,1.00,0.50,,,,,,,,,,,,,,,,,,,
FarmlandBuildingGhost,"public void On_Cancel_New_Building()
{
    confirmClicked = false;
    farmlandGridBuildingSystem.isMoveActive = false;

    farmlandGridBuildingSystem.DeselectObjectType();
    buildingConstructionCanvas.gameObject.SetActive(false);

    isFirstRoadConfirmed = false;

    DeleteAllTempVisualRoads();
}",2.00,0.00,6.00,1.50,,,,,,,,,,,,,,,,,,,
FarmlandBuildingGhost,"public void On_Place_Multiple_Road_Mode_Activate()
{

    // disable this btn so cant clicked again
    //roadMultipleButton.gameObject.SetActive(false);

    Vector3 mousePosition = Mouse3D.GetMouseWorldPosition();

    if (visual == null)
    {
        // TODO
        // first road must be selected pop up ui text show user
        displayError.ShowError(""You need to select a road"");
        return;
    }

    isFirstRoadConfirmed = true;
    firstRoadPos = targetPosition;

    // create seperate visual of first road at target pos
    // disable visual at this gameobject
    // let road pre comes with road selected

    // as moving the last road from this gameobject
    // draw identicator between first and last road

    // if confirm place all roads between first and last

    // if cancel destory indicator and first roads seperate viusal gamoeobject
}",0.00,0.00,6.00,1.00,,,,,,,,,,,,,,,,,,,
FarmlandBuildingGhost,"    public void On_Rotate_Left_Btn_Clicked()
    {
        if (screenManager.screen == ScreenManager.ScreenData.City) { return; }
        disableGhostTransformChange = true;

        farmlandGridBuildingSystem.FarmlandRotateBuildingGhost_Left_OnConstruction();

        //targetPosition = farmlandGridBuildingSystem.GetMouseWorldSnappedPositionAnchoredToPreviousTargetPosOfGhost(lastOnBuildingMousePos);

        //targetPosition.y = 1f;
        //transform.position = Vector3.Lerp(transform.position, targetPosition, Time.deltaTime * 15f);
        //transform.position = targetPosition;

        //transform.rotation = Quaternion.Lerp(transform.rotation, FarmlandGridBuildingSystem.Instance.GetPlacedObjectRotation(), Time.deltaTime * 15f);

        //transform.rotation = farmlandGridBuildingSystem.GetPlacedObjectRotation();
        RefreshVisual();

        //lastOnBuildingMousePos = targetPosition;

        disableGhostTransformChange = false;
    }",2.00,0.00,5.00,1.00,,,,,,,,,,,,,,,,,,,
FarmlandBuildingGhost,"    public void On_Rotate_Right_Btn_Clicked()
    {
        if (screenManager.screen == ScreenManager.ScreenData.City) { return; }
        disableGhostTransformChange = true;

        farmlandGridBuildingSystem.FarmlandRotateBuildingGhost_Right_OnConstruction();

        //targetPosition = farmlandGridBuildingSystem.GetMouseWorldSnappedPositionAnchoredToPreviousTargetPosOfGhost(lastOnBuildingMousePos);

        //targetPosition.y = 1f;
        //transform.position = Vector3.Lerp(transform.position, targetPosition, Time.deltaTime * 15f);
        //transform.position = targetPosition;

        //transform.rotation = Quaternion.Lerp(transform.rotation, FarmlandGridBuildingSystem.Instance.GetPlacedObjectRotation(), Time.deltaTime * 15f);

        //transform.rotation = farmlandGridBuildingSystem.GetPlacedObjectRotation();
        RefreshVisual();

        //lastOnBuildingMousePos = targetPosition;

        disableGhostTransformChange = false;
    }",2.00,0.00,5.00,1.00,,,,,,,,,,,,,,,,,,,
FarmlandBuildingGhost,"    private void DeleteAllTempVisualRoads()
    {
        if (tempVisualBetweenFirstAndLast == null) { return; }
        foreach (var tempVisualRoad in tempVisualBetweenFirstAndLast)
        {
            if (tempVisualBetweenFirstAndLast != null)
            {
                Destroy(tempVisualRoad.gameObject);
            }
        }
        tempVisualBetweenFirstAndLast.Clear();
    }",0.00,0.00,5.00,1.00,,,,,,,,,,,,,,,,,,,
FarmlandBuildingGhost,"    private void CheckAndAssignNewFirstConstructCalledWithRoad()
    {
        if (placedObjectTypeSO == null) return;
        if (placedObjectTypeSO.kod == ""ROAD"")
        {
            checkRoadMouseUpSwitch = true;
        }
        else
        {
            checkRoadMouseUpSwitch = false;
        }
    }",0.00,0.00,4.00,0.25,,,,,,,,,,,,,,,,,,,
FarmlandBuildingGhost,"    public void SetSelfPositionToCenterOfScreenOnMoveStart_Farmland()
    {
        var width = Screen.safeArea.width;
        var height = Screen.safeArea.height;

        var worldPos = Mouse3D.GetCustomScreenToWorldPosition(new Vector2(width / 2.0f, height / 2.0f));

        worldPos.y = 0;
        transform.position = worldPos;
    }",0.00,0.00,7.00,0.30,,,,,,,,,,,,,,,,,,,
FarmlandBuildingGhost,"    private void OnSafeAreaChanged()
    {
        safeArea = Screen.safeArea;
        xminSafe = safeArea.xMin;
        xmaxSafe = safeArea.xMin;
        yminSafe = safeArea.yMin;
        ymaxSafe = safeArea.yMax;
    }",0.00,0.00,5.00,0.05,,,,,,,,,,,,,,,,,,,
FarmlandGridBuildingSystem,"    private void Awake()
    {
        Instance = this;

        int gridWidth = 40;
        int gridHeight = 40;
        float cellSize = 5f;
        grid = new Grid<GridObject>(gridWidth, gridHeight, cellSize, new Vector3(-800, 0, -800), (Grid<GridObject> g, int x, int y) => new GridObject(g, x, y));

        placedObjectTypeSO = null;// placedObjectTypeSOList[0];
    }",0.00,0.00,5.00,0.10,,,,,,,,,,,,,,,,,,,
FarmlandGridBuildingSystem,"    private void Start()
    {
        // assign static referances
        displayError = DisplayError.Instance;
        resourceManager = RawResource.Instance;
        environment = EnvironmentManager.Instance;
        buildingsManager = BuildingsManager.Instance;
        //fogManager = FogManager.Instance;
        populationManager = Population.Instance;
        utilitiesManager = Utilities.Instance;
        leaderManager = Leader.Instance;

        screenManager = ScreenManager.Instance;

        saveManager = SaveManager.Instance;
        isolatedSimulator = IsolatedSimulator.Instance;
        guidedTutorialManager = GuidedTutorialManager.Instance;

    }",0.00,0.00,11.00,0.10,,,,,,,,,,,,,,,,,,,
FarmlandGridBuildingSystem,"public override string ToString()
{
    return x + "", "" + y + ""\n"" + placedObject;
}",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
FarmlandGridBuildingSystem,"public void SetPlacedObject(PlacedObject_Done placedObject)
{
    this.placedObject = placedObject;
    grid.TriggerGridObjectChanged(x, y);
}",0.00,0.00,2.00,0.01,,,,,,,,,,,,,,,,,,,
FarmlandGridBuildingSystem,"public void ClearPlacedObject()
{
    placedObject = null;
    grid.TriggerGridObjectChanged(x, y);
}",0.00,0.00,2.00,0.01,,,,,,,,,,,,,,,,,,,
FarmlandGridBuildingSystem,"public void SetSelectedPlacedObjectTypeSO(int SOindex)
{
    placedObjectTypeSO = placedObjectTypeSOList[SOindex];
    if (placedObjectTypeSO.kod == ""ROAD"") { dir = PlacedObjectTypeSO.Dir.Down; }
    RefreshSelectedObjectType();
}",0.00,0.00,4.00,0.10,,,,,,,,,,,,,,,,,,,
FarmlandGridBuildingSystem,"public void SetSelectedPlacedObjectTypeSO(PlacedObjectTypeSO SO)
{
    placedObjectTypeSO = SO;
    if (placedObjectTypeSO.kod == ""ROAD"") { dir = PlacedObjectTypeSO.Dir.Down; }
    RefreshSelectedObjectType();
}",0.00,0.00,4.00,0.10,,,,,,,,,,,,,,,,,,,
FarmlandGridBuildingSystem,"public void DeselectObjectType()
{
    placedObjectTypeSO = null; RefreshSelectedObjectType();

    if (showGrid.gameObject.activeSelf) { showGrid.gameObject.SetActive(false); }
}",0.00,0.00,4.00,0.06,,,,,,,,,,,,,,,,,,,
FarmlandGridBuildingSystem,"private void RefreshSelectedObjectType()
{
    FarmlandOnSelectedChanged?.Invoke(this, EventArgs.Empty);
}",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
FarmlandGridBuildingSystem,"public Vector2Int GetGridPosition(Vector3 worldPosition)
{
    grid.GetXZ(worldPosition, out int x, out int z);
    return new Vector2Int(x, z);
}",0.00,0.00,1.00,0.10,,,,,,,,,,,,,,,,,,,
FarmlandGridBuildingSystem,"public Vector3 GetMouseWorldSnappedPosition()
{
    Vector3 mousePosition = Mouse3D.GetMouseWorldPosition();
    grid.GetXZ(mousePosition, out int x, out int z);

    if (placedObjectTypeSO != null)
    {
        Vector3 placedObjectWorldPosition = grid.GetWorldPosition(x, z);
        return placedObjectWorldPosition;
    }
    else
    {
        return mousePosition;
    }
}",0.00,0.00,7.00,0.70,,,,,,,,,,,,,,,,,,,
FarmlandGridBuildingSystem,"public Vector3 GetMouseWorldSnappedPositionAnchoredToPreviousTargetPosOfGhost(Vector3 targetPos)
{
    grid.GetXZ(targetPos, out int x, out int z);

    if (placedObjectTypeSO != null)
    {
        Vector3 placedObjectWorldPosition = grid.GetWorldPosition(x, z);
        return placedObjectWorldPosition;
    }
    else
    {
        return targetPos;
    }
}",0.00,0.00,5.00,0.30,,,,,,,,,,,,,,,,,,,
FarmlandGridBuildingSystem,"public Quaternion GetPlacedObjectRotation()
{
    if (placedObjectTypeSO != null)
    {
        return Quaternion.Euler(0, placedObjectTypeSO.GetRotationAngle(dir), 0);
    }
    else
    {
        return Quaternion.identity;
    }
}",0.00,0.00,3.00,0.20,,,,,,,,,,,,,,,,,,,
FarmlandGridBuildingSystem,"public void FarmlandRotateBuildingGhost_Right_OnConstruction()
{
    if (placedObjectTypeSO == null) { return; }

    dir = PlacedObjectTypeSO.GetRotateRightDir(dir);
}",0.00,0.00,3.00,2.50,,,,,,,,,,,,,,,,,,,
FarmlandGridBuildingSystem,"public void FarmlandRotateBuildingGhost_Left_OnConstruction()
{
    if (placedObjectTypeSO == null) { return; }

    dir = PlacedObjectTypeSO.GetRotateLeftDir(dir);
}",0.00,0.00,3.00,2.50,,,,,,,,,,,,,,,,,,,
FarmlandGridBuildingSystem,"public List<Vector2Int> GetCurrentGhostSOCoordinateList(Vector3 targetPos)
{
    if (placedObjectTypeSO == null) return new List<Vector2Int>();
    var normalizedForRotationMousePosition = targetPos;
    grid.GetXZ(normalizedForRotationMousePosition, out int x, out int z);

    Vector2Int placedObjectOrigin = new Vector2Int(x, z);
    placedObjectOrigin = grid.ValidateGridPosition(placedObjectOrigin);

    List<Vector2Int> gridPositionList = placedObjectTypeSO.GetGridPositionList(placedObjectOrigin, dir);

    return gridPositionList;
}",0.00,0.00,9.00,0.80,,,,,,,,,,,,,,,,,,,
FarmlandGridBuildingSystem,"public Vector2Int GetMousePosTo2DCoordinateOnGrid()
{
    var mousePos = GetMouseWorldSnappedPosition();
    grid.GetXZ(mousePos, out int x, out int z);
    return new Vector2Int(x, z);
}",0.00,0.00,4.00,0.50,,,,,,,,,,,,,,,,,,,
FarmlandGridBuildingSystem,"public void Farmland_RotateBuildingGhost_Right_OnConstruction()
{
    if (placedObjectTypeSO == null) { return; }

    dir = PlacedObjectTypeSO.GetRotateRightDir(dir);
}",0.00,0.00,3.00,0.50,,,,,,,,,,,,,,,,,,,
FarmlandGridBuildingSystem,"public void Farmland_RotateBuildingGhost_Left_OnConstruction()
{
    if (placedObjectTypeSO == null) { return; }

    dir = PlacedObjectTypeSO.GetRotateLeftDir(dir);
}",0.00,0.00,3.00,0.50,,,,,,,,,,,,,,,,,,,
FarmlandGridBuildingSystem,"    public Vector3 GetCorrectRotationOffsetForSelected()
    {
        if (placedObjectTypeSO == null) { return new Vector3(0, 0, 0); }
        Vector2Int rotationOffset = placedObjectTypeSO.GetRotationOffset(dir);
        return new Vector3(rotationOffset.x, 0, rotationOffset.y) * grid.GetCellSize();
    }",0.00,0.00,4.00,1.00,,,,,,,,,,,,,,,,,,,
FarmlandGridBuildingSystem,"public void TryMoveBuilding_LongPress()
{
    Vector3 mousePosition = Mouse3D.GetMouseWorldPosition();

    PlacedObject_Done placedObject2 = grid.GetGridObject(mousePosition).GetPlacedObject();
    if (placedObject2 != null)
    {
        // show ui
        audioManager.Play_buildingClicked();

        var kod = placedObject2.getPlacedObjectTypeSO().kod;
        if (kod == ""DIRTY_TYPE_1"" || kod == ""DIRTY_TYPE_2"" || kod == ""DIRTY_TYPE_3"" || kod == ""DIRTY_TYPE_4"")
        {
            return;
        }
        else
        {
            selectedDetails.SetOnlyPlacedObjec(placedObject2);
            selectedDetails.StartMoveBuilding();
        }
    }
}",0.00,0.00,9.00,2.00,,,,,,,,,,,,,,,,,,,
Grid,"public Vector3 GetWorldPosition(int x, int z)
{
    return new Vector3(x, 0, z) * cellSize + originPosition;
}",0.00,0.00,1.00,0.40,,,,,,,,,,,,,,,,,,,
Grid,"public void GetXZ(Vector3 worldPosition, out int x, out int z)
{
    x = Mathf.FloorToInt((worldPosition - originPosition).x / cellSize);
    z = Mathf.FloorToInt((worldPosition - originPosition).z / cellSize);
}",0.00,0.00,4.00,0.30,,,,,,,,,,,,,,,,,,,
Grid,"public void SetGridObject(int x, int z, TGridObject value)
{
    if (x >= 0 && z >= 0 && x < width && z < height)
    {
        gridArray[x, z] = value;
        TriggerGridObjectChanged(x, z);
    }
}",0.00,0.00,7.00,0.40,,,,,,,,,,,,,,,,,,,
Grid,"public void TriggerGridObjectChanged(int x, int z)
{
    OnGridObjectChanged?.Invoke(this, new OnGridObjectChangedEventArgs { x = x, z = z });
}",0.00,0.00,3.00,0.10,,,,,,,,,,,,,,,,,,,
Grid,"public void SetGridObject(Vector3 worldPosition, TGridObject value)
{
    GetXZ(worldPosition, out int x, out int z);
    SetGridObject(x, z, value);
}",0.00,0.00,4.00,0.15,,,,,,,,,,,,,,,,,,,
Grid,"public TGridObject GetGridObject(int x, int z)
{
    if (x >= 0 && z >= 0 && x < width && z < height)
    {
        return gridArray[x, z];
    }
    else
    {
        return default(TGridObject);
    }
}",0.00,0.00,5.00,0.15,,,,,,,,,,,,,,,,,,,
Grid,"public TGridObject GetGridObject(Vector3 worldPosition)
{
    int x, z;
    GetXZ(worldPosition, out x, out z);
    return GetGridObject(x, z);
}",0.00,0.00,3.00,0.10,,,,,,,,,,,,,,,,,,,
Grid,"public Vector2Int ValidateGridPosition(Vector2Int gridPosition)
{
    return new Vector2Int(
        Mathf.Clamp(gridPosition.x, 0, width - 1),
        Mathf.Clamp(gridPosition.y, 0, height - 1)
    );
}",0.00,0.00,2.00,0.20,,,,,,,,,,,,,,,,,,,
GridBuildingSystem,"private void Awake()
{
    Instance = this;

    int gridWidth = 120;
    int gridHeight = 120;
    float cellSize = 5f;
    grid = new Grid<GridObject>(gridWidth, gridHeight, cellSize, new Vector3(0, 0, 0), (Grid<GridObject> g, int x, int y) => new GridObject(g, x, y));

    placedObjectTypeSO = null;// placedObjectTypeSOList[0];
}",0.00,0.00,5.00,0.10,,,,,,,,,,,,,,,,,,,
GridBuildingSystem,"private void Start()
{
    // assign static referances
    displayError = DisplayError.Instance;
    resourceManager = RawResource.Instance;
    environment = EnvironmentManager.Instance;
    buildingsManager = BuildingsManager.Instance;
    //fogManager = FogManager.Instance;
    populationManager = Population.Instance;
    utilitiesManager = Utilities.Instance;
    leaderManager = Leader.Instance;

    farmlandGridBuildingSystem3d = FarmlandGridBuildingSystem.Instance;
    screenManager = ScreenManager.Instance;

    saveManager = SaveManager.Instance;
    isolatedSimulator = IsolatedSimulator.Instance;
    guidedTutorialManager = GuidedTutorialManager.Instance;
}",0.00,0.00,11.00,0.10,,,,,,,,,,,,,,,,,,,
GridBuildingSystem,"public override string ToString()
{
    return x + "", "" + y + ""\n"" + placedObject;
}",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
GridBuildingSystem,"""public void SetPlacedObject(PlacedObject_Done placedObject)
{
    this.placedObject = placedObject;
    grid.TriggerGridObjectChanged(x, y);
}""",0.00,0.00,2.00,0.01,,,,,,,,,,,,,,,,,,,
GridBuildingSystem,"""public void ClearPlacedObject()
{
    placedObject = null;
    grid.TriggerGridObjectChanged(x, y);
}""",0.00,0.00,2.00,0.01,,,,,,,,,,,,,,,,,,,
GridBuildingSystem,"public void SetSelectedPlacedObjectTypeSO(int SOindex)
{
    placedObjectTypeSO = placedObjectTypeSOList[SOindex];
    if (placedObjectTypeSO.kod == ""ROAD"") { dir = PlacedObjectTypeSO.Dir.Down; }
    RefreshSelectedObjectType();
}",0.00,0.00,4.00,0.10,,,,,,,,,,,,,,,,,,,
GridBuildingSystem,"public void SetSelectedPlacedObjectTypeSO(PlacedObjectTypeSO SO)
{
    placedObjectTypeSO = SO;
    if (placedObjectTypeSO.kod == ""ROAD"") { dir = PlacedObjectTypeSO.Dir.Down; }
    RefreshSelectedObjectType();
}",0.00,0.00,4.00,0.10,,,,,,,,,,,,,,,,,,,
GridBuildingSystem,"public void DeselectObjectType()
{
    placedObjectTypeSO = null; RefreshSelectedObjectType();

    if (showGrid.gameObject.activeSelf) { showGrid.gameObject.SetActive(false); }
}",0.00,0.00,4.00,0.06,,,,,,,,,,,,,,,,,,,
GridBuildingSystem,"private void RefreshSelectedObjectType()
{
    OnSelectedChanged?.Invoke(this, EventArgs.Empty);
}",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
GridBuildingSystem,"public Vector2Int GetGridPosition(Vector3 worldPosition)
{
    grid.GetXZ(worldPosition, out int x, out int z);
    return new Vector2Int(x, z);
}",0.00,0.00,1.00,0.10,,,,,,,,,,,,,,,,,,,
GridBuildingSystem,"public Vector3 GetMouseWorldSnappedPosition()
{
    Vector3 mousePosition = Mouse3D.GetMouseWorldPosition();
    grid.GetXZ(mousePosition, out int x, out int z);

    if (placedObjectTypeSO != null)
    {
        Vector3 placedObjectWorldPosition = grid.GetWorldPosition(x, z);
        return placedObjectWorldPosition;
    }
    else
    {
        return mousePosition;
    }
}",0.00,0.00,7.00,0.70,,,,,,,,,,,,,,,,,,,
GridBuildingSystem,"public Vector3 GetMouseWorldSnappedPositionAnchoredToPreviousTargetPosOfGhost(Vector3 targetPos)
{
    grid.GetXZ(targetPos, out int x, out int z);

    if (placedObjectTypeSO != null)
    {
        Vector3 placedObjectWorldPosition = grid.GetWorldPosition(x, z);
        return placedObjectWorldPosition;
    }
    else
    {
        return targetPos;
    }
}",0.00,0.00,5.00,0.30,,,,,,,,,,,,,,,,,,,
GridBuildingSystem,"public Quaternion GetPlacedObjectRotation()
{
    if (placedObjectTypeSO != null)
    {
        return Quaternion.Euler(0, placedObjectTypeSO.GetRotationAngle(dir), 0);
    }
    else
    {
        return Quaternion.identity;
    }
}",0.00,0.00,3.00,0.20,,,,,,,,,,,,,,,,,,,
GridBuildingSystem,"public void RotateBuildingGhost_Right_OnConstruction()
{
    if (placedObjectTypeSO == null) { return; }

    dir = PlacedObjectTypeSO.GetRotateRightDir(dir);
}",0.00,0.00,3.00,2.50,,,,,,,,,,,,,,,,,,,
GridBuildingSystem,"public void RotateBuildingGhost_Left_OnConstruction()
{
    if (placedObjectTypeSO == null) { return; }

    dir = PlacedObjectTypeSO.GetRotateLeftDir(dir);
}",0.00,0.00,3.00,2.50,,,,,,,,,,,,,,,,,,,
GridBuildingSystem,"public Vector3 GetCorrectRotationOffsetForSelected()
{
    if (placedObjectTypeSO == null) { return new Vector3(0, 0, 0); }
    Vector2Int rotationOffset = placedObjectTypeSO.GetRotationOffset(dir);
    return new Vector3(rotationOffset.x, 0, rotationOffset.y) * grid.GetCellSize();
}",0.00,0.00,4.00,1.00,,,,,,,,,,,,,,,,,,,
GridBuildingSystem,"public List<Vector2Int> GetCurrentGhostSOCoordinateList(Vector3 targetPos)
{
    if (placedObjectTypeSO == null) return new List<Vector2Int>();
    var normalizedForRotationMousePosition = targetPos;
    grid.GetXZ(normalizedForRotationMousePosition, out int x, out int z);

    Vector2Int placedObjectOrigin = new Vector2Int(x, z);
    placedObjectOrigin = grid.ValidateGridPosition(placedObjectOrigin);

    List<Vector2Int> gridPositionList = placedObjectTypeSO.GetGridPositionList(placedObjectOrigin, dir);

    return gridPositionList;

    //if (placedObjectTypeSO == null)
    //{
    //    return new List<Vector2Int>()
    //    {
    //        new Vector2Int(5, 5)
    //    };
    //}
    //// to determine the grid subtract rotation offset
    //var normalizedForRotationMousePosition = targetPos - GetCorrectRotationOffsetForSelected();
    //grid.GetXZ(normalizedForRotationMousePosition, out int x, out int z);

    //Vector2Int placedObjectOrigin = new Vector2Int(x, z);
    //placedObjectOrigin = grid.ValidateGridPosition(placedObjectOrigin);

    //var t = placedObjectTypeSO.GetGridPositionList(placedObjectOrigin, dir);
    //var s = """";

    //foreach ( var t2 in t)
    //{
    //    s += t2;
    //}

    //return placedObjectTypeSO.GetGridPositionList(placedObjectOrigin, dir);
}",0.00,0.00,9.00,0.80,,,,,,,,,,,,,,,,,,,
GridBuildingSystem,"public Vector2Int GetMousePosTo2DCoordinateOnGrid()
{
    var mousePos = GetMouseWorldSnappedPosition();
    grid.GetXZ(mousePos, out int x, out int z);
    return new Vector2Int(x, z);
}",0.00,0.00,4.00,0.50,,,,,,,,,,,,,,,,,,,
GridBuildingSystem,"public void TryMoveBuilding_LongPress()
{
    Vector3 mousePosition = Mouse3D.GetMouseWorldPosition();

    PlacedObject_Done placedObject2 = grid.GetGridObject(mousePosition).GetPlacedObject();
    if (placedObject2 != null)
    {
        // show ui
        audioManager.Play_buildingClicked();

        var kod = placedObject2.getPlacedObjectTypeSO().kod;
        if (kod == ""DIRTY_TYPE_1"" || kod == ""DIRTY_TYPE_2"" || kod == ""DIRTY_TYPE_3"" || kod == ""DIRTY_TYPE_4"")
        {
            return;
        }
        else
        {
            selectedDetails.SetOnlyPlacedObjec(placedObject2);
            selectedDetails.StartMoveBuilding();
        }
    }
}",0.00,0.00,9.00,2.00,,,,,,,,,,,,,,,,,,,
GridBuildingSystem,"public Transform GetParentForBuilding(PlacedObjectTypeSO so)
{
    if (so.kod == ""ROAD"") { return roadParent; }
    return parent;
}",0.00,0.00,2.00,0.10,,,,,,,,,,,,,,,,,,,
PlacedObject_Done,"public static PlacedObject_Done Create(Vector3 worldPosition, Vector2Int origin, PlacedObjectTypeSO.Dir dir, PlacedObjectTypeSO placedObjectTypeSO, Transform parent, int buildingLevel, Grid<GridBuildingSystem.GridObject> grid, List<Vector2Int> gridPositionList)
{
    // do not add rotation offset to position here to parent prefab
    // rotation offset will be added to child visual
    Transform placedObjectTransform = Instantiate(placedObjectTypeSO.prefab, worldPosition, Quaternion.Euler(0, placedObjectTypeSO.GetRotationAngle(dir), 0), parent);

    PlacedObject_Done placedObject = placedObjectTransform.GetComponent<PlacedObject_Done>();
    placedObject.Setup(worldPosition, placedObjectTypeSO, origin, dir, parent, buildingLevel, grid, gridPositionList);

    return placedObject;
}",0.00,0.00,5.00,3.00,,,,,,,,,,,,,,,,,,,
PlacedObject_Done,"public static PlacedObject_Done FarmlandCreate(Vector3 worldPosition, Vector2Int origin, PlacedObjectTypeSO.Dir dir, PlacedObjectTypeSO placedObjectTypeSO, Transform parent, int buildingLevel, Grid<FarmlandGridBuildingSystem.GridObject> grid, List<Vector2Int> gridPositionList)
{
    // do not add rotation offset to position here to parent prefab
    // rotation offset will be added to child visual
    Transform placedObjectTransform = Instantiate(placedObjectTypeSO.prefab, worldPosition, Quaternion.Euler(0, placedObjectTypeSO.GetRotationAngle(dir), 0), parent);

    PlacedObject_Done placedObject = placedObjectTransform.GetComponent<PlacedObject_Done>();
    placedObject.FarmlandSetup(worldPosition, placedObjectTypeSO, origin, dir, parent, buildingLevel, grid, gridPositionList);

    // if farmland make already connected to road network
    // MAKE SURE ANY BUILDING THAT IS BUILD ON FARMLAND SHOULD HAVE AN EXCLUSION IN RecalculateBuildingRoadConnectionOnChange AT BUILDING MANAGER
    placedObject.plcdBuildingStateInformation.buildingRoadState = BuildingRoadState.Connected;

    return placedObject;
}",0.00,0.00,5.00,3.00,,,,,,,,,,,,,,,,,,,
PlacedObject_Done,"public void DestroySelf()
{
    Destroy(gameObject);
}",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
PlacedObject_Done,"public override string ToString()
{
    return placedObjectTypeSO.nameString;
}",0.00,0.00,1.00,0.02,,,,,,,,,,,,,,,,,,,
PlacedObject_Done,"public void SetNewOrigin(Vector2Int origin)
{
    this.origin = origin;
}",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
PlacedObject_Done,"public void SetNewWorldPosition(Vector3 worldPos)
{
    transform.position = worldPos;
    worldPosition = worldPos;
}",0.00,0.00,2.00,0.03,,,,,,,,,,,,,,,,,,,
PlacedObject_Done,"public void SetNewRotation(PlacedObjectTypeSO.Dir dir_new)
{
    // set self dir
    dir = dir_new;
    // set self rotation 
    var newRot_quaternion = Quaternion.Euler(0, placedObjectTypeSO.GetRotationAngle(dir_new), 0);
    transform.rotation = newRot_quaternion;

    // set child (visual itself) rotation offset
    var rot_offset_identity = placedObjectTypeSO.GetRotationOffset(dir_new) * 5;
    Vector3 correctRotationOffset = new(rot_offset_identity.x, 0, rot_offset_identity.y);
    //Debug.Log(""correctRotationOffset: "" + correctRotationOffset);

    // get parent location
    buildingVisual.position = transform.position + correctRotationOffset;
}",0.00,0.00,9.00,2.50,,,,,,,,,,,,,,,,,,,
PlacedObject_Done,"public void increaseLevel()
{
    this.plcdBuildingInformation.buildingLevel++;
}",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
PlacedObject_Done,"public void startConstructionOrUpgrade()
{
    var root = BuildingInfo.Instance.QByKod(placedObjectTypeSO.kod);

    var T = root.OnInit.T;
    var upgradeTotalTime = BuildingInfo.ApplyFunction(new BuildingInfo.GameVariableFunctionModel(T.InitialValue, T.Coefficients), plcdBuildingInformation.buildingLevel);

    // implement ALL upgrade time reduction logic
    // ^ technology speedups some buildings upgrade times
    var percentTimeReductionFromResearchAndTechs = BuildingsManager.Instance.GetBuildingTimeReductionForUpgrade(placedObjectTypeSO);

    var timeReductionAmount = Marketplace.Instance.GetAllActivePremiumPckgAndModularConstructionBoost();

    var totalUpgradeReduction = percentTimeReductionFromResearchAndTechs + timeReductionAmount;
    if (totalUpgradeReduction > 0)
    {
        upgradeTotalTime -= (upgradeTotalTime * totalUpgradeReduction) / 100;
    }

    // since all checks are done start construction
    plcdBuildingInformation.isUnderConstruction = true;
    plcdBuildingInformation.upgradeStartedDateTime = CustomTimeManager.Instance.GetRealUtcTime();
    plcdBuildingInformation.totalPassedIterationForUpgradeInSeconds = 0;
    plcdBuildingInformation.upgradeTotalTimeInSeconds = upgradeTotalTime;

    // callback to visual manager that is attached to this building to change visual
    BuildingVisualManager.ConstructionStartChangeCallback();
}",0.00,0.00,17.00,8.00,,,,,,,,,,,,,,,,,,,
PlacedObject_Done,"public void FinishConstructionOrUpgrade()
{
    plcdBuildingInformation.isUnderConstruction = false;
    plcdBuildingInformation.buildingLevel++;
    plcdBuildingInformation.totalPassedIterationForUpgradeInSeconds = 0;

    BuildingVisualManager.ConstructionEndChangeCallback();
}",0.00,0.00,4.00,1.00,,,,,,,,,,,,,,,,,,,
PlacedObject_Done,"public void CollectSelfUi_Main()
{
    var amount = plcdInternalStorage.factorySelfStorage;
    RawResource.Instance.increaseYp_BypassCapacity(amount);
    plcdInternalStorage.factorySelfStorage = 0;
    //SetIsSelfCollectUiButtonInstantiated(false);
}",0.00,0.00,3.00,0.20,,,,,,,,,,,,,,,,,,,
PlacedObject_Done,"private void DestroyChildVisual()
{
    Destroy(buildingVisual);
}",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
PlacedObject_Done,"public void setBuildingVisual(Transform buildingVisualNew)
{
    if (buildingVisual != null && buildingVisual.gameObject != null)
    {
        Destroy(buildingVisual.gameObject);
    }
    buildingVisual = buildingVisualNew;
}",0.00,0.00,3.00,0.30,,,,,,,,,,,,,,,,,,,
PlacedObject_Done,"public void SetExlamationMark3DTransform(Transform transform)
{
    exlamationMark3DTransform = transform;
    plcdBuildingStateShowGame3DModelInfo.isPrefabInstantiated = true;

    //exlamationMark3DTransform.localScale = new Vector3(placedObjectTypeSO.width, 5.5f, placedObjectTypeSO.height);
}",0.00,0.00,2.00,0.20,,,,,,,,,,,,,,,,,,,
PlacedObject_Done,"public void SetfireExtinguishTransform(Transform transform)
{
    fireExtinguishTransform = transform;
    plcdBuildingStateShowGame3DModelInfo.isfireExtinguishPrefabInstantiated = true;

    //exlamationMark3DTransform.localScale = new Vector3(placedObjectTypeSO.width, 5.5f, placedObjectTypeSO.height);
}",0.00,0.00,2.00,1.00,,,,,,,,,,,,,,,,,,,
PlacedObject_Done,"public void DestroyExlamationMark3DTransform()
{
    Destroy(exlamationMark3DTransform.gameObject);
    plcdBuildingStateShowGame3DModelInfo.isPrefabInstantiated = false;
}",0.00,0.00,2.00,0.50,,,,,,,,,,,,,,,,,,,
PlacedObject_Done,"public void RecalculateRoadPrefabOnRoadChange()
{
    try
    {
        var roadVisualManager = GetComponentInChildren<RoadVisualManager>();
        if (roadVisualManager == null) { return; }

        roadVisualManager.SelfRecalculatePrefabOnChange();
    }
    catch { }

}",0.00,0.00,4.00,1.50,,,,,,,,,,,,,,,,,,,
PlacedObject_Done,"public int GetSelfPlcdTypeSOIndex()
{
    var kod = placedObjectTypeSO.kod;
    if (plcdBuildingInformation.screenData == ScreenManager.ScreenData.City)
    {
        // this building in the city
        var list = GridBuildingSystem.Instance.GetPlcdSOList();

        for (int i = 0; i < list.Count; i++)
        {
            if (list[i].kod == kod) { return i; }
        }

    }
    else if (plcdBuildingInformation.screenData == ScreenManager.ScreenData.Farmland)
    {
        var list = FarmlandGridBuildingSystem.Instance.GetPlcdSOList();
        for (int i = 0; i < list.Count; i++)
        {
            if (list[i].kod == kod) { return i; }
        }
    }
    return -1;
}",0.00,0.00,8.00,1.00,,,,,,,,,,,,,,,,,,,
PlacedObjectTypeSO,"public static Dir GetNextDir(Dir dir)
{
    switch (dir)
    {
        default:
        case Dir.Down: return Dir.Left;
        case Dir.Left: return Dir.Up;
        case Dir.Up: return Dir.Right;
        case Dir.Right: return Dir.Down;
    }
}",0.00,0.00,2.00,0.50,,,,,,,,,,,,,,,,,,,
PlacedObjectTypeSO,"public static Dir GetRotateRightDir(Dir dir)
{
    switch (dir)
    {
        default:
        case Dir.Down: return Dir.Left;
        case Dir.Left: return Dir.Up;
        case Dir.Up: return Dir.Right;
        case Dir.Right: return Dir.Down;
    }
}",0.00,0.00,2.00,0.50,,,,,,,,,,,,,,,,,,,
PlacedObjectTypeSO,"public static Dir GetRotateLeftDir(Dir dir)
{
    switch (dir)
    {
        default:
        case Dir.Down: return Dir.Right;
        case Dir.Left: return Dir.Down;
        case Dir.Up: return Dir.Left;
        case Dir.Right: return Dir.Up;
    }
}",0.00,0.00,2.00,0.50,,,,,,,,,,,,,,,,,,,
PlacedObjectTypeSO,"public int GetRotationAngle(Dir dir)
{
    switch (dir)
    {
        default:
        case Dir.Down: return 0;
        case Dir.Left: return 90;
        case Dir.Up: return 180;
        case Dir.Right: return 270;
    }
}",0.00,0.00,2.00,0.50,,,,,,,,,,,,,,,,,,,
PlacedObjectTypeSO,"public Vector2Int GetRotationOffset(Dir dir)
{
    switch (dir)
    {
        default:
        case Dir.Down: return new Vector2Int(0, 0);
        case Dir.Left: return new Vector2Int(0, width);
        case Dir.Up: return new Vector2Int(width, height);
        case Dir.Right: return new Vector2Int(height, 0);
    }
}",0.00,0.00,2.00,0.50,,,,,,,,,,,,,,,,,,,
PlacedObjectTypeSO,"public List<Vector2Int> GetGridPositionList(Vector2Int offset, Dir dir)
{
    List<Vector2Int> gridPositionList = new List<Vector2Int>();
    switch (dir)
    {
        default:
        case Dir.Down:
        case Dir.Up:
            for (int x = 0; x < width; x++)
            {
                for (int y = 0; y < height; y++)
                {
                    gridPositionList.Add(offset + new Vector2Int(x, y));
                }
            }
            break;
        case Dir.Left:
        case Dir.Right:
            for (int x = 0; x < height; x++)
            {
                for (int y = 0; y < width; y++)
                {
                    gridPositionList.Add(offset + new Vector2Int(x, y));
                }
            }
            break;
    }
    return gridPositionList;
}",0.00,0.00,11.00,4.00,,,,,,,,,,,,,,,,,,,
NotificationDEBUGhelper,"public void ClearActiveNotificationTextFromDisk()
{
    System.IO.File.WriteAllText(Application.persistentDataPath + ""/notifications.txt"", """", encoding: Encoding.UTF8);
}",0.00,0.00,2.00,0.20,,,,,,,,,,,,,,,,,,,
NotificationDEBUGhelper,"public void WriteAppendActiveNotificationTextToDisk(string str)
{
    var path = Application.persistentDataPath + ""/notifications.txt"";
    using (StreamWriter sw = File.AppendText(path))
    {
        sw.WriteLine(str);
    }
}",0.00,0.00,3.00,0.10,,,,,,,,,,,,,,,,,,,
NotificationManagerAndroid,"void Start()
{
    if (!Permission.HasUserAuthorizedPermission(""android.permission.POST_NOTIFICATIONS""))
    {
        Permission.RequestUserPermission(""android.permission.POST_NOTIFICATIONS"");
    }

    AndroidNotificationChannel notificationChannel = new AndroidNotificationChannel()
    {
        Id = CHANNELID,
        Name = ""Default"",
        Importance = Importance.High,
        Description = ""Action Needed"",
    };

    AndroidNotificationCenter.RegisterNotificationChannel(notificationChannel);
}",0.00,0.00,5.00,1.00,,,,,,,,,,,,,,,,,,,
NotificationManagerAndroid,"public bool ScheduleAndroidNotification(string title, string text, string smallIcon, string largeIcon, DateTime fireTime, bool isTimeStampVisible = true, bool ShouldAutoCancel = true)
{
    AndroidNotification notification = new AndroidNotification()
    {
        Title = title,
        Text = text,
        SmallIcon = smallIcon,
        LargeIcon = largeIcon,
        ShowTimestamp = isTimeStampVisible,
        ShouldAutoCancel = ShouldAutoCancel,
        FireTime = fireTime
    };
    notification.ShowInForeground = false;

    var success = AndroidNotificationCenter.SendNotification(notification, CHANNELID);
    return success != -1 ? true : false;
}",0.00,0.00,4.00,1.50,,,,,,,,,,,,,,,,,,,
NotificationManagerGeneralized,"private void Awake()
{
    if (Instance == null)
    {
        Instance = this;
    }
    else if (Instance != this)
    {
        Destroy(gameObject);
    }
}",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
NotificationManagerGeneralized,"    private void Start()
    {
        //Instance.ScheduleLocalNotification(""onStart"", ""Notifications Working!"", ""Notifications Working!"", null, null, 10);
        playerGameSettings = PlayerGameSettings.Instance;

#if UNITY_ANDROID
        RequestPostNotificationPermission();
#endif
    }",0.00,0.00,3.00,0.10,,,,,,,,,,,,,,,,,,,
NotificationManagerGeneralized,"    public void CancelAllScheduledNotificationGeneralized()
    {
#if UNITY_ANDROID
        AndroidNotificationCenter.CancelAllScheduledNotifications();
#endif
#if UNITY_IOS
        iOSNotificationCenter.RemoveAllScheduledNotifications();
#endif
        notificationGroup.ResetAllVariables();

        notHelper.ClearActiveNotificationTextFromDisk();
    }",0.00,0.00,6.00,0.50,,,,,,,,,,,,,,,,,,,
NotificationManagerGeneralized,"private bool IsUserGrantNotificationAcces()
{
    if (Permission.HasUserAuthorizedPermission(""android.permission.POST_NOTIFICATIONS""))
    {
        return true;
    }
    else
    {
        return false;
    }
}",0.00,0.00,2.00,0.10,,,,,,,,,,,,,,,,,,,
NotificationManagerGeneralized,"private void RequestPostNotificationPermission()
{
    if (!IsUserGrantNotificationAcces())
    {
        Permission.RequestUserPermission(""android.permission.POST_NOTIFICATIONS"");
    }
}",0.00,0.00,3.00,0.10,,,,,,,,,,,,,,,,,,,
NotificationManagerIOS,"public void ScheduleIosNotification(string title, string body, string subtitle, string smallIcon, string largeIcon, int seconds, bool isTimeStampVisible = true, bool ShouldAutoCancel = true)
{
    if (seconds < 1.0f) 
    {
        return;
    }
    var timeTrigger = new iOSNotificationTimeIntervalTrigger()
    {
        TimeInterval = new TimeSpan(0, 0, seconds),
        Repeats = false
    };

    var notification = new iOSNotification()
    {
        // You can specify a custom identifier which can be used to manage the notification later.
        // If you don't provide one, a unique string will be generated automatically.
        Title = title,
        Body = body,
        Subtitle = subtitle,
        ShowInForeground = false,
        ForegroundPresentationOption = (PresentationOption.Alert | PresentationOption.Sound),
        CategoryIdentifier = ""default_category"",
        ThreadIdentifier = ""default_thread"",
        Trigger = timeTrigger,
    };

    iOSNotificationCenter.ScheduleNotification(notification);
}",0.00,0.00,8.00,1.00,,,,,,,,,,,,,,,,,,,
AssistantCheckHelperManager,"private void Awake()
{
    if (Instance == null)
    {
        Instance = this;
    }
    else if (Instance != this)
    {
        Destroy(gameObject);
    }
}",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
AssistantCheckHelperManager,"private void Start()
{
    guidedTutorialManager = GuidedTutorialManager.Instance;
    environmentManager = EnvironmentManager.Instance;
    rawResource = RawResource.Instance;
    seedResource = SeedResource.Instance;
    marketplace = Marketplace.Instance;
    buildingsManager = BuildingsManager.Instance;
    technologyManager = TechnologyManager.Instance;
    populationManager = Population.Instance;
    utilitiesManager = Utilities.Instance;

    LoadAssistantSettings();

    StartAllCheckCoroutines();
}",0.00,0.00,11.00,0.10,,,,,,,,,,,,,,,,,,,
AssistantCheckHelperManager,"private void StartAllCheckCoroutines()
{
    StartCoroutine(CheckWaterWaste());
    StartCoroutine(CheckElectric());
    StartCoroutine(CheckWater());
    StartCoroutine(CheckSeedAndFood());
    StartCoroutine(CheckBp());
    StartCoroutine(CheckInventory());
    StartCoroutine(CheckFarmlandPlantAndHarvest());
    StartCoroutine(CheckTechIdle());
    StartCoroutine(CheckFireAndPolice());
    StartCoroutine(CheckPopulation());
}",0.00,0.00,20.00,0.10,,,,,,,,,,,,,,,,,,,
AssistantCheckHelperManager,"private IEnumerator CheckInventory()
{
    var msg = ""Hey Leader, there are some items that you can use in your inventory, dont forget to use them!"";
    // initial delay
    yield return new WaitForSeconds(18.0f);

    var inventory = marketplace.premiumItemsHolder;

    while (true)
    {
        // wait if there are a message in the queue
        while (!guidedTutorialManager.IsAssistanMessageQueueEmpty())
        {
            yield return new WaitForSeconds(1.16f);
        }

        yield return new WaitForSeconds(4.66f * 60.0f);

        if (inventory.food > 1 || inventory.normalSeed > 1)
        {
            if (settings[""Inventory""] == 0)
            {
                AssistantMessage msgS = new AssistantMessage(AssistantMessageImportance.Suggestion, msg);
                guidedTutorialManager.AddMessageToTheQueue(msgS);
            }
        }
    }
}",0.00,0.00,12.00,1.00,,,,,,,,,,,,,,,,,,,
AssistantCheckHelperManager,"public void SaveAssistantSettings()
{
    var jsonStr = JsonConvert.SerializeObject(settings);
    System.IO.File.WriteAllText(Application.persistentDataPath + ""/assistantSettings.json"", jsonStr, encoding: Encoding.UTF8);
}",0.00,0.00,4.00,0.50,,,,,,,,,,,,,,,,,,,
AssistantCheckHelperManager,"public void LoadAssistantSettings()
{
    if (!System.IO.File.Exists(Application.persistentDataPath + ""/assistantSettings.json""))
    {
        settings = new Dictionary<string, int>
    {
        { ""WaterWaste"", 0 },
        { ""Electric"", 0 },
        { ""Water"", 0 },
        { ""SeedAndFood"", 0 },
        { ""Bp"", 0 },
        { ""Inventory"", 0 },
        { ""FarmlandPlantAndHarvest"", 0 },
        { ""TechIdle"", 0 },
        { ""FireAndPolice"", 0 },
        { ""Population"", 0 }
    };
        return;
    }

    var text = System.IO.File.ReadAllText(Application.persistentDataPath + ""/assistantSettings.json"", encoding: Encoding.UTF8);
    settings = JsonConvert.DeserializeObject<Dictionary<string, int>>(text);
}",0.00,0.00,9.00,0.40,,,,,,,,,,,,,,,,,,,
AssistantCheckHelperManager,"public void Change_WaterWaste_Setting(int value)
{
    // make changes
    settings[""WaterWaste""] = value;
    // change btn type
    switch (value)
    {
        case 0:
            assistantBtnHolderTransform_CheckWaterWaste.sprite = settings_ALL;
            break;
        case 1:
            assistantBtnHolderTransform_CheckWaterWaste.sprite = settings_FEW;
            break;
        case 2:
            assistantBtnHolderTransform_CheckWaterWaste.sprite = settings_OFF;
            break;
    }
    // save
    SaveAssistantSettings();
}",0.00,0.00,5.00,0.20,,,,,,,,,,,,,,,,,,,
AssistantCheckHelperManager,"public void Change_Electric_Setting(int value)
{
    // make changes
    settings[""Electric""] = value;
    // change btn type
    switch (value)
    {
        case 0:
            assistantBtnHolderTransform_CheckElectric.sprite = settings_ALL;
            break;
        case 1:
            assistantBtnHolderTransform_CheckElectric.sprite = settings_FEW;
            break;
        case 2:
            assistantBtnHolderTransform_CheckElectric.sprite = settings_OFF;
            break;
    }
    // save
    SaveAssistantSettings();
}",0.00,0.00,5.00,0.20,,,,,,,,,,,,,,,,,,,
AssistantCheckHelperManager,"public void Change_Water_Setting(int value)
{
    // make changes
    settings[""Water""] = value;
    // change btn type
    switch (value)
    {
        case 0:
            assistantBtnHolderTransform_CheckWater.sprite = settings_ALL;
            break;
        case 1:
            assistantBtnHolderTransform_CheckWater.sprite = settings_FEW;
            break;
        case 2:
            assistantBtnHolderTransform_CheckWater.sprite = settings_OFF;
            break;
    }
    // save
    SaveAssistantSettings();
}",0.00,0.00,5.00,0.20,,,,,,,,,,,,,,,,,,,
AssistantCheckHelperManager,"public void Change_SeedAndFood_Setting(int value)
{
    // make changes
    settings[""SeedAndFood""] = value;
    // change btn type
    switch (value)
    {
        case 0:
            assistantBtnHolderTransform_CheckSeedAndFood.sprite = settings_ALL;
            break;
        case 1:
            assistantBtnHolderTransform_CheckSeedAndFood.sprite = settings_FEW;
            break;
        case 2:
            assistantBtnHolderTransform_CheckSeedAndFood.sprite = settings_OFF;
            break;
    }
    // save
    SaveAssistantSettings();
}",0.00,0.00,5.00,0.20,,,,,,,,,,,,,,,,,,,
AssistantCheckHelperManager,"public void Change_Bp_Setting(int value)
{
    // make changes
    settings[""Bp""] = value;
    // change btn type
    switch (value)
    {
        case 0:
            assistantBtnHolderTransform_CheckBp.sprite = settings_ALL;
            break;
        case 1:
            assistantBtnHolderTransform_CheckBp.sprite = settings_FEW;
            break;
        case 2:
            assistantBtnHolderTransform_CheckBp.sprite = settings_OFF;
            break;
    }
    // save
    SaveAssistantSettings();
}",0.00,0.00,5.00,0.20,,,,,,,,,,,,,,,,,,,
AssistantCheckHelperManager,"public void Change_Inventory_Setting(int value)
{
    // make changes
    settings[""Inventory""] = value;
    // change btn type
    switch (value)
    {
        case 0:
            assistantBtnHolderTransform_CheckInventory.sprite = settings_ALL;
            break;
        case 1:
            assistantBtnHolderTransform_CheckInventory.sprite = settings_FEW;
            break;
        case 2:
            assistantBtnHolderTransform_CheckInventory.sprite = settings_OFF;
            break;
    }
    // save
    SaveAssistantSettings();
}",0.00,0.00,5.00,0.20,,,,,,,,,,,,,,,,,,,
AssistantCheckHelperManager,"public void Change_FarmlandPlantAndHarvest_Setting(int value)
{
    // make changes
    settings[""FarmlandPlantAndHarvest""] = value;
    // change btn type
    switch (value)
    {
        case 0:
            assistantBtnHolderTransform_CheckFarmlandPlantAndHarvest.sprite = settings_ALL;
            break;
        case 1:
            assistantBtnHolderTransform_CheckFarmlandPlantAndHarvest.sprite = settings_FEW;
            break;
        case 2:
            assistantBtnHolderTransform_CheckFarmlandPlantAndHarvest.sprite = settings_OFF;
            break;
    }
    // save
    SaveAssistantSettings();
}",0.00,0.00,5.00,0.20,,,,,,,,,,,,,,,,,,,
AssistantCheckHelperManager,"public void Change_TechIdle_Setting(int value)
{
    // make changes
    settings[""TechIdle""] = value;
    // change btn type
    switch (value)
    {
        case 0:
            assistantBtnHolderTransform_CheckTechIdle.sprite = settings_ALL;
            break;
        case 1:
            assistantBtnHolderTransform_CheckTechIdle.sprite = settings_FEW;
            break;
        case 2:
            assistantBtnHolderTransform_CheckTechIdle.sprite = settings_OFF;
            break;
    }
    // save
    SaveAssistantSettings();
}",0.00,0.00,5.00,0.20,,,,,,,,,,,,,,,,,,,
AssistantCheckHelperManager,"public void Change_FireAndPolice_Setting(int value)
{
    // make changes
    settings[""FireAndPolice""] = value;
    // change btn type
    switch (value)
    {
        case 0:
            assistantBtnHolderTransform_CheckFireAndPolice.sprite = settings_ALL;
            break;
        case 1:
            assistantBtnHolderTransform_CheckFireAndPolice.sprite = settings_FEW;
            break;
        case 2:
            assistantBtnHolderTransform_CheckFireAndPolice.sprite = settings_OFF;
            break;
    }
    // save
    SaveAssistantSettings();
}",0.00,0.00,5.00,0.20,,,,,,,,,,,,,,,,,,,
AssistantCheckHelperManager,"public void Change_Population_Setting(int value)
{
    // make changes
    settings[""Population""] = value;
    // change btn type
    switch (value)
    {
        case 0:
            assistantBtnHolderTransform_CheckPopulation.sprite = settings_ALL;
            break;
        case 1:
            assistantBtnHolderTransform_CheckPopulation.sprite = settings_FEW;
            break;
        case 2:
            assistantBtnHolderTransform_CheckPopulation.sprite = settings_OFF;
            break;
    }
    // save
    SaveAssistantSettings();
}",0.00,0.00,5.00,0.20,,,,,,,,,,,,,,,,,,,
AssistantLogManager,"private void Start()
{
    guidedTutorialManager = GuidedTutorialManager.Instance;

    assistantMessagesLogList = new List<DisplayAssistantMessage>();
    instantiated_assistantLogs = new List<Transform>();
}",0.00,0.00,3.00,0.01,,,,,,,,,,,,,,,,,,,
AssistantLogManager,"public void OnAssistantMesageDisplayToTheUser_AddToLogs(AssistantMessage msg)
{
    DisplayAssistantMessage newLog = new()
    {
        assistantMessageSlf = msg,
        msgShowDateTime = DateTime.Now,
    };
    assistantMessagesLogList.Add(newLog);

    // update log view if holder open on msg add
    if (isLogOpen)
    {
        RefreshLogView();
    }
}",0.00,0.00,7.00,0.60,,,,,,,,,,,,,,,,,,,
AssistantLogManager,"private void Only_OpenAssistantLog()
{
    isLogOpen = true;
    assistantLogHolder.gameObject.SetActive(true);
}",0.00,0.00,3.00,0.10,,,,,,,,,,,,,,,,,,,
AssistantLogManager,"public void CloseAssistantLog()
{
    isLogOpen = false;
    assistantLogHolder.gameObject.SetActive(false);
}",0.00,0.00,3.00,0.10,,,,,,,,,,,,,,,,,,,
BuildingVisualManager,"private void Awake()
{
    placedObject_Done = GetComponent<PlacedObject_Done>();
    buildingsManager = BuildingsManager.Instance;
    visual = placedObject_Done.buildingVisual;

}",0.00,0.00,4.00,0.03,,,,,,,,,,,,,,,,,,,
BuildingVisualManager,"public void ConstructionStartChangeCallback()
{
    //placedObject_Done.setBuildingVisual(Instantiate(transform_to_ins, placedObjectWorldPosition, Quaternion.Euler(0, tempPlacedObjectTypeSo.GetRotationAngle(tempPlacedObjectDir), 0), placedObject_Done.transform));

    localIsUnderConstruction = true;

    // get on building upgrade prefabs to init
    StartCoroutine(ShowChildWithFindOnUpgradeScript());
}",0.00,0.00,3.00,0.50,,,,,,,,,,,,,,,,,,,
BuildingVisualManager,"private IEnumerator ShowChildWithFindOnUpgradeScript()
{
    yield return new WaitForSeconds(0.2f);
    // get on building upgrade prefabs to init
    var upgradePrefabs = gameObject.GetComponentsInChildren<FindOnUpgrade>(includeInactive: true);

    if (upgradePrefabs != null && upgradePrefabs.Count() > 0)
    {
        foreach (var upgradePrefab in upgradePrefabs)
        {
            upgradePrefab.OnBuildingUpgradeStartShowSelf();
        }
    }
    yield return null;
}",0.00,0.00,8.00,0.40,,,,,,,,,,,,,,,,,,,
BuildingVisualManager,"private IEnumerator HideChildWithFindOnUpgradeScript()
{
    yield return new WaitForSeconds(0.2f);
    // get on building upgrade prefabs to init
    var upgradePrefabs = gameObject.GetComponentsInChildren<FindOnUpgrade>();

    if (upgradePrefabs != null && upgradePrefabs.Count() > 0)
    {
        foreach (var upgradePrefab in upgradePrefabs)
        {
            upgradePrefab.OnBuildingUpgradeEndHideSelf();
        }
    }
    yield return null;
}",0.00,0.00,8.00,0.40,,,,,,,,,,,,,,,,,,,
CameraTarget,"private void Start()
{
    gridBuildingSystem = GridBuildingSystem.Instance;
    farmlandGridBuildingSystem = FarmlandGridBuildingSystem.Instance;
    playerGameSettings = PlayerGameSettings.Instance;
    screenManager = ScreenManager.Instance;
    criminalEventsManager = CriminalEventsManager.Instance;
}",0.00,0.00,5.00,0.01,,,,,,,,,,,,,,,,,,,
CameraTarget,"private Vector3 GetWorldPosition(float z)
{
    Ray mousePos = cam.ScreenPointToRay(Input.mousePosition);
    Plane ground = new Plane(Vector3.down, new Vector3(0, 0, z));
    float distance;
    ground.Raycast(mousePos, out distance);
    return mousePos.GetPoint(distance);
}",0.00,0.00,6.00,1.50,,,,,,,,,,,,,,,,,,,
CameraTarget,"private Vector3 GetWorldPosition(Vector2 mousePos_t, float z)
{
    Ray mousePos = cam.ScreenPointToRay(mousePos_t);
    Plane ground = new Plane(Vector3.down, new Vector3(0, 0, z));
    float distance;
    ground.Raycast(mousePos, out distance);
    return mousePos.GetPoint(distance);
}",0.00,0.00,6.00,1.50,,,,,,,,,,,,,,,,,,,
CameraTarget,"void Zoom(float deltaMagnitudeDiff, float speed)
{
    // forward vector reversed
    var forwardDirectionReversed = -deltaMagnitudeDiff * speed;

    var tempVector = cam.transform.position;
    var correctAmountForCamAdd = tempVector + cam.transform.forward * forwardDirectionReversed;
    if (correctAmountForCamAdd.y < minCameraHeight) { return; }
    if (correctAmountForCamAdd.y > maxCameraHeight) { return; }

    // apply zoom in/out
    cam.transform.position += cam.transform.forward * forwardDirectionReversed;
    //cam.fieldOfView += deltaMagnitudeDiff * speed;
    // set min and max value of Clamp function upon your requirement
    //cam.fieldOfView = Mathf.Clamp(cam.fieldOfView, ZoomMinBound, ZoomMaxBound);

    // if go beyond boundaries 
    // fix position
    RePositionCameraWithRespectingBoundaries();
}",0.00,0.00,7.00,4.00,,,,,,,,,,,,,,,,,,,
CameraTarget,"void RotateCamX(float deltaMagnitude, float speed)
{
    var currRot = cam.transform.eulerAngles;
    var clamped = Mathf.Clamp(currRot.x + deltaMagnitude * speed, rotateXMinBound, rotateXMaxBound);
    cam.transform.eulerAngles = new Vector3(clamped, currRot.y, currRot.z);
}",0.00,0.00,4.00,2.00,,,,,,,,,,,,,,,,,,,
CameraTarget,"public void MoveCameraWithRespectingBoundaries(Vector3 direction)
{
    var checkCamPos = cam.transform.position + direction;

    if (screenManager.screen == ScreenManager.ScreenData.City)
    {
        // city bounds
        if (checkCamPos.x > upper_x || checkCamPos.z > upper_z || checkCamPos.x < lower_x || checkCamPos.z < lower_z)
        {
            return;
        }
    }
    else
    {
        // farm bounds
        if (checkCamPos.x > farmland_upper_x || checkCamPos.z > farmland_upper_z || checkCamPos.x < farmland_lower_x || checkCamPos.z < farmland_lower_z)
        {
            return;
        }
    }

    cam.transform.position = checkCamPos;
}",0.00,0.00,5.00,1.50,,,,,,,,,,,,,,,,,,,
CameraTarget,"private void RePositionCameraWithRespectingBoundaries()
{
    var camTemp = new Vector3(cam.transform.position.x, cam.transform.position.y, cam.transform.position.z);

    if (screenManager.screen == ScreenManager.ScreenData.City)
    {
        if (cam.transform.position.x > upper_x) { camTemp.x = upper_x; }
        if (cam.transform.position.x < lower_x) { camTemp.x = upper_x; }
        if (cam.transform.position.z > upper_z) { camTemp.z = upper_z; }
        if (cam.transform.position.z < lower_z) { camTemp.z = lower_z; }
    }
    else if (screenManager.screen == ScreenManager.ScreenData.Farmland)
    {
        if (cam.transform.position.x > farmland_upper_x) { camTemp.x = farmland_upper_x; }
        if (cam.transform.position.x < farmland_lower_x) { camTemp.x = farmland_lower_x; }
        if (cam.transform.position.z > farmland_upper_z) { camTemp.z = farmland_upper_z; }
        if (cam.transform.position.z < farmland_lower_z) { camTemp.z = farmland_lower_z; }
    }
    cam.transform.position = camTemp;

}",0.00,0.00,19.00,3.00,,,,,,,,,,,,,,,,,,,
ContinuosRoadDeletionManager,"private void Awake()
{
    if (Instance == null)
    {
        Instance = this;
    }
    else if (Instance != this)
    {
        Destroy(gameObject);
    }
}",0.00,0.00,4.00,0.01,,,,,,,,,,,,,,,,,,,
ContinuosRoadDeletionManager,"void Start()
{
    gridBuildingSystem = GridBuildingSystem.Instance;
    buildingsManager = BuildingsManager.Instance;
    grid = gridBuildingSystem.GetGrid();
}",0.00,0.00,3.00,0.01,,,,,,,,,,,,,,,,,,,
ContinuosRoadDeletionManager,"public void ActivateContinuousRoadDeletion()
{
    _isSelfActive = true;
    gameObject.SetActive(true);

    continuosRoadDeletionCanvasTransform.gameObject.SetActive(true);

    bottomSellectBuilding.CloseBuildingBar();
}",0.00,0.00,7.00,0.70,,,,,,,,,,,,,,,,,,,
ContinuosRoadDeletionManager,"public void DeActivateContinuousRoadDeletion()
{
    _isSelfActive = false;

    continuosRoadDeletionCanvasTransform.gameObject.SetActive(false);

    cameraTarget.SetCanCameraMove(true);

    gameObject.SetActive(false);
}",0.00,0.00,7.00,0.70,,,,,,,,,,,,,,,,,,,
CustomBilboard,"void Start()
{
    _mainCamera = Camera.main;
}",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
CustomBilboard,"void OnEnable()
{
    if (!GetComponent<SpriteRenderer>().isVisible)
    {
        enabled = false;
    }
    else
    {
        enabled = true;
    }
}",0.00,0.00,4.00,0.10,,,,,,,,,,,,,,,,,,,
CustomBilboard,"void LateUpdate()
{
    if (enabled)
    {
        transform.forward = _mainCamera.transform.forward;
    }
}",0.00,0.00,2.00,0.10,,,,,,,,,,,,,,,,,,,
CustomBilboard,"void OnBecameVisible()
{
    enabled = true;
}",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
CustomBilboard,"void OnBecameInvisible()
{
    enabled = false;
}",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
ForceUserToSetNicknameManager,"void Start()
{
    playerAuthManager = PlayerAuthManager.Instance;
    displayError = DisplayError.Instance;
    guidedTutorialManager = GuidedTutorialManager.Instance;

    var _nickname = playerAuthManager.GetUserNickname();

    if (_nickname == null || _nickname == """")
    {
        // user does not have set a username
        // open holder

        nicknameHolder.gameObject.SetActive(true);

        // disable guided tutorial holder
        guided_tutorial_holder.gameObject.SetActive(false);
    }
}",0.00,0.00,9.00,1.00,,,,,,,,,,,,,,,,,,,
ForceUserToSetNicknameManager,"public void OnSetNickanameBtnClickWrapper()
{
    ActivateNicknameWhileResponseWaiting();
    Debug.Log(""SetNewNickname Start"");
    if (nickname_T.text.Length < 3)
    {
        Debug.Log(""SetNewNickname 2"");
        displayError.ShowError(""Nickname must be at least 3 characters long!"");
        DeActivateNicknameWhileResponseWaiting();
        return;
    }
    Debug.Log(""SetNewNickname 3"");
    StartCoroutine(SetNewNickname());
}",2.00,0.00,7.00,2.00,,,,,,,,,,,,,,,,,,,
ForceUserToSetNicknameManager,"public void OnNicknameTextChange()
{
    if (nickname_T.text.Length < 3)
    {
        if (!nickname_req_three_digit_long.gameObject.activeSelf)
        {
            nickname_req_three_digit_long.gameObject.SetActive(true);
        }
    }
    else
    {
        if (nickname_req_three_digit_long.gameObject.activeSelf)
        {
            nickname_req_three_digit_long.gameObject.SetActive(false);
        }
    }
}",2.00,0.00,7.00,0.50,,,,,,,,,,,,,,,,,,,
ForceUserToSetNicknameManager,"private void ActivateNicknameWhileResponseWaiting()
{
    loadingIndicator.gameObject.SetActive(true);
}",0.00,0.00,1.00,0.10,,,,,,,,,,,,,,,,,,,
ForceUserToSetNicknameManager,"private void DeActivateNicknameWhileResponseWaiting()
{
    loadingIndicator.gameObject.SetActive(false);
}",0.00,0.00,1.00,0.10,,,,,,,,,,,,,,,,,,,
GameSimulator,"void Start()
{
    // assign static referances
    utilities = Utilities.Instance;
    rawResource = RawResource.Instance;
    population = Population.Instance;
    technologyManager = TechnologyManager.Instance;
    buildingsManager = BuildingsManager.Instance;
    buildingInfo = BuildingInfo.Instance;
    seedResource = SeedResource.Instance;
    marketplace = Marketplace.Instance;
    groundEnvironmentManager = GroundEnvironmentManager.Instance;
    //fogManager = FogManager.Instance;
    environmentManager = EnvironmentManager.Instance;
    leaderboardManager = LeaderboardManager.Instance;
    gridBuildingSystem = GridBuildingSystem.Instance;

    saveManager = SaveManager.Instance;
    isolatedSimulator = IsolatedSimulator.Instance;
    playerAuthManager = PlayerAuthManager.Instance;
    postProcessGrayManager = PostProcessGrayManager.Instance;
    customTimeManager = CustomTimeManager.Instance;
    criminalEventsManager = CriminalEventsManager.Instance;
    guidedTutorialManager = GuidedTutorialManager.Instance;

    InitializeBuildingsThatCantBurnList();

    // try get already saved data from load manager (if exist)
    // init necessary info
    // start instant simulate

    placedObject_Dones = buildingsManager.GetBuildingsList();
    nextLevelCurrentlyResearching = technologyManager.nextLevelCurrentlyResearching;

    // and lastly start coroutine in game simulate
    //StartCoroutine(InGameSimulate());
}",0.00,0.00,23.00,0.20,,,,,,,,,,,,,,,,,,,
GameSimulator,"private void InitializeBuildingsThatCantBurnList()
{
    buildingsThatCantBurn.Add(""MAIN"");
    buildingsThatCantBurn.Add(""COALPOWERSTATION"");
    buildingsThatCantBurn.Add(""DIRTY_TYPE_1"");
    buildingsThatCantBurn.Add(""DIRTY_TYPE_2"");
    buildingsThatCantBurn.Add(""DIRTY_TYPE_3"");
    buildingsThatCantBurn.Add(""DIRTY_TYPE_4"");
    buildingsThatCantBurn.Add(""ELSTORAGE"");
    buildingsThatCantBurn.Add(""FIRESTATION"");
    buildingsThatCantBurn.Add(""NATURALPOWERSTATION"");
    buildingsThatCantBurn.Add(""ROAD"");
    buildingsThatCantBurn.Add(""SEWAGESYS"");
    buildingsThatCantBurn.Add(""SOLARPANEL"");
    buildingsThatCantBurn.Add(""WATERSTRG"");
    buildingsThatCantBurn.Add(""WATERSYS"");
    buildingsThatCantBurn.Add(""WINDTURBINE"");
}",0.00,0.00,17.00,0.20,,,,,,,,,,,,,,,,,,,
GameSimulator,"public void StartInstantSimulateOnLoadCallback(int tick)
{
    simulateThisSeconds = tick;
    InstantSimulate(INSTANT_SIMULATE_TICK_SECONDS);
    StartInGameCoroutine();
}",0.00,0.00,3.00,0.10,,,,,,,,,,,,,,,,,,,
GameSimulator,"public void StartInstantSimulateOnApplicationForeground(int tick)
{
    Debug.Log(""*** INVOKE StartInstantSimulateOnApplicationForeground ***"");
    simulateThisSeconds = tick;
    InstantSimulate(INSTANT_SIMULATE_FOREGROUND_TICK_SECONDS);
    Debug.Log(""*** END StartInstantSimulateOnApplicationForeground ***"");
}",0.00,0.00,4.00,0.10,,,,,,,,,,,,,,,,,,,
GameSimulator,"private void StartInGameCoroutine()
{
    StartCoroutine(InGameSimulate());
}",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
GameSimulator,"private void InstantSimulate(int tick = TICK_SECONDS)
{
    Debug.Log(""hours: "" + simulateThisSeconds / 3600.0f);
    Debug.Log(""tick: "" + tick);
    if (simulateThisSeconds < tick) { simulateThisSeconds = 0; AfterInstantSimulateEndCallback(); return; }
    while (simulateThisSeconds > tick)
    {
        // simulate here
        UtilitiesCapMainLoop();
        UtilitiesMainLoop(tick);

        ConsumeFoodMainLoop(tick);

        // we dont have fire in simulate
        CheckStartFireMainLoop(tick);

        BuildingUpgradeCheckFinishMainLoop(tick);

        PopulationMainLoop();

        CriminalEventMainLoop(tick);

        TechnologyUpgradeCheckFinishMainLoop(tick);

        RawResourcesProducersMainLoop(tick);

        MarketPlaceMainLoop(tick);

        simulateThisSeconds -= tick;
    }

    AfterInstantSimulateEndCallback();

    simulateThisSeconds = 0;
}",0.00,0.00,17.00,0.50,,,,,,,,,,,,,,,,,,,
GameSimulator,"private IEnumerator InGameSimulate()
{
    if (!isInGameSimulateIsRunning)
    {
        isInGameSimulateIsRunning = true;
        while (true)
        {
            if (simulateThisSeconds == 0)
            {
                // simulate here
                UtilitiesCapMainLoop();
                UtilitiesMainLoop();

                ConsumeFoodMainLoop();

                CheckStartFireMainLoop();

                BuildingUpgradeCheckFinishMainLoop();

                CriminalEventMainLoop();

                PopulationMainLoop();

                TechnologyUpgradeCheckFinishMainLoop();

                RawResourcesProducersMainLoop();

                MarketPlaceMainLoop();

                CheckAllPcldBuildingSelfForBadState();
            }

            yield return new WaitForSeconds(TICK_SECONDS);
        }
    }
}",0.00,0.00,14.00,0.50,,,,,,,,,,,,,,,,,,,
GameSimulator,"private void UtilitiesMainLoop(int tick = TICK_SECONDS)
{
    try
    {
        utilities.UtilsCalculatePUCUWrapper(tick);
        utilities.AllBoostDecreaseRemainingTime(tick);
        return;
    }
    catch (Exception ex)
    {
        Debug.LogException(ex);
        Debug.Log(""EXCEPTION"");
        if (isApiReportingEnabled)
        {
            OnExceptionDto dto = new(lastLocalSave: saveManager.GetLocalLastSave(), whereExceptionThrownScriptName: ""GameSimulator"", whereExceptionThrownFunctionName: ""UtilitiesMainLoop"", exceptionMessage: ex.Message);

            StartCoroutine(playerAuthManager.SaveExceptionToServer(dto));
            StartCoroutine(DisableApiExceptionReporting());
        }
    }
}",0.00,0.00,11.00,1.00,,,,,,,,,,,,,,,,,,,
GameSimulator,"private void DisableGameStartWaitingCanvas()
{
    UIForGameStartUntilEverythingLoadedScreenCanvasTransform.gameObject.SetActive(false);
}",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
GameSimulator,"private IEnumerator DisableApiExceptionReporting()
{
    yield return new WaitForSeconds(5);

    isApiReportingEnabled = false;
}",0.00,0.00,2.00,0.10,,,,,,,,,,,,,,,,,,,
GameSimulator,"public void StartFireInGameAtStartDelayed_public(PlacedObject_Done plcd)
{
    StartCoroutine(StartFireInGameAtStartDelayed(plcd));
}",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
GameSimulator,"private IEnumerator StartFireInGameAtStartDelayed(PlacedObject_Done plcd)
{
    yield return new WaitForSeconds(1.2f);

    // try find children with script findOnFire --> and enable them
    var visual = plcd.buildingVisual;
    if (visual != null)
    {
        var listOfFireTR = visual.gameObject.GetComponentsInChildren<FindOnFire>(includeInactive: true);
        if (listOfFireTR.Length < 1) Debug.Log(""no count fire found""); yield return null;

        foreach (var fireTR in listOfFireTR)
        {
            fireTR.gameObject.SetActive(true);
        }
    }
    else
    {
        Debug.Log(""no fire found"");
    }

}",0.00,0.00,9.00,0.50,,,,,,,,,,,,,,,,,,,
GameSimulator,"public void StartCRTNDestroyFirePrefabsDelayed(PlacedObject_Done plcd)
{
    StartCoroutine(DestroyFirePrefabsDelayed(plcd));
}",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
GameSimulator,"private IEnumerator DestroyFirePrefabsDelayed(PlacedObject_Done plcd)
{
    yield return new WaitForSeconds(3.03f);

    if (plcd.buildingVisual == null) { yield return new WaitForSeconds(3.03f); }

    if (plcd.buildingVisual != null)
    {
        var listOfFireTR = plcd.buildingVisual.gameObject.GetComponentsInChildren<FindOnFire>();
        if (listOfFireTR.Length > 0)
        {
            foreach (var fireTR in listOfFireTR)
            {
                fireTR.gameObject.SetActive(false);
            }
        }
    }
    else
    {
        Debug.Log(""still plcd_transform = null"");
    }
}",0.00,0.00,9.00,1.20,,,,,,,,,,,,,,,,,,,
GameSimulator,"private Vector3 FindRandomRoadHelper()
{
    // find random road
    var allRoads = buildingsManager.GetRoadsList();
    var roadCount = allRoads.Count;
    if (roadCount < 1)
    {
        return Vector3.zero;
    }
    var randInt = UnityEngine.Random.Range(0, roadCount);
    var randRoad = allRoads[randInt];

    // determine pos and add
    return randRoad.getWorldPosition();
}",0.00,0.00,9.00,0.50,,,,,,,,,,,,,,,,,,,
GuidedTutorialManager,"private void Awake()
{
    if (Instance == null)
    {
        Instance = this;
    }
    else if (Instance != this)
    {
        Destroy(gameObject);
    }
}",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
GuidedTutorialManager,"private void Start()
{
    totalTutorialCount = guidedTutorialDetailTexts.Count;
    rawResource = RawResource.Instance;
    saveManager = SaveManager.Instance;
    //InitGuidedTutorialFromLoadWithValues();

    StartCoroutine(CheckQueueAssistantMain());

    LocalizationSettings.SelectedLocaleChanged += OnLangChangedEventFired;
}",0.00,0.00,6.00,0.10,,,,,,,,,,,,,,,,,,,
GuidedTutorialManager,"public void QuitGuidedTutorial()
{
    currentIndex = 0;
    isGuidedTutorialOngoing = false;
    isAllUtilsRelatedBuildingsConstructed = true;
    CloseAssistantOnGuidedTutorial();

    //listOfGuidedTutorialHolderTransforms[totalTutorialCount - 1].gameObject.SetActive(false);

    guidedTutorialCloseBtn.gameObject.SetActive(false);
    tutorialManager.ActivateFirstTimeTutorialPartOnFirstTimeOpening();

    blockBuildingConstruction = false;

    saveManager.SaveStartMainCallback();
}",0.00,0.00,9.00,1.00,,,,,,,,,,,,,,,,,,,
GuidedTutorialManager,"public void OnBuildingOnTheGridClicked(PlacedObject_Done plcd)
{
    if (!isGuidedTutorialOngoing) { return; }
    var code = plcd.getPlacedObjectTypeSO().kod;

    if (code == ""DIRTY_TYPE_1"" || code == ""DIRTY_TYPE_2"" || code == ""DIRTY_TYPE_3"" || code == ""DIRTY_TYPE_4"")
    {
        // and if current index == 0 go next
        if (currentIndex == 0)
        {
            IncrementGuidedTutorialByOne();
        }
    }
}",0.00,0.00,5.00,0.20,,,,,,,,,,,,,,,,,,,
GuidedTutorialManager,"private void OpenAssistantOnGuidedTutorial()
{
    if (!assistantMovingSelfHolder.gameObject.activeSelf) { assistantMovingSelfHolder.gameObject.SetActive(true); }

    assistantDetailsText_T.text = GetCorrectLangugeString_ForGuidedTutorial(guidedTutorialDetailTexts[currentIndex]);
}",0.00,0.00,4.00,0.20,,,,,,,,,,,,,,,,,,,
GuidedTutorialManager,"private void CloseAssistantOnGuidedTutorial()
{
    if (assistantMovingSelfHolder.gameObject.activeSelf) { assistantMovingSelfHolder.gameObject.SetActive(false); }
}",0.00,0.00,2.00,0.10,,,,,,,,,,,,,,,,,,,
GuidedTutorialManager,"public void OnDirtyAreaRemoved()
{
    if (!isGuidedTutorialOngoing) { return; }
    if (currentIndex == 1)
    {
        IncrementGuidedTutorialByOne();
    }
}",0.00,0.00,4.00,0.05,,,,,,,,,,,,,,,,,,,
GuidedTutorialManager,"public void OnBuildingMenuOpened()
{
    if (!isGuidedTutorialOngoing) { return; }
    if (currentIndex == 2)
    {
        IncrementGuidedTutorialByOne();
    }
    if (currentIndex == 12)
    {
        IncrementGuidedTutorialByOne();
    }
}",0.00,0.00,7.00,0.05,,,,,,,,,,,,,,,,,,,
GuidedTutorialManager,"public void OnBaseSectionClicked()
{
    if (!isGuidedTutorialOngoing) { return; }
    if (currentIndex == 3)
    {
        IncrementGuidedTutorialByOne();
    }
}",0.00,0.00,4.00,0.05,,,,,,,,,,,,,,,,,,,
GuidedTutorialManager,"public void OnBuildingDetailsFromBuildingBarOpened(PlacedObjectTypeSO so)
{
    if (!isGuidedTutorialOngoing) { return; }
    var code = so.kod;

    if (code == ""MAIN"")
    {
        if (currentIndex == 4)
        {
            blockBuildingConstruction = false;
            IncrementGuidedTutorialByOne();
        }
    }
}",0.00,0.00,5.00,0.05,,,,,,,,,,,,,,,,,,,
GuidedTutorialManager,"public void OnNewFarmlandBuildingConstructed(PlacedObjectTypeSO so)
{
    if (!isGuidedTutorialOngoing) { return; }
    var code = so.kod;

    if (code == ""FARM"")
    {
        if (currentIndex == 13)
        {
            IncrementGuidedTutorialByOne();
        }
    }
}",0.00,0.00,5.00,0.05,,,,,,,,,,,,,,,,,,,
GuidedTutorialManager,"public void OnScreenChange()
{
    if (!isGuidedTutorialOngoing) { return; }

    if (currentIndex == 11)
    {
        IncrementGuidedTutorialByOne();
    }

    if (currentIndex == 15)
    {
        IncrementGuidedTutorialByOne();
    }
}",0.00,0.00,7.00,0.05,,,,,,,,,,,,,,,,,,,
GuidedTutorialManager,"public void OnFarmSeedPlanted()
{
    if (!isGuidedTutorialOngoing) { return; }

    if (currentIndex == 14)
    {
        IncrementGuidedTutorialByOne();
    }
}",0.00,0.00,4.00,0.05,,,,,,,,,,,,,,,,,,,
GuidedTutorialManager,"private IEnumerator CheckQueueAssistantMain()
{
    while (true)
    {
        yield return new WaitForSeconds(3.14f);

        // if guided tutorial is ongoing continue
        //Debug.Log(""isGuidedTutorialOngoing: "" + isGuidedTutorialOngoing);
        if (isGuidedTutorialOngoing) { yield return new WaitForSeconds(11.21f); continue; }

        // check if already displaying assistant message
        // if true continue
        // else check if there are awaiting message in the queue
        if (isAssistantMessageDisplaying) { yield return new WaitForSeconds(9.21f); continue; }

        // check queue and display message if any awaiting
        if (assistantMessageQueue.Count > 0)
        {
            var msg = assistantMessageQueue.Dequeue();
            DisplayMessageOnAssistant(msg);
            assistantLogManager.OnAssistantMesageDisplayToTheUser_AddToLogs(msg);
        }

    }
}",0.00,0.00,12.00,0.80,,,,,,,,,,,,,,,,,,,
GuidedTutorialManager,"private void DisplayMessageOnAssistant(AssistantMessage msg)
{
    isAssistantMessageDisplaying = true;

    if (msg.importance == AssistantMessageImportance.Suggestion)
    {
        assistantBg.sprite = assistantNormalBg;
    }
    if (msg.importance == AssistantMessageImportance.Critical)
    {
        assistantBg.sprite = assistantCriticalBg;
    }

    if (!assistantMovingSelfHolder.gameObject.activeSelf) { assistantMovingSelfHolder.gameObject.SetActive(true); }
    if (!assistantCloseBtn.gameObject.activeSelf) { assistantCloseBtn.gameObject.SetActive(true); }

    // do not change msg.message

    assistantDetailsText_T.text = GetCorrectLangugeString_ForAllAssistantMessage(msg.message);
}",0.00,0.00,12.00,0.60,,,,,,,,,,,,,,,,,,,
GuidedTutorialManager,"public void CloseAssistantDisplayMessage()
{
    if (assistantMovingSelfHolder.gameObject.activeSelf) { assistantMovingSelfHolder.gameObject.SetActive(false); }
    isAssistantMessageDisplaying = false;
}",0.00,0.00,3.00,0.10,,,,,,,,,,,,,,,,,,,
GuidedTutorialManager,"public void AddMessageToTheQueue(AssistantMessage msg)
{
    assistantMessageQueue.Enqueue(msg);
}",0.00,0.00,2.00,0.01,,,,,,,,,,,,,,,,,,,
GuidedTutorialManager,"public bool IsAssistanMessageQueueEmpty()
{
    return assistantMessageQueue.Count == 0;
}",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
GuidedTutorialManager,"private void OnLangChangedEventFired(Locale local)
{
    if (isGuidedTutorialOngoing && assistantMovingSelfHolder.gameObject.activeSelf) { OpenAssistantOnGuidedTutorial(); }
}",0.00,0.00,3.00,0.10,,,,,,,,,,,,,,,,,,,
RoadVisualManager,"private void Start()
{
    placedObject_Done = GetComponent<PlacedObject_Done>();
    grid = placedObject_Done.GetGrid();
    AddNewRoadWrapper(placedObject_Done.getWorldPosition(), placedObject_Done.getPlacedObjectTypeSO());
}",0.00,0.00,8.00,0.10,,,,,,,,,,,,,,,,,,,
RoadVisualManager,"public void SelfRecalculatePrefabOnChange()
{
    try
    {
        var childrenOfPlacedObject = placedObject_Done.gameObject.GetComponentsInChildren<Transform>();
        Destroy(childrenOfPlacedObject[1].gameObject);
    }
    catch { }

    //var tempDir = placedObject_Done.GetDir();
    //var rttionOffset = placedObject_Done.getPlacedObjectTypeSO().GetRotationOffset(tempDir);

    //var worldPos = placedObject_Done.getWorldPosition() + new Vector3(rttionOffset.x, 0, rttionOffset.y) * 5;
    GameObject thisObjectToPlace = GetRoadType(placedObject_Done.GetOrigin().x, placedObject_Done.GetOrigin().y);

    var rttionOffset = placedObject_Done.getPlacedObjectTypeSO().GetRotationOffset(dir);

    var worldPos = placedObject_Done.getWorldPosition() + new Vector3(rttionOffset.x, 0, rttionOffset.y) * 5;


    Instantiate(thisObjectToPlace, worldPos, Quaternion.Euler(0, placedObject_Done.getPlacedObjectTypeSO().GetRotationAngle(dir), 0), placedObject_Done.RoadVisualManager.transform);
}",0.00,0.00,18.00,4.00,,,,,,,,,,,,,,,,,,,
RoadVisualManager,"public VehicleAI[] TryGetAssignedVehicle()
{
    try
    {
        return GetComponentsInChildren<VehicleAI>(true);
    }
    catch { return null; }
}",0.00,0.00,2.00,0.10,,,,,,,,,,,,,,,,,,,
TutorialManager,"private void Start()
{
    totalTutorialCount = listOfTutorialHolderTransforms.Count;
}",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
TutorialManager,"public void ActivateFirstTimeTutorialPartOnFirstTimeOpening()
{
    isTutorialOngoing = true;
    tutorialHolder.gameObject.SetActive(true);
    screenDimTransform.gameObject.SetActive(true);

    listOfTutorialHolderTransforms[0].gameObject.SetActive(true);
    prevBtn_Transform.gameObject.SetActive(false);

    canvas.sortingOrder = 10;
}",0.00,0.00,10.00,0.10,,,,,,,,,,,,,,,,,,,
TutorialManager,"public void DeActivateFirstTimeTutorialPartOnFirstTimeOpening()
{
    isTutorialOngoing = false;
    currentIndex = 0;
    tutorialHolder.gameObject.SetActive(false);
    screenDimTransform.gameObject.SetActive(false);

    foreach (Transform child in listOfTutorialHolderTransforms)
    {
        child.gameObject.SetActive(false);
    }

    canvas.sortingOrder = 2;
}",0.00,0.00,10.00,0.10,,,,,,,,,,,,,,,,,,,
TutorialManager,"public void OnNextButtonClicked()
{
    // check if last
    if (totalTutorialCount - 1 <= currentIndex)
    {
        // last one is displaying on the screen
        // and clicked next button
        // route user to game
        // close tutorial
        DeActivateFirstTimeTutorialPartOnFirstTimeOpening();
        return;
    }
    else
    {
        prevBtn_Transform.gameObject.SetActive(true);
        listOfTutorialHolderTransforms[currentIndex].gameObject.SetActive(false);
        currentIndex++;
        listOfTutorialHolderTransforms[currentIndex].gameObject.SetActive(true);
    }
}",2.00,0.00,10.00,1.00,,,,,,,,,,,,,,,,,,,
TutorialManager,"public void OnPrevButtonClicked()
{
    // check if first
    if (currentIndex == 0) { return; }
    if (currentIndex == 1)
    {
        // before first one clicked prev
        // now go to very fist one
        // disable prev btn
        prevBtn_Transform.gameObject.SetActive(false);
    }
    listOfTutorialHolderTransforms[currentIndex].gameObject.SetActive(false);
    currentIndex--;
    listOfTutorialHolderTransforms[currentIndex].gameObject.SetActive(true);
}",2.00,0.00,10.00,1.00,,,,,,,,,,,,,,,,,,,
TutorialManager,"public void OnQuitTutorialClicked()
{
    DeActivateFirstTimeTutorialPartOnFirstTimeOpening();
}",2.00,0.00,2.00,0.10,,,,,,,,,,,,,,,,,,,
TutorialManager,public bool GetIsTutorialOngoing() { return isTutorialOngoing; },0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
FarmerAI,"void Start()
{
    StartCoroutine(StartMainDelayed());

    _agent = GetComponent<NavMeshAgent>();
    _animator = GetComponent<Animator>();
    _target = transform;
}",0.00,0.00,7.00,0.20,,,,,,,,,,,,,,,,,,,
FarmerAI,"private void FixedUpdate()
{
    if (!isInitialized) return;

    if (_agent.remainingDistance < _agent.stoppingDistance && isWalking)
    {
        FindRandomObjectOfInterensTarget();
        return;
    }
    else if (isWalking)
    {
        _agent.destination = _target.position;
    }
}",0.00,0.00,4.00,1.00,,,,,,,,,,,,,,,,,,,
FarmerAI,"private void FindRandomObjectOfInterensTarget()
{
    SetAnimWalk_Disable();
    SetAnimPick_Enable();
    switch (farmerAITargetGroupType)
    {
        case FarmerAITargetGroupType.Barn:
            {
                _target = barnObjectOfInterestList[Random.Range(0, barnObjectOfInterestList.Count)];
                break;
            }
        case FarmerAITargetGroupType.Farm:
            {
                _target = farmObjectOfInterestList[Random.Range(0, farmObjectOfInterestList.Count)];
                break;
            }
    }
    SetNewDestinationOnTargetChangeDelayed();
}",0.00,0.00,10.00,1.00,,,,,,,,,,,,,,,,,,,
FarmerAI,"private void SetNewDestinationOnTargetChangeDelayed()
{
    StartCoroutine(SetNewDestinationOnTargetChangeDelayed_Coroutine());
}",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
FarmerAI,"private IEnumerator SetNewDestinationOnTargetChangeDelayed_Coroutine()
{
    var rand = Random.Range(0.5f, 2.5f);
    yield return new WaitForSeconds(6 + rand);
    _agent.destination = _target.position;
    SetAnimPick_Disable();
    SetAnimWalk_Enable();
}",0.00,0.00,8.00,1.50,,,,,,,,,,,,,,,,,,,
FarmerAI,"private IEnumerator StartMainDelayed()
{
    var rand = Random.Range(0.1f, 1.45f);
    rand += Random.Range(0.2f, 1.25f);
    yield return new WaitForSeconds(4.0f + rand);

    isInitialized = true;
}",0.00,0.00,6.00,0.40,,,,,,,,,,,,,,,,,,,
FarmerAI,"private void SetAnimWalk_Enable()
{
    isWalking = true;
    _animator.SetBool(""isWalking"", true);
}",0.00,0.00,3.00,0.10,,,,,,,,,,,,,,,,,,,
FarmerAI,"private void SetAnimWalk_Disable()
{
    isWalking = false;
    _animator.SetBool(""isWalking"", false);
}",0.00,0.00,3.00,0.10,,,,,,,,,,,,,,,,,,,
FarmerAI,"private void SetAnimPick_Enable()
{
    _animator.SetBool(""isPickingFruit"", true);
}",0.00,0.00,3.00,0.10,,,,,,,,,,,,,,,,,,,
FarmerAI,"private void SetAnimPick_Disable()
{
    _animator.SetBool(""isPickingFruit"", false);
}",0.00,0.00,3.00,0.10,,,,,,,,,,,,,,,,,,,
LawnMowerAI,"void Start()
{
    _buildingsManager = BuildingsManager.Instance;
    _screenManager = ScreenManager.Instance;

    _agent = GetComponent<NavMeshAgent>();
    _target = transform;

    StartCoroutine(StartMainDelayed());
    StartCoroutine(UpdateFarmsListCoroutine());
}",0.00,0.00,11.00,0.30,,,,,,,,,,,,,,,,,,,
LawnMowerAI,"private void FixedUpdate()
{
    if (!isInitialized) return;

    if (_agent.remainingDistance < _agent.stoppingDistance && isWalking)
    {
        ReCalculateTargetOnDestinationReached();
        return;
    }
    else if (isWalking)
    {
        _agent.destination = _target.position;
    }
}",0.00,0.00,6.00,2.00,,,,,,,,,,,,,,,,,,,
LawnMowerAI,"private void SetNewDestinationOnTargetChange()
{
    _agent.destination = _target.position;
}",0.00,0.00,1.00,0.15,,,,,,,,,,,,,,,,,,,
LawnMowerAI,"private IEnumerator SetNewDestinationOnTargetChangeDelayed_Coroutine()
{
    var rand = Random.Range(0, 3);
    yield return new WaitForSeconds(2 + rand);
    _agent.destination = _target.position;
    isWalking = true;
}",0.00,0.00,5.00,0.65,,,,,,,,,,,,,,,,,,,
LawnMowerAI,"private void SetNewDestinationOnTargetChangeDelayed()
{
    StartCoroutine(SetNewDestinationOnTargetChangeDelayed_Coroutine());
}",0.00,0.00,3.00,0.20,,,,,,,,,,,,,,,,,,,
LawnMowerAI,"private void ReCalculateTargetOnDestinationReached()
{
    isWalking = false;
    switch (lastTargetType)
    {
        case 0:
            {
                if (FindRandomUserPlacedFarmTarget())
                {
                    lastTargetType = 1;
                }
                else
                {
                    FindRandomObjectOfInterensTarget();
                    lastTargetType = 0;
                }
                break;
            }
        case 1:
            {
                FindRandomObjectOfInterensTarget();
                lastTargetType = 0;
                break;
            }
    }
    SetNewDestinationOnTargetChangeDelayed();
}",0.00,0.00,9.00,3.00,,,,,,,,,,,,,,,,,,,
LawnMowerAI,"private void FindRandomObjectOfInterensTarget()
{
    _target = objectOfInterestList[Random.Range(0, objectOfInterestList.Count)];
}",0.00,0.00,2.00,0.10,,,,,,,,,,,,,,,,,,,
LawnMowerAI,"private bool FindRandomUserPlacedFarmTarget()
{
    var count = farmsTransformList.Count;
    Debug.Log(""user plcd farms count: "" + count);
    if (count < 1) return false;

    _target = farmsTransformList[Random.Range(0, count)];

    return true;
}",0.00,0.00,5.00,1.00,,,,,,,,,,,,,,,,,,,
LawnMowerAI,"private IEnumerator StartMainDelayed()
{
    yield return new WaitForSeconds(10.0f);

    placedObject_Dones = _buildingsManager.GetBuildingsList();

    foreach (PlacedObject_Done plcd in placedObject_Dones)
    {
        if (plcd.getPlacedObjectTypeSO().kod == ""FARM"")
        {
            farmsTransformList.Add(plcd.transform);
        }
    }

    isInitialized = true;
}",0.00,0.00,7.00,0.60,,,,,,,,,,,,,,,,,,,
LawnMowerAI,"private IEnumerator UpdateFarmsListCoroutine()
{
    yield return new WaitForSeconds(32.0f);
    while (true)
    {
        foreach (PlacedObject_Done plcd in placedObject_Dones)
        {
            if (plcd.getPlacedObjectTypeSO().kod == ""FARM"")
            {
                if (!farmsTransformList.Contains(plcd.transform))
                {
                    farmsTransformList.Add(plcd.transform);
                }
            }
        }
        yield return new WaitForSeconds(30);
    }
}",0.00,0.00,6.00,0.50,,,,,,,,,,,,,,,,,,,
VehicleAI,"private void OnEnable()
{
    speed += Random.Range(-2, 2);
}",0.00,0.00,2.00,0.10,,,,,,,,,,,,,,,,,,,
VehicleAI,"private void Start()
{
    grid = GridBuildingSystem.Instance.GetGrid();
}",0.00,0.00,2.00,0.02,,,,,,,,,,,,,,,,,,,
VehicleAI,"private bool IsRoadChecked()
{
    grid.GetXZ(transform.position, out int x, out int y);
    if (last_x == x && last_y == y)
    {
        return true;
    }
    else
    {
        // road is changed
        last_x = x;
        last_y = y;
        return false;
    }
}",0.00,0.00,6.00,1.00,,,,,,,,,,,,,,,,,,,
VehicleAI,"private Vector3 InterpolateRotationHelper(float interpolateAmount)
{
    // return value max if close to zero or one
    // return value min if close to 0.5
    return Vector3.Slerp(startTurningPoint, endTurningPoint, interpolateTimeAmount);
}",0.00,0.00,3.00,0.30,,,,,,,,,,,,,,,,,,,
VehicleAI,"private Vector3 LERP_InterpolateRotationHelper(float interpolateAmount)
{
    return Vector3.Lerp(startTurningPoint, endTurningPoint, interpolateTimeAmount);
}",0.00,0.00,3.00,0.20,,,,,,,,,,,,,,,,,,,
VehicleSpawner,"void Start()
{
    buildingsManager = BuildingsManager.Instance;
    listOfCars = new List<Transform>();
    theRoadGroup = new List<PlacedObject_Done>();
    StartCoroutine(AutoSpawnerMain());
    StartCoroutine(CheckIfCarDestroyedAndRemoveFromList());
}",0.00,0.00,7.00,0.05,,,,,,,,,,,,,,,,,,,
VehicleSpawner,"private IEnumerator AutoSpawnerMain()
{
    //yield return new WaitForSeconds(5.0f);
    while (true)
    {
        GetRoadCountAndHandleVehicleWrapperOnRoadAddDestroy();
        yield return new WaitForSeconds(6.0f);
    }
}",0.00,0.00,2.00,0.10,,,,,,,,,,,,,,,,,,,
VehicleSpawner,"public void GetRoadCountAndHandleVehicleWrapperOnRoadAddDestroy()
{
    var groupsOfRoads = buildingsManager.GetGroupsOfRoad();
    // check which road group to use
    var tempGroupIndex = CheckRoadGroups(groupsOfRoads);
    if (tempGroupIndex == -1) { return; }

    if (tempGroupIndex != roadGroupIndex)
    {
        // delete all car prefabs that are instantiated
        foreach (var car in listOfCars)
        {
            if (car != null && car.gameObject != null)
            {
                Destroy(car.gameObject);
            }
        }

        // clear list of cars
        listOfCars.Clear();

        roadGroupIndex = tempGroupIndex;
    }

    theRoadGroup = groupsOfRoads[roadGroupIndex];

    // check how many cars needed to be created
    var amountToCreate = AmountOfCarsToCreate();
    if (amountToCreate > 0)
    {
        // decide where to create world pos? and rotation
        // instantiate car
        InstantianteACar();
    }
}",0.00,0.00,18.00,2.00,,,,,,,,,,,,,,,,,,,
VehicleSpawner,"private void InstantianteACar()
{
    var currentRoadCount = theRoadGroup.Count;
    if (currentRoadCount == 0) { return; }

    var rondomRoadIndex = Random.Range(0, currentRoadCount - 1);

    var rooad = theRoadGroup[rondomRoadIndex];

    var roadVisualManager = rooad.RoadVisualManager;
    var vehicleList = roadVisualManager.TryGetAssignedVehicle();

    var ccount = vehicleList.Count();
    if (ccount < 1) { return; }

    var randomVh = vehicleList[Random.Range(0, ccount - 1)];

    if (randomVh != null)
    {
        // found vehicle
        var vh = randomVh.gameObject.transform;
        listOfCars.Add(Instantiate(vh, vh.position, vh.rotation, parent: transform));
    }


    //var roadOrigin = theRoad.GetOrigin();
    //var grid = theRoad.GetGrid();

    //var anchorWorldPos = grid.GetWorldPosition(roadOrigin.x, roadOrigin.y);

    //var newRightLane = anchorWorldPos + new Vector3(2.5f, .0f, 2.5f);

    //var carToInst = carPrefab;
    //carToInst.transform.position = newRightLane;
    //listOfCars.Add(Instantiate(carToInst, parent: transform));
}",0.00,0.00,18.00,2.00,,,,,,,,,,,,,,,,,,,
VehicleSpawner,"private int AmountOfCarsToCreate()
{
    var currentCarCount = listOfCars.Count;
    var currentConnectedRoadCount = theRoadGroup.Count;

    // min of 10 road is required to at least spawn a car
    if (currentConnectedRoadCount < 10) return 0;

    // if max car count reached return
    if (currentCarCount >= GLOBAL_MAX_CAR_SPAWNED_AMOUNT) return 0;

    var basedOnRoads = Mathf.FloorToInt((currentConnectedRoadCount - 9) / 2.0f);
    var basedCombine = basedOnRoads - currentCarCount;

    return basedCombine > 0 ? basedCombine : 0;
}",0.00,0.00,9.00,1.00,,,,,,,,,,,,,,,,,,,
VehicleSpawner,"private int CheckRoadGroups(List<List<PlacedObject_Done>> groupOfR)
{
    if (groupOfR == null) { return -1; }
    if (groupOfR.Count == 0) { return -1; }
    List<PlacedObject_Done> mostBiggestRoadGroup = groupOfR[0];
    var index = 0;
    var biggestIndex = 0;
    foreach (var group in groupOfR)
    {
        if (group.Count > mostBiggestRoadGroup.Count)
        {
            mostBiggestRoadGroup = group;
            biggestIndex = index;
        }
        index++;
    }
    return biggestIndex;
}",0.00,0.00,8.00,1.50,,,,,,,,,,,,,,,,,,,
VehicleSpawner,"public IEnumerator CheckIfCarDestroyedAndRemoveFromList()
{
    while (true)
    {
        if (listOfCars.Count != 0)
        {
            for (int i = listOfCars.Count - 1; i > -1; i--)
            {
                if (listOfCars[i] == null)
                {
                    listOfCars.RemoveAt(i);
                }
            }
        }
        yield return new WaitForSeconds(10.0f);
    }

}",0.00,0.00,4.00,1.00,,,,,,,,,,,,,,,,,,,
VehicleSpawner,"IEnumerator getRoadCountAndCreateVehicle()
{
    yield return new WaitForSeconds(5.0f);
    var roadCount = buildingsManager.GetRoadsList().Count;
    while (true)
    {
        roadCount = buildingsManager.GetRoadsList().Count;
        if (roadCount > 2 && !(listOfCars.Count > 1))
        {
            var carToInst = carPrefab;
            carToInst.transform.position = getNextDest();
            listOfCars.Add(Instantiate(carToInst, parent: transform));
        }

        yield return new WaitForSeconds(5.0f);
    }
}",0.00,0.00,10.00,1.00,,,,,,,,,,,,,,,,,,,
VehicleSpawner,"public Vector3 getNextDest()
{
    var roads = buildingsManager.GetRoadsList();

    var plcdRoad = roads[Random.Range(0, roads.Count)];
    return plcdRoad.getWorldPosition() + new Vector3(2.5f, 0, 2.5f);
}",0.00,0.00,6.00,1.50,,,,,,,,,,,,,,,,,,,
GameBackgroundForegroundManager,"private void Start()
{
    saveManager = SaveManager.Instance;
    customTimeManager = CustomTimeManager.Instance;

    StartCoroutine(CheckAndCloseUIForGameStartUntilEverythingLoadedScreenCanvasTransformIfNotBackground());
}",0.00,0.00,4.00,0.02,,,,,,,,,,,,,,,,,,,
GameBackgroundForegroundManager,"private IEnumerator CheckAndCloseUIForGameStartUntilEverythingLoadedScreenCanvasTransformIfNotBackground()
{
    yield return new WaitForSeconds(10.0f);
    while (true)
    {
        if (!isPaused && UIForGameStartUntilEverythingLoadedScreenCanvasTransform.gameObject.activeSelf)
        {
            UIForGameStartUntilEverythingLoadedScreenCanvasTransform.gameObject.SetActive(false);
        }
        yield return new WaitForSeconds(2.0f);
    }
}",0.00,0.00,3.00,0.50,,,,,,,,,,,,,,,,,,,
LoadManager,"private void StartFirstTimeGameOpening()
{
    //firstDirtyTransformsList.gameObject.SetActive(true);

    // randomly instantiate all dirty prefabs

    var grid = GridBuildingSystem.Instance.GetGrid();

    var width = grid.GetWidth();
    var height = grid.GetHeight();
    var cellSize = grid.GetCellSize();

    var eachDirtyPrefabDimension = 10;

    var howManyCanFitWidth = width / eachDirtyPrefabDimension;
    var howManyCanFitHeight = height / eachDirtyPrefabDimension;

    for (var h = 0; h < howManyCanFitHeight; h++)
    {
        for (var w = 0; w < howManyCanFitWidth; w++)
        {
            var rd = UnityEngine.Random.Range(0, 4);
            var indexTemp = rd + 26;

            GridBuildingSystem.Instance.SetSelectedPlacedObjectTypeSO(indexTemp);
            GridBuildingSystem.Instance.TryConstructNewBuilding(new Vector3(w * eachDirtyPrefabDimension * cellSize + 0.1f, 0, h * eachDirtyPrefabDimension * cellSize + 0.1f));
        }
    }

    // this one must be below set dirty's

    GuidedTutorialInfo gti = new()
    {
        isGuidedTutorialOngoing = true,
        currentIndex = 0,
    };
    guidedTutorialManager.InitGuidedTutorialFromLoadWithValues(gti);
}",0.00,0.00,22.00,4.00,,,,,,,,,,,,,,,,,,,
LoadManager,"public static bool IsLoading()
{
    return isLoading;
}",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
LoadManager,"private IEnumerator DisableApiExceptionReporting()
{
    yield return new WaitForSeconds(5);

    isApiReportingEnabled = false;
}",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
SaveManager,"private void Awake()
{
    if (Instance == null)
    {
        Instance = this;
    }
    else if (Instance != this)
    {
        Destroy(gameObject);
    }
}",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
SaveManager,"private void Start()
{
    buildingsManager = BuildingsManager.Instance;
    leaderManager = Leader.Instance;
    techManager = TechnologyManager.Instance;
    resourceHolder = RawResource.Instance;
    utilitiesManager = Utilities.Instance;
    seedManager = SeedResource.Instance;
    marketplace = Marketplace.Instance;
    achievementsManager = AchievementsManager.Instance;
    playerAuthManager = PlayerAuthManager.Instance;
    guidedTutorialManager = GuidedTutorialManager.Instance;
    customTimeManager = CustomTimeManager.Instance;
    criminalEventsManager = CriminalEventsManager.Instance;
    environmentManager = EnvironmentManager.Instance;

    StartCoroutine(AutoSaveEvery15MinCoroutine());
}",0.00,0.00,16.00,0.10,,,,,,,,,,,,,,,,,,,
SaveManager,"private void OnApplicationFocus(bool focus)
{
    if (focus)
    {
        SaveStartMainCallback();
    }
}",0.00,0.00,3.00,0.04,,,,,,,,,,,,,,,,,,,
SaveManager,"public void SaveStartMainCallback()
{
    SaveToLocalStorage();
    lastSavedTime = customTimeManager.GetRealUtcTime();
}",0.00,0.00,4.00,0.02,,,,,,,,,,,,,,,,,,,
SaveManager,"public DateTime GetLastSavedDatetime()
{
    return lastSavedTime;
}",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
SaveManager," public string GetLocalLastSave()
 {
     return lastUserSave;
 }",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
SaveManager,"private IEnumerator AutoSaveEvery15MinCoroutine()
{
    while (true)
    {
        yield return new WaitForSeconds(300);

        // check last saved time to api
        // if 15min passed save
        // otherwise do nothing
        var realUtcTime = customTimeManager.GetRealUtcTime();
        if (realUtcTime.Subtract(lastSavedToApiTime).TotalSeconds > 900)
        {
            SaveStartMainCallback();

            // save to api

            UserSaveRequestDto dto = new()
            {
                Email = """",
                SaveData = lastUserSave,
            };

            yield return StartCoroutine(playerAuthManager.SaveMySave(dto));
            lastSavedToApiTime = realUtcTime;
        }

    }
}",0.00,0.00,11.00,1.50,,,,,,,,,,,,,,,,,,,
ChangeScene,"public void GoToMainGameScene()
{
    selfTransform.gameObject.SetActive(false);
    loadingTransform.gameObject.SetActive(true);

    slider = sliderTransform.gameObject.GetComponent<Slider>();
    text = textTransform.gameObject.GetComponent<TextMeshProUGUI>();

    //Start loading the Scene asynchronously and output the progress bar
    StartCoroutine(LoadScene(""MainGameScene""));
}",0.00,0.00,11.00,1.50,,,,,,,,,,,,,,,,,,,
ChangeScene,"public void GoToStoryScene()
{
    selfTransform.gameObject.SetActive(false);
    loadingTransform.gameObject.SetActive(true);

    slider = sliderTransform.gameObject.GetComponent<Slider>();
    text = textTransform.gameObject.GetComponent<TextMeshProUGUI>();

    //Start loading the Scene asynchronously and output the progress bar
    StartCoroutine(LoadScene(""StoryScene""));
}",0.00,0.00,11.00,1.50,,,,,,,,,,,,,,,,,,,
FirstSceneUIHelperManager,"private void Start()
{
    _authManager = PlayerAuthManager.Instance;
    displayError = DisplayError.Instance;

    Helper_OpenCorrectAuthBtn();
}",0.00,0.00,4.00,0.01,,,,,,,,,,,,,,,,,,,
FirstSceneUIHelperManager,"public void OnLoginButtonClicked()
{
    // get strings
    var email = T_login_email.GetComponent<TMP_InputField>().text;
    var pass = T_login_password.GetComponent<TMP_InputField>().text;

    // check password and other requirements
    // check email
    if (email == null || email == """")
    {
        displayError.ShowError(""Email is required!"");
        return;
    }

    // check password
    if (pass == null || pass == """")
    {
        displayError.ShowError(""Please provide a password"");
        return;
    }

    UserLoginRequestDto dto = new()
    {
        Email = email,
        Password = pass,
    };

    StartCoroutine(_authManager.LoginUser(dto));
}",2.00,0.00,16.00,3.00,,,,,,,,,,,,,,,,,,,
FirstSceneUIHelperManager,"public void OnConfirmEmailButtonClicked()
{
    // get string
    var code = T_confirm_email_code.GetComponent<TMP_InputField>().text;

    // check code
    if (code == null || code == """")
    {
        displayError.ShowError(""Code field is required!"");
        return;
    }

    StartCoroutine(_authManager.ConfirmEmail(code));
}",2.00,0.00,6.00,1.00,,,,,,,,,,,,,,,,,,,
FirstSceneUIHelperManager,"public void OnGetForgetPasswordCodeButtonClicked()
{
    emailForForgetPassword = T_forgetPassword_email.GetComponent<TMP_InputField>().text;

    // check email
    if (emailForForgetPassword == null || emailForForgetPassword == """")
    {
        displayError.ShowError(""Email is required!"");
        return;
    }

    StartCoroutine(_authManager.ResetPasswordToken(emailForForgetPassword));
}",2.00,0.00,7.00,1.00,,,,,,,,,,,,,,,,,,,
FirstSceneUIHelperManager,"public void OnChangePasswordButtonClicked()
{
    ChangePasswordDto dto = new()
    {
        Email = emailForForgetPassword,
        Code = T_resetPassword_code.GetComponent<TMP_InputField>().text,
        Password = T_resetPassword_password.GetComponent<TMP_InputField>().text,
    };

    // check code
    if (dto.Code == null || dto.Code == """")
    {
        displayError.ShowError(""Code field is required!"");
        return;
    }

    // check password
    if (dto.Password == null || dto.Password == """")
    {
        displayError.ShowError(""Please provide a password"");
        return;
    }
    var errors_for_pass_frontend = ValidatePassword(dto.Password);

    if (errors_for_pass_frontend.Count > 0)
    {
        var concat_errors = """";
        foreach (var err in errors_for_pass_frontend)
        {
            concat_errors += err.ToString() + ""\n"";
        }

        displayError.ShowError(concat_errors);
        return;
    }

    StartCoroutine(_authManager.SetNewPassword(dto));
}",2.00,0.00,18.00,3.00,,,,,,,,,,,,,,,,,,,
FirstSceneUIHelperManager,"public void OpenLogin()
{
    CloseAllHolders();
    login_holder.gameObject.SetActive(true);
}",2.00,0.00,3.00,0.01,,,,,,,,,,,,,,,,,,,
FirstSceneUIHelperManager,"public void OpenRegister()
{
    CloseAllHolders();
    register_holder.gameObject.SetActive(true);
}",2.00,0.00,3.00,0.01,,,,,,,,,,,,,,,,,,,
FirstSceneUIHelperManager,"public void OpenConfirmEmail()
{
    CloseAllHolders();

    T_confirm_email.GetComponent<TMP_InputField>().text = _authManager.GetUserEmail();
    Debug.Log(""OpenConfirmEmail user email: "" + _authManager.GetUserEmail());

    confirmEmail_holder.gameObject.SetActive(true);
}",0.00,0.00,10.00,0.10,,,,,,,,,,,,,,,,,,,
FirstSceneUIHelperManager,"public void OpenGetForgetPassword()
{
    CloseAllHolders();
    getPasswordResetCode_holder.gameObject.SetActive(true);
}",2.00,0.00,3.00,0.01,,,,,,,,,,,,,,,,,,,
FirstSceneUIHelperManager,"public void OpenForgetPasswordAfterCodeSent()
{
    CloseAllHolders();

    T_resetPassword_email.GetComponent<TMP_InputField>().text = emailForForgetPassword;

    passwordReset_holder.gameObject.SetActive(true);
}",2.00,0.00,4.00,0.02,,,,,,,,,,,,,,,,,,,
FirstSceneUIHelperManager,"public void CloseAllHolders()
{
    login_holder.gameObject.SetActive(false);
    register_holder.gameObject.SetActive(false);
    confirmEmail_holder.gameObject.SetActive(false);
    getPasswordResetCode_holder.gameObject.SetActive(false);
    passwordReset_holder.gameObject.SetActive(false);

    GPGA_holder.gameObject.SetActive(false);
    AGC_holder.gameObject.SetActive(false);
}",0.00,0.00,7.00,0.10,,,,,,,,,,,,,,,,,,,
FirstSceneUIHelperManager,"public void GoBackToDefaultView()
{
    CloseAllHolders();
    login_holder.gameObject.SetActive(true);

    Helper_OpenCorrectAuthBtn();
}",0.00,0.00,4.00,0.10,,,,,,,,,,,,,,,,,,,
FirstSceneUIHelperManager,"    private void Helper_OpenCorrectAuthBtn()
    {
#if UNITY_ANDROID
        GPGA_holder.gameObject.SetActive(true);
#endif

#if UNITY_IOS
        AGC_holder.gameObject.SetActive(true);
#endif
    }",0.00,0.00,3.00,0.20,,,,,,,,,,,,,,,,,,,
BuildingsManager,"private void Awake()
{
    if (Instance == null)
    {
        Instance = this;
    }
    else if (Instance != this)
    {
        Destroy(gameObject);
    }
    placedObject_Dones = new List<PlacedObject_Done>();
    placedRoads = new List<PlacedObject_Done>();
    placedDirtyPrefabs = new List<PlacedObject_Done>();
}",0.00,0.00,6.00,0.10,,,,,,,,,,,,,,,,,,,
BuildingsManager,"private void Start()
{
    displayError = DisplayError.Instance;
    screensManager = ScreenManager.Instance;
    environment = EnvironmentManager.Instance;
    resourceManager = RawResource.Instance;
    utilitiesManager = Utilities.Instance;
    buildingInfo = BuildingInfo.Instance;
    leaderManager = Leader.Instance;
    saveManager = SaveManager.Instance;
    isolatedSimulator = IsolatedSimulator.Instance;
    achievementsManager = AchievementsManager.Instance;
    playerAuthManager = PlayerAuthManager.Instance;
    marketplace = Marketplace.Instance;
    technologyManager = TechnologyManager.Instance;
    leaderboardManager = LeaderboardManager.Instance;

    grid = GridBuildingSystem.Instance.GetGrid();

    // object pooling init for UI anim
    Init();
}",0.00,0.00,17.00,0.50,,,,,,,,,,,,,,,,,,,
BuildingsManager,"public List<PlacedObject_Done> GetBuildingsList()
{
    return placedObject_Dones;
}",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
BuildingsManager,"public List<PlacedObject_Done> GetRoadsList()
{
    return placedRoads;
}",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
BuildingsManager,"public List<PlacedObject_Done> GetDirtyList()
{
    return placedDirtyPrefabs;
}",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
BuildingsManager,"public void OnLoadStateEnd()
{
    ReCalculateAllBuildingMAXA_Alpha_OnLoadCallback();
    CheckAllRoadMainConnectedState();
    RecalculateBuildingRoadConnectionOnChange();
    vehicleSpawner.GetRoadCountAndHandleVehicleWrapperOnRoadAddDestroy();
}",0.00,0.00,4.00,0.30,,,,,,,,,,,,,,,,,,,
BuildingsManager,"public void AddRemoveAllFarmsVisualsOnSceneChange()
{
    // for all FARM recalculate their child prefabs
    foreach (var farm in placedObject_Dones)
    {
        if (farm.getPlacedObjectTypeSO().kod == ""FARM"")
        {
            farm.FarmTileAddRemovePrefabsBasedOnCrop();
        }
    }
}",0.00,0.00,5.00,0.50,,,,,,,,,,,,,,,,,,,
BuildingsManager,"public bool CheckIfMAXA(PlacedObjectTypeSO placedObjectTypeSO)
{
    var root = buildingInfo.QByKod(placedObjectTypeSO.kod);
    if (root == null) { return true; }

    // building does not have MAXA attribute return true
    if (!root.Identifiers.BuildingAttributes.Contains(""MAXA"")) { return true; }

    if (root == null || root.ExtraSpecial == null) { return false; }

    var MaxAllowedAmount = root.ExtraSpecial.MaxAllowed;
    var alreadyConstructedAmount = GetConstructedBuildingAmount(placedObjectTypeSO.kod);
    
    return alreadyConstructedAmount < MaxAllowedAmount;
}",0.00,0.00,11.00,2.00,,,,,,,,,,,,,,,,,,,
BuildingsManager,"public int GetConstructedBuildingAmount(PlacedObjectTypeSO placedObjectTypeSO)
{
    return GetConstructedBuildingAmount(placedObjectTypeSO.kod);
}",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
BuildingsManager,"public int GetConstructedBuildingAmount(string code)
{
    var alreadyConstructedAmount = 0;

    foreach (var building in placedObject_Dones)
    {
        if (building.getPlacedObjectTypeSO().kod == code)
        {
            alreadyConstructedAmount++;
        }
    }
    return alreadyConstructedAmount;
}",0.00,0.00,4.00,0.80,,,,,,,,,,,,,,,,,,,
BuildingsManager,"private void ApplyAlphaChannelMAXA(PlacedObjectTypeSO _so)
{
    if (!CheckIfMAXA(_so))
    {
        // this building max constructed
        // so set alpha channel to 0.5 vis
        var sprite = GetspriteRefFromCodeString(_so.kod);
        if (sprite != null)
        {
            var col = sprite.color;
            col.a = 0.5f;
            sprite.color = col;
        }
        else
        {
            //Debug.Log(""null!!!!!!!!!"");
        }
    }
}",0.00,0.00,8.00,0.50,,,,,,,,,,,,,,,,,,,
BuildingsManager,"public void ReCalculateAllBuildingMAXA_Alpha_OnLoadCallback()
{
    List<string> checkedBuildingCodes = new ();
    foreach(var building in placedObject_Dones)
    {
        var _so = building.getPlacedObjectTypeSO();
        var code = _so.kod;
        if (checkedBuildingCodes.Contains(code)) continue;

        checkedBuildingCodes.Add(code);
        var root = buildingInfo.QByKod(code);

        if (root.Identifiers.BuildingAttributes.Contains(""MAXA""))
        {
            ApplyAlphaChannelMAXA(_so);
        }
    }
}",0.00,0.00,13.00,0.50,,,,,,,,,,,,,,,,,,,
BuildingsManager,"public void StartFireOnSelectedBuilding(PlacedObject_Done placedObject_Done)
{
    if (placedObject_Done.getPlacedObjectTypeSO().kod == ""ROAD"") { return; }
    Instantiate(firePrefab, placedObject_Done.getWorldPosition(), Quaternion.identity, parent: placedObject_Done.buildingVisual);
}",0.00,0.00,5.00,1.00,,,,,,,,,,,,,,,,,,,
BuildingsManager,"public void FarmTileSelfCollectButtonOnClick(PlacedObject_Done plcd)
{
    if (plcd.GetPlcdFarmTileDetails().isUserGatherAwaiting)
    {
        // now add to inventory based on is pre or not
        var amountAdded = marketplace.OnFarmCollectAddToSeedAndFoodToHolder(plcd);

        if (amountAdded > 0)
        {
            AnimatAndCloseeOnCollectClicked(amountAdded);
        }

        plcd.GetPlcdFarmTileDetails().isUserGatherAwaiting = false;

        plcd.FarmTileAddRemovePrefabsBasedOnCrop();

        //// add food to depot
        //if (resourceManager.IncreaseFood())
        //{
        //    plcd.GetPlcdFarmTileDetails().isUserGatherAwaiting = false;
        //}
        //else
        //{
        //    displayError.ShowError(""Insufficient food storage capacity"");
        //}
    }

    saveManager.SaveStartMainCallback();
    isolatedSimulator.OnAnyChangeSetNewNotificationMainCallback();
}",0.00,0.00,12.00,2.50,,,,,,,,,,,,,,,,,,,
BuildingsManager,"public void FarmTileDragCollectButtonOnClick(PlacedObject_Done plcd)
{
    if (plcd.GetPlcdFarmTileDetails().isUserGatherAwaiting)
    {
        // now add to inventory based on is pre or not
        var amountAdded = marketplace.OnFarmCollectAddToSeedAndFoodToHolder(plcd);

        //if (amountAdded > 0)
        //{
        //    AnimatAndCloseeOnCollectClicked(amountAdded);
        //}

        plcd.GetPlcdFarmTileDetails().isUserGatherAwaiting = false;

        plcd.FarmTileAddRemovePrefabsBasedOnCrop();

        //// add food to depot
        //if (resourceManager.IncreaseFood())
        //{
        //    plcd.GetPlcdFarmTileDetails().isUserGatherAwaiting = false;
        //}
        //else
        //{
        //    displayError.ShowError(""Insufficient food storage capacity"");
        //}

        //saveManager.SaveStartMainCallback();
        //isolatedSimulator.OnAnyChangeSetNewNotificationMainCallback();
    }
}",0.00,0.00,4.00,0.50,,,,,,,,,,,,,,,,,,,
BuildingsManager,"public void DisableAnyGhostWhileBuildingOnHolderOpen()
{
    if (screensManager.screen == ScreenManager.ScreenData.City)
    {
        buildingGhost.On_Cancel_New_Building();
    }
    else if (screensManager.screen == ScreenManager.ScreenData.Farmland)
    {
        farmlandbuildingGhost.On_Cancel_New_Building();
    }
}",0.00,0.00,5.00,0.30,,,,,,,,,,,,,,,,,,,
BuildingsManager,"public bool DemolishDirtyPrefab(PlacedObject_Done theDirty)
{
    if (placedDirtyPrefabs.Remove(theDirty))
    {
        theDirty.DestroySelf();

        List<Vector2Int> gridPositionList = theDirty.GetGridPositionList();
        foreach (Vector2Int gridPosition in gridPositionList)
        {
            grid.GetGridObject(gridPosition.x, gridPosition.y).ClearPlacedObject();
        }

        saveManager.SaveStartMainCallback();

        return true;
    }
    return false;
}",0.00,0.00,11.00,0.50,,,,,,,,,,,,,,,,,,,
BuildingsManager,"public void DemolishAllDirtyPrefab()
{
    foreach (var theDirty in placedDirtyPrefabs)
    {
        theDirty.DestroySelf();

        List<Vector2Int> gridPositionList = theDirty.GetGridPositionList();
        foreach (Vector2Int gridPosition in gridPositionList)
        {
            grid.GetGridObject(gridPosition.x, gridPosition.y).ClearPlacedObject();
        }

    }
    placedDirtyPrefabs.Clear();
    saveManager.SaveStartMainCallback();
}",0.00,0.00,10.00,0.30,,,,,,,,,,,,,,,,,,,
BuildingsManager,"public List<List<PlacedObject_Done>> GetGroupsOfRoad()
{
    return groupsOfRoads;
}",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
BuildingsManager,"public Transform GetExclamationMarkPrefab()
{
    return exclamationMarkPrefab;
}",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
BuildingsManager,"public Transform GetCurrentFireExtinguishPrefab()
{
    return currentFireExtinguishPrefab;
}",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
BuildingsManager,"public void Init()
{
    for (int i = 0; i < 15; i++)
    {
        var tr = Instantiate(foodSprinteForAnim, transform.position, transform.rotation, parent: animParent);
        tr.gameObject.SetActive(false);
        animQueue.Enqueue(tr);
    }
}",0.00,0.00,6.00,0.50,,,,,,,,,,,,,,,,,,,
BuildingsManager,"private void AnimatAndCloseeOnCollectClicked(int animCount)
{
    var count_temp = animCount > 15 ? 15 : animCount;

    for (int i = 0; i < count_temp; i++)
    {
        if (animQueue.Count > 0)
        {
            var transfrm = animQueue.Dequeue();
            transfrm.gameObject.SetActive(true);

            var animD_T = UnityEngine.Random.Range(min_anim_duration, max_anim_duration);
            transfrm.position = animStartCollectBtnPos.position;
            //transfrm.DOMove(new Vector3(targeTPos.x + rd, targeTPos.y + rd2, 0), animD_T).SetEase(Ease.InOutBack).OnComplete(() =>
            transfrm.DOMove(animEndInventoryPos.position, animD_T).SetEase(ease_).OnComplete(() =>
            {
                transfrm.gameObject.SetActive(false);
                animQueue.Enqueue(transfrm);
            });
        }
    }
}",0.00,0.00,19.00,1.50,,,,,,,,,,,,,,,,,,,
BuildingsManager,"private IEnumerator DisableApiExceptionReporting()
{
    yield return new WaitForSeconds(5);

    isApiReportingEnabled = false;
}",0.00,0.00,2.00,0.10,,,,,,,,,,,,,,,,,,,
BuildingsManager,"public void StartFireInGameAtStartDelayed_HELPER(PlacedObject_Done plcd)
{
    gameSimulator.StartFireInGameAtStartDelayed_public(plcd);
}",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
CustomTimeManager,"private void Awake()
{
    DontDestroyOnLoad(this);

    if (Instance == null)
    {
        Instance = this;
    }
    else if (Instance != this)
    {
        Destroy(gameObject);
    }
}",0.00,0.00,3.00,0.20,,,,,,,,,,,,,,,,,,,
CustomTimeManager,"void Start()
{
    playerAuthManager = PlayerAuthManager.Instance;
    // try get utc time from timeapi.io
    // if success continue
    // else get time from our server
    StartCoroutine(TrySetRealTimeOnAppStartup());
}",0.00,0.00,2.00,0.05,,,,,,,,,,,,,,,,,,,
CustomTimeManager,"public DateTime GetRealUtcTime()
{
    return dateTime_onAppStartup.AddSeconds(Time.realtimeSinceStartup);
}",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
CustomTimeManager,"private IEnumerator TrySetRealTimeOnAppStartup()
{
    //yield return StartCoroutine(GetUtcTime_FromOurApi());
    while (!isDatetimeOnStartupInitialized)
    {
        yield return StartCoroutine(GetUtcTime_Other_1());
        // second time from our server
        if (!isDatetimeOnStartupInitialized)
        {
            yield return StartCoroutine(GetUtcTime_FromOurApi());
        }

        yield return new WaitForSeconds(10.0f);
    }
}",0.00,0.00,5.00,0.50,,,,,,,,,,,,,,,,,,,
CustomTimeManager,"private IEnumerator GetUtcTime_Other_1()
{
    var uwr = new UnityWebRequest(""https://timeapi.io/api/Time/current/zone?timeZone=Etc/Greenwich"", ""GET"");
    uwr.SetRequestHeader(""Content-Type"", ""application/json"");

    uwr.downloadHandler = new DownloadHandlerBuffer();

    yield return uwr.SendWebRequest();

    if (uwr.responseCode != 200)
    {
        Set_isDatetimeOnStartupInitialized(false);
        yield return false;
    }
    else
    {
        var realDatetime = JsonConvert.DeserializeObject<CustomTimeApiModel>(uwr.downloadHandler.text);
        Debug.Log(""datetime from out api: "" + realDatetime.dateTime);
        Set_dateTime_onAppStartup(realDatetime.dateTime);
        Set_isDatetimeOnStartupInitialized(true);
    }
}",0.00,1.00,13.00,0.80,,,,,,,,,,,,,,,,,,,
CustomTimeManager,"private IEnumerator GetUtcTime_FromOurApi()
{
    var uwr = new UnityWebRequest(playerAuthManager.GetAPIURI() + playerAuthManager.GetAPICONTROLLERUSERGAMESAVE() + ""GetUtcTime"", ""GET"");
    Debug.Log(playerAuthManager.GetAPIURI() + playerAuthManager.GetAPICONTROLLERUSERGAMESAVE() + ""GetUtcTime"");
    uwr.SetRequestHeader(""Content-Type"", ""application/json"");

    var bearerToken_ = playerAuthManager.GetBearerToken();
    uwr.SetRequestHeader(""Authorization"", ""Bearer "" + bearerToken_);

    uwr.downloadHandler = new DownloadHandlerBuffer();

    yield return uwr.SendWebRequest();

    if (uwr.responseCode != 200)
    {
        Set_isDatetimeOnStartupInitialized(false);
        yield return false;
    }
    else
    {
        var realDatetime_T = uwr.downloadHandler.text;
        realDatetime_T = realDatetime_T.Replace(""\"""", """").Replace(""\\"", """");
        Debug.Log(""datetime_String from our api: "" + realDatetime_T);
        var realDatetime = DateTime.Parse(realDatetime_T);
        Debug.Log(""datetime from our api: "" + realDatetime);
        Set_dateTime_onAppStartup(realDatetime);
        Set_isDatetimeOnStartupInitialized(true);
    }
}",0.00,1.00,28.00,1.00,,,,,,,,,,,,,,,,,,,
CustomTimeManager,public DateTime Get_dateTime_onAppStartup() { return dateTime_onAppStartup; },0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
CustomTimeManager,private void Set_dateTime_onAppStartup(DateTime dt) { dateTime_onAppStartup = dt; },0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
CustomTimeManager,public bool Get_isDatetimeOnStartupInitialized() { return isDatetimeOnStartupInitialized; },0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
CustomTimeManager,private void Set_isDatetimeOnStartupInitialized(bool _bool) { isDatetimeOnStartupInitialized = _bool; },0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
DisplayError,"private void Awake()
{
    if (Instance == null)
    {
        Instance = this;
    }
    else if (Instance != this)
    {
        Destroy(gameObject);
    }
}",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
DisplayError,"public void CloseErrorTransform()
{
    if(displayErrorTransform.gameObject.activeSelf) displayErrorTransform.gameObject.SetActive(false);

    audioManager?.Play_defaultButtonClick();
}",2.00,0.00,4.00,0.02,,,,,,,,,,,,,,,,,,,
DisplayError,"public void ShowError(string message)
{
    errorText.GetComponent<TextMeshProUGUI>().text = GetCorrectLangugeString_ForDisplayError(message);
    if (!displayErrorTransform.gameObject.activeSelf) displayErrorTransform.gameObject.SetActive(true);

    audioManager?.Play_errorAudio();
}",0.00,0.00,8.00,0.20,,,,,,,,,,,,,,,,,,,
EnvironmentManager,"private void Awake()
{
    if (Instance == null)
    {
        Instance = this;
    }
    else if (Instance != this)
    {
        Destroy(gameObject);
    }

    defaultBuildingInfos = BuildingInfo.Instance;
    populationManager = Population.Instance;
}",0.00,0.00,4.00,0.01,,,,,,,,,,,,,,,,,,,
EnvironmentManager,"private void Start()
{
    _criminalEventsManager = CriminalEventsManager.Instance;
    _buildingManager = BuildingsManager.Instance;

    StartCoroutine(CheckAllFiresCountAndDetermineBpAddition());
}",0.00,0.00,4.00,0.05,,,,,,,,,,,,,,,,,,,
EnvironmentManager,public double getAirPollutionOnly() { return airPollution; },0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
EnvironmentManager,public double getWaterPollutionOnly() { return waterPollution; },0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
EnvironmentManager,public double getGroundPollutionOnly() { return groundPollution; },0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
EnvironmentManager,public double getNoisePollutionOnly() { return noisePollution; },0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
EnvironmentManager,public double getVisualPollutionOnly() { return visualPollution; },0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
EnvironmentManager,public double getAirPollution() { return airPollution + fireCount * 15; },0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
EnvironmentManager,public double getWaterPollution() { return waterPollution + fireCount * 10; },0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
EnvironmentManager,public double getGroundPollution() { return groundPollution + fireCount * 7; },0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
EnvironmentManager,public double getNoisePollution() { return noisePollution; },0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
EnvironmentManager,public double getVisualPollution() { return visualPollution + fireCount * 5; },0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
EnvironmentManager,public double getDP() { return dengePuani; },0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
EnvironmentManager,public int getFlatAdditiveDp() { return flatAdditiveDP; },0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
EnvironmentManager,public int getPercentAdditiveDP() { return percentAdditiveDP; },0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
EnvironmentManager,"public void PollutionsMainCallback(PlacedObject_Done placedObject_Done)
{
    // change all kind of pollutions
    // will calculate and remove previous pollution effects
    changeAnyTypePollution(placedObject_Done);

    // Dp flat additive change
    ChangeDPFlat(placedObject_Done);

    // Dp perc change
    ChangePerc(placedObject_Done);

    // at the end re calculate DP
    RecalculateOnPollutionsChangedCallback();
}",0.00,0.00,4.00,1.00,,,,,,,,,,,,,,,,,,,
EnvironmentManager,"public void PollutionsMainCallbackLoadVersion(PlacedObject_Done placedObject_Done)
{
    // change all kind of pollutions
    // will calculate and remove previous pollution effects
    changeAnyTypePollution(placedObject_Done, isLoad: true);

    // Dp flat additive change
    ChangeDPFlat(placedObject_Done, isLoad: true);

    // Dp perc change
    ChangePerc(placedObject_Done, isLoad: true);

    // at the end re calculate DP
    RecalculateOnPollutionsChangedCallback();
}",0.00,0.00,4.00,1.00,,,,,,,,,,,,,,,,,,,
EnvironmentManager,"public void ChangePerc(PlacedObject_Done placedObject_Done, bool isLoad = false)
{
    string kod = placedObject_Done.getPlacedObjectTypeSO().kod;
    Root root = defaultBuildingInfos.QByKod(kod);

    if (root == null || !root.Identifiers.BuildingAttributes.Contains(""CADPP""))
    {
        return;
    }

    int level = placedObject_Done.getBuildingLevel();
    var percAdditiveDPtemp = percentAdditiveDP + root.OnFinish.DPperc[level];

    // remove previous dp perc value
    if (level > 1 && !isLoad)
    {
        percAdditiveDPtemp -= root.OnFinish.DPperc[level - 1];
    }
    percentAdditiveDP = percAdditiveDPtemp;
}",0.00,0.00,11.00,3.00,,,,,,,,,,,,,,,,,,,
EnvironmentManager,"public void ChangeDPFlat(PlacedObject_Done placedObject_Done, bool isLoad = false)
{
    string kod = placedObject_Done.getPlacedObjectTypeSO().kod;
    Root root = defaultBuildingInfos.QByKod(kod);

    if (root == null || !root.Identifiers.BuildingAttributes.Contains(""CADPF""))
    {
        return;
    }

    int level = placedObject_Done.getBuildingLevel();
    var flatAdditiveDPtemp = flatAdditiveDP + root.OnFinish.DPflat[level];

    // remove previous dp flat value
    if (level > 1 && !isLoad)
    {
        flatAdditiveDPtemp -= root.OnFinish.DPflat[level - 1];
    }
    flatAdditiveDP = flatAdditiveDPtemp;
}",0.00,0.00,11.00,2.00,,,,,,,,,,,,,,,,,,,
EnvironmentManager,"public void Change_Negligence(int value)
{
    negligence_impact += value;
    negligence_impact = Math.Clamp(negligence_impact, MAX_NEGLIGENCE_NEGATIVE, MAX_NEGLIGENCE_POSITIVE);

    RecalculateOnPollutionsChangedCallback();
}",0.00,0.00,4.00,0.50,,,,,,,,,,,,,,,,,,,
EnvironmentManager,"public int Get_Negligence()
{
    return negligence_impact;
}",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
EnvironmentManager,"public void SetNegligence_ForLoad(int value)
{
    negligence_impact = value;
}",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
EnvironmentManager,"public void changeAnyTypePollution(PlacedObject_Done placedObject_Done, bool isLoad = false)
{
    string kod = placedObject_Done.getPlacedObjectTypeSO().kod;
    Root root = defaultBuildingInfos.QByKod(kod);

    if (root == null || !root.Identifiers.BuildingAttributes.Contains(""CADP""))
    {
        return;
    }

    List<CADP> svK = root.OnFinish.CADP;

    int level = placedObject_Done.getBuildingLevel();
    CADP katki = svK[level];

    changeAnyTypePollution(katki);

    if (level > 1 && !isLoad)
    {
        ReducePreviousLevelPollution(svK[level - 1]);
    }

    RecalculateOnPollutionsChangedCallback();
}",0.00,0.00,15.00,1.50,,,,,,,,,,,,,,,,,,,
EnvironmentManager,"public void changeAnyTypePollution(CADP katki)
{
    changeAnyTypePollution(PollutionType.AirPollution, katki.AirP);
    changeAnyTypePollution(PollutionType.WaterPollution, katki.WaterP);
    changeAnyTypePollution(PollutionType.GroundPollution, katki.GroundP);
    changeAnyTypePollution(PollutionType.NoisePollution, katki.NoiseP);
    changeAnyTypePollution(PollutionType.VisualPollution, katki.VisualP);
}",0.00,0.00,5.00,0.60,,,,,,,,,,,,,,,,,,,
EnvironmentManager,"private void ReducePreviousLevelPollution(CADP katkiPrevious)
{
    changeAnyTypePollution(PollutionType.AirPollution, -katkiPrevious.AirP);
    changeAnyTypePollution(PollutionType.WaterPollution, -katkiPrevious.WaterP);
    changeAnyTypePollution(PollutionType.GroundPollution, -katkiPrevious.GroundP);
    changeAnyTypePollution(PollutionType.NoisePollution, -katkiPrevious.NoiseP);
    changeAnyTypePollution(PollutionType.VisualPollution, -katkiPrevious.VisualP);
}",0.00,0.00,5.00,0.60,,,,,,,,,,,,,,,,,,,
EnvironmentManager,"public void changeAnyTypePollution(PollutionType pollutionType, double? amountN)
{
    if (amountN == null) { return; }
    int amount = (int)amountN;
    switch (pollutionType)
    {
        case PollutionType.AirPollution:
            airPollution += amount;
            break;
        case PollutionType.WaterPollution:
            waterPollution += amount;
            break;
        case PollutionType.GroundPollution:
            groundPollution += amount;
            break;
        case PollutionType.NoisePollution:
            noisePollution += amount;
            break;
        case PollutionType.VisualPollution:
            visualPollution += amount;
            break;
    }
}",0.00,0.00,5.00,0.30,,,,,,,,,,,,,,,,,,,
EnvironmentManager,"public void OnFireStartChangePollutions()
{
    airPollution += 15;
    waterPollution += 10;
    groundPollution += 7;
    visualPollution += 5;
}",0.00,0.00,4.00,0.10,,,,,,,,,,,,,,,,,,,
EnvironmentManager,"public void OnFireEndChangePollutions()
{
    airPollution -= 15;
    waterPollution -= 10;
    groundPollution -= 7;
    visualPollution -= 5;
}",0.00,0.00,4.00,0.10,,,,,,,,,,,,,,,,,,,
EnvironmentManager,"private IEnumerator CheckAllFiresCountAndDetermineBpAddition()
{
    yield return new WaitForSeconds(5.55f);

    while (true)
    {
        var plcdList = _buildingManager.GetBuildingsList();

        var _fireCount = 0;
        foreach (var plcd in plcdList)
        {
            if (plcd.GetPlcdBuildingStateInformation().buildingFireState == Assets.Models.BuildingFireState.OnFire) fireCount++;
        }
        fireCount = _fireCount; 

        yield return new WaitForSeconds(13.17f);
    }
}",0.00,0.00,6.00,1.00,,,,,,,,,,,,,,,,,,,
IsolatedSimulator,"private void Awake()
{
    if (Instance == null)
    {
        Instance = this;
    }
    else if (Instance != this)
    {
        Destroy(gameObject);
    }
}",0.00,0.00,3.00,0.01,,,,,,,,,,,,,,,,,,,
IsolatedSimulator,"void Start()
{
    environment = EnvironmentManager.Instance;
    rawResource = RawResource.Instance;
    population = Population.Instance;
    utilities = Utilities.Instance;
    technologyManager = TechnologyManager.Instance;
    buildingsManager = BuildingsManager.Instance;
    seedManager = SeedResource.Instance;
    marketplace = Marketplace.Instance;
    buildingInfo = BuildingInfo.Instance;
    notificationManagerGeneralized = NotificationManagerGeneralized.Instance;
    saveManager = SaveManager.Instance;
    playerAuthManager = PlayerAuthManager.Instance;
    customTimeManager = CustomTimeManager.Instance;
    //InstantiateIsolatedGameModel();
}",0.00,0.00,13.00,0.10,,,,,,,,,,,,,,,,,,,
IsolatedSimulator,"private void BuildingUpgradeCheckFinishMainLoop(IsolatedGameVariablesModel model, int simulatedTickInSeconds)
{
    foreach (var building in model.isoBuildings)
    {
        // check  if building isUnderConstruction
        var buildingInfo = building.upgrade;
        if (!buildingInfo.IsUnderUpgrade) continue;

        // check if upgrade done
        if (buildingInfo.remainingTime < 0)
        {
            // upgrade done
            buildingInfo.IsUnderUpgrade = false;
            building.lvl++;

            // NOTIFICATION
            notificationManagerGeneralized.ScheduleLocalNotification(NotificationGroupTypeEnum.buildingUpdate, ""Building Update"", ""Building construction finished!"", """", """", """", simulatedTickInSeconds);
        }
        else
        {
            buildingInfo.remainingTime -= ISOLATED_SIMULATE_TICK_SECONDS;
        }
    }
}",0.00,0.00,10.00,3.50,,,,,,,,,,,,,,,,,,,
IsolatedSimulator,"private void SetAllIsNotificationSwitchesToFalse()
{
    isElectricInStrgNotificationSend = false;
    isWaterInStrgNotificationSend = false;
    isInsufficientFoodNotificationSend = false;
    is_FACTORYCEMENT_NotificationSend = false;
    is_FACTORYELECTRONIC_NotificationSend = false;
    is_FACTORYMECH_NotificationSend = false;
    is_FACTORYCHEM_NotificationSend = false;

}",0.00,0.00,8.00,0.20,,,,,,,,,,,,,,,,,,,
LanguageManager,"private void Awake()
{
    if (Instance == null)
    {
        Instance = this;
    }
    else if (Instance != this)
    {
        Destroy(gameObject);
    }
}",0.00,0.00,3.00,0.01,,,,,,,,,,,,,,,,,,,
LanguageManager,"IEnumerator Start()
{
    // Wait for the localization system to initialize
    yield return LocalizationSettings.InitializationOperation;

    // Generate list of available Locales
    var options = new List<TMP_Dropdown.OptionData>();
    int selected = 0;
    for (int i = 0; i < LocalizationSettings.AvailableLocales.Locales.Count; ++i)
    {
        var locale = LocalizationSettings.AvailableLocales.Locales[i];
        if (LocalizationSettings.SelectedLocale == locale)
            selected = i;
        options.Add(new TMP_Dropdown.OptionData(locale.name));
    }
    dropdown.options = options;

    dropdown.value = selected;
    dropdown.onValueChanged.AddListener(LocaleSelected);

    LocalizationSettings.SelectedLocaleChanged += OnLocaleChangedEvent;
}",0.00,0.00,15.00,1.50,,,,,,,,,,,,,,,,,,,
LanguageManager,"static void LocaleSelected(int index)
{
    LocalizationSettings.SelectedLocale = LocalizationSettings.AvailableLocales.Locales[index];
}",0.00,0.00,1.00,0.10,,,,,,,,,,,,,,,,,,,
LanguageManager,"private void OnLocaleChangedEvent(Locale newLocale)
{
    Debug.Log(""local changed EVENT fired"");
    Debug.Log(LocalizationSettings.SelectedLocale.LocaleName);
}",0.00,0.00,2.00,0.01,,,,,,,,,,,,,,,,,,,
Leader,"private void Awake()
{
    if (Instance == null)
    {
        Instance = this;
    }
    else if (Instance != this)
    {
        Destroy(gameObject);
    }

    buildingInfo = BuildingInfo.Instance;
    leaderLevelInfo = LeaderLevelInfo.Instance;
    resourceManager = RawResource.Instance;
}",0.00,0.00,6.00,0.02,,,,,,,,,,,,,,,,,,,
Leader,"private void Start()
{
    leaderInfoList = leaderLevelInfo.GetLeaderLevelInfo();
}",0.00,0.00,2.00,0.01,,,,,,,,,,,,,,,,,,,
Leader,"public void AddExpToLeader(PlacedObject_Done plc)
{
    var root = buildingInfo.QByKod(plc.getPlacedObjectTypeSO().kod);
    if (root == null) { return; }

    var buildingLvl = plc.getBuildingLevel();
    var expAmount = root.OnFinish.BEXP;
    if (expAmount.Count < buildingLvl) { return; }
    AddExpToLeader(root.OnFinish.BEXP[buildingLvl]);
}",0.00,0.00,11.00,0.50,,,,,,,,,,,,,,,,,,,
Leader,"public void AddExpToLeader(int exp)
{
    LeaderExp += exp;
    var newLeaderLvl = GetLeaderLevel();
    if (LeaderLvl < newLeaderLvl)
    {
        LeaderLvl = newLeaderLvl;

        inGameNotificationManager.AddInGameNotification($""Leader level increased!"");

        //resourceManager.AddRawResourcesOnLeaderLevelUp_BypassCapacity(leaderInfoList[LeaderLvl].bonus);
        StartCoroutine(resourceManager.AddResourcesOnLeaderLevelUp());

        // all resources added successfully
        inGameNotificationManager.AddInGameNotification($""Leader level-up gifts added."");

        //else
        //{
        //    // at least one resource wasted
        //    inGameNotificationManager.AddInGameNotification($""Some leader level bonuses wasted because you dont have enough storage"");
        //}
    }
}",0.00,0.00,11.00,1.00,,,,,,,,,,,,,,,,,,,
Leader,public int GetLeaderExp() { return LeaderExp; },0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
Leader,"public int GetLeaderLevel()
{
    var lvl = 0;
    foreach (var ld in leaderInfoList)
    {
        if (ld.reqExp <= LeaderExp)
        {
            if (lvl < ld.lvl)
                lvl = ld.lvl;
        }
        else
        {
            break;
        }
    }
    return lvl;
}",0.00,0.00,5.00,1.50,,,,,,,,,,,,,,,,,,,
Leader,"public bool CheckBuildingLeaderReqOk(PlacedObjectTypeSO plcdSO, int lvl)
{
    var root = buildingInfo.QByKod(plcdSO.kod);
    var handSetValues = root.OnInit.OnInitHandSetValues;
    if (handSetValues == null || handSetValues.Count < lvl +1)
    {
        return true;
    }
    var reqL = handSetValues[lvl].REQL;
    return GetLeaderLevel() >= reqL;
}",0.00,0.00,7.00,0.50,,,,,,,,,,,,,,,,,,,
Leader,"public bool CheckTechLeaderReqOk(int lvlRequired)
{
    return GetLeaderLevel() >= lvlRequired;
}",0.00,0.00,3.00,0.20,,,,,,,,,,,,,,,,,,,
Leader,"public int GetNextXpRequired()
{
    return leaderInfoList[GetLeaderLevel() + 1].reqExp;
}",0.00,0.00,2.00,0.10,,,,,,,,,,,,,,,,,,,
Leader,"public int GetCurrentMinimumXpRequired()
{
    return leaderInfoList[GetLeaderLevel()].reqExp;
}",0.00,0.00,2.00,0.10,,,,,,,,,,,,,,,,,,,
Leader,"public void SetLeaderExpForLoad(int exp)
{
    LeaderExp = exp;
}",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
LeaderboardManager,"private void Awake()
{
    DontDestroyOnLoad(this);

    if (Instance == null)
    {
        Instance = this;
    }
    else if (Instance != this)
    {
        Destroy(gameObject);
    }
}",0.00,0.00,4.00,0.10,,,,,,,,,,,,,,,,,,,
LeaderboardManager,"void Start()
{
    environmentManager = EnvironmentManager.Instance;
    playerAuthManager = PlayerAuthManager.Instance;
    leaderManager = Leader.Instance;

    LoadFromSave();

    StartCoroutine(GetMyAllTimeRank());
    OpenDisplayRankInfoInUi();

    InitLeaderboardViewHolder();

    GetyLeaderboardScoresMain();

    StartCoroutine(GetGlobalLeaderboardUpdateC());
}",0.00,0.00,11.00,0.04,,,,,,,,,,,,,,,,,,,
LeaderboardManager,"public void LoadFromSave()
{
    try
    {
        // check if there are local save
        // if there are init from save
        if (System.IO.File.Exists(Application.persistentDataPath + ""/userLeaderboard.json""))
        {
            var text = System.IO.File.ReadAllText(Application.persistentDataPath + ""/userLeaderboard.json"", encoding: Encoding.UTF8);
            var leaderboardDataRestored = JsonConvert.DeserializeObject<SelfUserLeaderboardValues>(text);
            userSelfScoreValues = leaderboardDataRestored;
        }
        else
        {
            // else
            // first init from zero here otherwise 
            userSelfScoreValues = new(true);
        }
    }
    catch (Exception e)
    {
        // Todo
    }
}",0.00,0.00,8.00,2.00,,,,,,,,,,,,,,,,,,,
LeaderboardManager,"public void GetyLeaderboardScoresMain()
{
    StartCoroutine(GetLeaderBoardScoresCoroutine());
}",0.00,0.00,2.00,0.10,,,,,,,,,,,,,,,,,,,
LeaderboardManager,"public IEnumerator GetLeaderBoardScoresCoroutine()
{
    //Debug.Log(""GetLeaderBoardScoresCoroutine START "");
    var APIURI = playerAuthManager.GetAPIURI();
    var APICONTROLLERUSERGAMESAVE = playerAuthManager.GetAPICONTROLLERUSERGAMESAVE();
    var email = playerAuthManager.GetUserEmail();
    var bearerToken = playerAuthManager.GetBearerToken();

    var uwr = new UnityWebRequest(APIURI + APICONTROLLERUSERGAMESAVE + ""GetLeaderboardScores?email="" + email, ""GET"");
    uwr.SetRequestHeader(""Content-Type"", ""application/json"");
    uwr.SetRequestHeader(""Authorization"", ""Bearer "" + bearerToken);

    uwr.downloadHandler = new DownloadHandlerBuffer();

    yield return uwr.SendWebRequest();

    if (uwr.responseCode != 200)
    {
        // error
        //Debug.Log(""GetLeaderBoardScoresCoroutine ERROR "");
        yield return false;
    }
    else
    {
        // no error
        var respObject = JsonConvert.DeserializeObject<LeaderboardGlobalRanksInfoDto>(uwr.downloadHandler.text);
        //Debug.Log(""GetLeaderBoardScoresCoroutine NO ERROR "");

        gloabalLeaderboardRankData = respObject;
        yield return true;
    }
}",0.00,1.00,16.00,1.00,,,,,,,,,,,,,,,,,,,
LeaderboardManager,"public void GetMyAllTimeRankMain()
{
    StartCoroutine(GetMyAllTimeRank());
}",0.00,0.00,2.00,0.01,,,,,,,,,,,,,,,,,,,
LeaderboardManager,"public void OpenDisplayRankInfoInUi()
{
    if (!uiLeaderboardHolder.gameObject.activeSelf)
    {
        uiLeaderboardHolder.gameObject.SetActive(true);
    }
}",0.00,0.00,3.00,0.02,,,,,,,,,,,,,,,,,,,
LeaderboardManager,"public void CloseLeaderboardViewHolder()
{
    //leaderboard_view_holder.gameObject.SetActive(false);
    UIBoxAnimate.UI_Anim_OnClose(leaderboard_view_holder);
}",2.00,0.00,1.00,0.10,,,,,,,,,,,,,,,,,,,
LeaderboardManager,"private void SaveScoreToLocal()
{
    var js = JsonConvert.SerializeObject(this);

    System.IO.File.WriteAllText(Application.persistentDataPath + ""/userLeaderboard.json"", js, encoding: Encoding.UTF8);
}",0.00,0.00,3.00,0.10,,,,,,,,,,,,,,,,,,,
LeaderboardManager,"private void SaveLeaderboardToApi()
{
    updateAmountWaiting = 0;
    lastUtctimeApiScoreUpdated = CustomTimeManager.Instance.GetRealUtcTime();
    OnlySaveLeaderboardToApi();
}",0.00,0.00,4.00,0.10,,,,,,,,,,,,,,,,,,,
LeaderboardManager,"private void OnlySaveLeaderboardToApi()
{
    LeaderboarSendScoresDto dto = new()
    {
        AllTimeScore = allTimeScore,
        AllTimeScore_WithBpEffect = allTimeScore_withBPeffect,
        WeeklyScore = weeklyScore,
        DailyScore = dailyScore,
        LeaderLvl = Leader.Instance.GetLeaderLevel(),
    };

    PlayerAuthManager.Instance.SaveLeaderboardScoresToApiWrapper(dto);
}",0.00,0.00,4.00,0.10,,,,,,,,,,,,,,,,,,,
LeaderboardManager,"private int ApplyBpEffect(int totalScore, int bp)
{
    var sign_of_bp = bp < 0 ? -1 : 1;
    var bp_clamped = Mathf.Clamp(bp, -100.0f, 100.0f);
    var bp_perc = (int)((totalScore * bp_clamped) / 100.0f);
    return sign_of_bp * bp_perc;
}",0.00,0.00,6.00,1.00,,,,,,,,,,,,,,,,,,,
LeaderboardManager,public int GetAllTimeWithBp() { return allTimeScore_withBPeffect; },0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
LeaderboardManager,public int GetWeekly() { return weeklyScore; },0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
LeaderboardManager,public int Getdaily() { return dailyScore; },0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
LeaderboardManager,public SelfUserLeaderboardValues GetSelfUserLeaderboardValues() { return userSelfScoreValues; },0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
LeaderboardManager,"public void ChangeUILeaderboardType(int i)
{
    ReduceAllTypeOpacityMenuItems();
    switch (i)
    {
        case 0:
            uiLeaderboardType = UISelectedLeaderboardViewType.AllTime; allTimeMenuImage.color = new Color(allTimeMenuImage.color.r, allTimeMenuImage.color.g, allTimeMenuImage.color.b, 1); break;
        case 1:
            uiLeaderboardType = UISelectedLeaderboardViewType.Weekly; weeklyMenuImage.color = new Color(weeklyMenuImage.color.r, weeklyMenuImage.color.g, weeklyMenuImage.color.b, 1); break;
        case 2:
            uiLeaderboardType = UISelectedLeaderboardViewType.Daily; dailyMenuImage.color = new Color(dailyMenuImage.color.r, dailyMenuImage.color.g, dailyMenuImage.color.b, 1); break;
    }
    OpenLeaderboardViewHolder();
}",2.00,0.00,4.00,1.00,,,,,,,,,,,,,,,,,,,
LeaderboardManager,"private void ReduceAllTypeOpacityMenuItems()
{
    allTimeMenuImage.color = new Color(allTimeMenuImage.color.r, allTimeMenuImage.color.g, allTimeMenuImage.color.b, 0.65f);
    weeklyMenuImage.color = new Color(weeklyMenuImage.color.r, weeklyMenuImage.color.g, weeklyMenuImage.color.b, 0.65f);
    dailyMenuImage.color = new Color(dailyMenuImage.color.r, dailyMenuImage.color.g, dailyMenuImage.color.b, 0.65f);
}",0.00,0.00,3.00,0.10,,,,,,,,,,,,,,,,,,,
LeaderboardManager,"public IEnumerator GetGlobalLeaderboardUpdateC()
{
    while (true)
    {
        yield return new WaitForSeconds(360);

        try
        {
        StartCoroutine(GetLeaderBoardScoresCoroutine());
        }
        catch (Exception e)
        {
            // TODO
        }
    }
}",0.00,0.00,2.00,0.50,,,,,,,,,,,,,,,,,,,
Marketplace,"private void Awake()
{
    if (Instance == null)
    {
        Instance = this;
    }
    else if (Instance != this)
    {
        Destroy(gameObject);
    }
}",0.00,0.00,3.00,0.01,,,,,,,,,,,,,,,,,,,
Marketplace,"private void Start()
{
    dayOfLastDailyPrePckgAdditionInfo = CustomTimeManager.Instance.GetRealUtcTime().DayOfWeek;
}",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
Marketplace,"public bool ActivatePrePackage(premiumPackageTypes typeToActivate)
{
    if (!CheckIfPackageActive(typeToActivate))
    {
        // package is currently not active
        ActivePrePackage pckg = new()
        {
            type = typeToActivate,
            remainingTime = PREMIUM_PACKAGE_DURATION_IN_SECONDS
        };
        activePrePackages.Add(pckg);
    }
    else
    {
        return false;
    }

    //Debug.Log(typeToActivate);
    switch (typeToActivate)
    {
        case premiumPackageTypes.A:
            ActivatePackageA();
            break;
        case premiumPackageTypes.B:
            ActivatePackageB();
            break;
        case premiumPackageTypes.C:
            ActivatePackageC();
            break;
    }
    return true;
}",0.00,0.00,11.00,0.50,,,,,,,,,,,,,,,,,,,
Marketplace,"public bool CheckIfPackageActive(premiumPackageTypes typeToCheck)
{
    foreach (var package in activePrePackages)
    {
        if (package.type == typeToCheck) return true;
    }
    return false;
}",0.00,0.00,4.00,0.10,,,,,,,,,,,,,,,,,,,
Marketplace,"private void ActivatePackageA()
{
    var rr = RawResource.Instance;
    rr.increaseYp_BypassCapacity(70000);

    Add_ModularPackage_PremiumSeedPackage(5);
    Add_ModularPackage_PremiumConstructionSpeedupPackage(5);
    Add_ModularPackage_PremiumRawResourcePackage(5);
}",0.00,0.00,6.00,0.20,,,,,,,,,,,,,,,,,,,
Marketplace,"private void ActivatePackageB()
{
    var rr = RawResource.Instance;
    rr.increaseYp_BypassCapacity(140000);

    var leader = Leader.Instance;
    var currentExp = leader.GetLeaderExp();
    leader.AddExpToLeader(currentExp * 2 / 10);

    Add_ModularPackage_PremiumSeedPackage(12);
    Add_ModularPackage_PremiumConstructionSpeedupPackage(12);
    Add_ModularPackage_PremiumRawResourcePackage(12);
}",0.00,0.00,8.00,0.20,,,,,,,,,,,,,,,,,,,
Marketplace,"private void ActivatePackageC()
{
    var rr = RawResource.Instance;
    rr.increaseYp_BypassCapacity(250000);

    var leader = Leader.Instance;
    var currentExp = leader.GetLeaderExp();
    leader.AddExpToLeader(currentExp * 3 / 10);

    Add_ModularPackage_PremiumSeedPackage(25);
    Add_ModularPackage_PremiumConstructionSpeedupPackage(25);
    Add_ModularPackage_PremiumRawResourcePackage(25);
}",0.00,0.00,8.00,0.20,,,,,,,,,,,,,,,,,,,
Marketplace,"public int ForEachPrePackageDailyAddition()
{
    // returns amount of yp added

    var amount = 0;
    foreach (var pck in activePrePackages)
    {
        var rr = RawResource.Instance;
        var typeToActivate = pck.type;
        switch (typeToActivate)
        {
            case premiumPackageTypes.A:
                rr.increaseYp_BypassCapacity(70000);
                amount += 70000;
                break;
            case premiumPackageTypes.B:
                rr.increaseYp_BypassCapacity(140000);
                amount += 140000;
                break;
            case premiumPackageTypes.C:
                rr.increaseYp_BypassCapacity(250000);
                amount += 250000;
                break;
        }
    }
    return amount;
}",0.00,0.00,8.00,0.50,,,,,,,,,,,,,,,,,,,
Marketplace,"public void Add_ModularPackage_PremiumSeedPackage(int amount)
{
    premiumItemsHolder.package_pre_seed += amount;
}",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
Marketplace,"public void Add_ModularPackage_PremiumRawResourcePackage(int amount)
{
    premiumItemsHolder.package_raw_resource += amount;
}",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
Marketplace,"public void Add_ModularPackage_PremiumConstructionSpeedupPackage(int amount)
{
    premiumItemsHolder.package_construction_speedup += amount;
}",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
Marketplace,"public bool Open_ModularPackage_PremiumSeedPackage(int amount)
{
    // per amount
    // add 30x normal seed
    // add 2x pre seed

    if (premiumItemsHolder.package_pre_seed >= amount)
    {
        var seedManager = SeedResource.Instance;
        seedManager.increaseRegularSeedAmount(amount * 30);
        seedManager.increasePremiumSeedAmount(amount * 2);
        premiumItemsHolder.package_pre_seed -= amount;
        return true;
    }
    return false;

}",0.00,0.00,8.00,0.03,,,,,,,,,,,,,,,,,,,
Marketplace,"public bool Open_ModularPackage_PremiumRawResourcePackage(int amount)
{
    // per amount
    // add 150.000x (cement, wire, mech part, chemical)
    // add 10x normal seed

    if (premiumItemsHolder.package_raw_resource >= amount)
    {
        var rr = RawResource.Instance;

        rr.FullResourcesOnOpenPremiumRawResourcePackage();

        var seedManager = SeedResource.Instance;
        seedManager.increaseRegularSeedAmount(amount * 10);

        premiumItemsHolder.package_raw_resource -= amount;
        return true;
    }
    return false;
}",0.00,0.00,7.00,0.02,,,,,,,,,,,,,,,,,,,
Marketplace,"public bool Open_ModularPackage_PremiumConstructionSpeedupPackage(int amount)
{
    // per amount
    // add 5x 1_hour_speedup
    // add 2x 8_hour_speedup
    // add 1x 16_hour_speedup
    // add 1x 24_hour_speedup

    if (premiumItemsHolder.package_construction_speedup >= amount)
    {
        premiumItemsHolder.construction_speedup_1_hour += amount * 5;
        premiumItemsHolder.construction_speedup_8_hour += amount * 2;
        premiumItemsHolder.construction_speedup_16_hour += amount * 1;
        premiumItemsHolder.construction_speedup_24_hour += amount * 1;

        premiumItemsHolder.package_construction_speedup -= amount;
        return true;
    }
    return false;
}",0.00,0.00,7.00,0.20,,,,,,,,,,,,,,,,,,,
Marketplace,"public premiumPackageTypes GetPremiumPackageTypeFromString(string typeString)
{
    switch (typeString)
    {
        case ""A"":
            return premiumPackageTypes.A;
        case ""B"":
            return premiumPackageTypes.B;
        case ""C"":
            return premiumPackageTypes.C;
    }
    return premiumPackageTypes.A;
}",0.00,0.00,3.00,0.02,,,,,,,,,,,,,,,,,,,
Marketplace,"public bool TryUseSeedFromHolder()
{
    if (premiumItemsHolder.normalSeed < 1)
    {
        return false;
    }
    else
    {
        premiumItemsHolder.normalSeed--;
        return true;
    }
}",2.00,0.00,3.00,0.40,,,,,,,,,,,,,,,,,,,
Marketplace,"public bool TryUseSeedFromInventory_Multiple(int amount)
{
    if (premiumItemsHolder.normalSeed < amount)
    {
        return false;
    }
    else
    {
        premiumItemsHolder.normalSeed -= amount;
        return true;
    }
}",2.00,0.00,3.00,0.40,,,,,,,,,,,,,,,,,,,
Marketplace,"public bool TryUseFoodFromHolder()
{
    if (premiumItemsHolder.food < 1)
    {
        return false;
    }
    else
    {
        premiumItemsHolder.food--;
        return true;
    }
}",2.00,0.00,3.00,0.40,,,,,,,,,,,,,,,,,,,
Marketplace,"public bool TryUseFoodFromInventory_Multiple(int amount)
{
    if (premiumItemsHolder.food < amount)
    {
        return false;
    }
    else
    {
        premiumItemsHolder.food -= amount;
        return true;
    }
}",2.00,0.00,3.00,0.40,,,,,,,,,,,,,,,,,,,
Marketplace,"public void TryUseFoodFromHolder_CHARGEBACK()
{
    premiumItemsHolder.food++;
}",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
Marketplace,"public void TryUseFoodFromHolder_CHARGEBACK_Multiple(int amount)
{
    premiumItemsHolder.food += amount;
}",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
Marketplace,"public int OnFarmCollectAddToSeedAndFoodToHolder(PlacedObject_Done plcd)
{
    bool isPre = plcd.GetPlcdFarmTileDetails().isPreSeed;
    var amountAddedFood = 0;

    if (isPre)
    {
        amountAddedFood = 15;
        premiumItemsHolder.normalSeed += 5;
        premiumItemsHolder.food += amountAddedFood;
    }
    else
    {
        amountAddedFood = 5;
        premiumItemsHolder.normalSeed += 1;
        premiumItemsHolder.food += 5;
    }
    return amountAddedFood;
}",0.00,0.00,11.00,0.80,,,,,,,,,,,,,,,,,,,
Marketplace,"public bool IsThereAnyConstructionSpeedupAvailable()
{
    if (premiumItemsHolder.construction_speedup_1_hour > 0) return true;
    if (premiumItemsHolder.construction_speedup_8_hour > 0) return true;
    if (premiumItemsHolder.construction_speedup_16_hour > 0) return true;
    if (premiumItemsHolder.construction_speedup_24_hour > 0) return true;

    return false;
}",0.00,0.00,5.00,0.10,,,,,,,,,,,,,,,,,,,
Marketplace,"public int GetAllActivePremiumPckgRawResourceBoost()
{
    var amount = 0;
    foreach (var pckg in activePrePackages)
    {
        if (pckg.type == premiumPackageTypes.A) { amount += 5; }
        if (pckg.type == premiumPackageTypes.B) { amount += 7; }
        if (pckg.type == premiumPackageTypes.C) { amount += 10; }
    }
    return amount;
}",0.00,0.00,7.00,0.20,,,,,,,,,,,,,,,,,,,
Marketplace,"public int GetAllActivePremiumPckgAndModularConstructionBoost()
{
    var amount = 0;
    foreach (var pckg in activePrePackages)
    {
        if (pckg.type == premiumPackageTypes.A) { amount += 5; }
        if (pckg.type == premiumPackageTypes.B) { amount += 7; }
        if (pckg.type == premiumPackageTypes.C) { amount += 10; }
    }
    return amount;
}",0.00,0.00,7.00,0.20,,,,,,,,,,,,,,,,,,,
NegligenceManager,"private void Awake()
{
    if (Instance == null)
    {
        Instance = this;
    }
    else if (Instance != this)
    {
        Destroy(gameObject);
    }
}",0.00,0.00,3.00,0.01,,,,,,,,,,,,,,,,,,,
NegligenceManager,"private void Start()
{
    buildingsManager = BuildingsManager.Instance;
    environmentalNegligenceInfo = EnvironmentalNegligenceInfo.Instance;
    defaultBuildingInfo = BuildingInfo.Instance;
    environmentManager = EnvironmentManager.Instance;
    resourceManager = RawResource.Instance;
    guidedTutorialManager = GuidedTutorialManager.Instance;
    saveManager = SaveManager.Instance;
    playerAuthManager = PlayerAuthManager.Instance;

    StartCoroutine(CitizenNegligenceCheckMainLoop());
}",0.00,0.00,10.00,0.02,,,,,,,,,,,,,,,,,,,
NegligenceManager,"public void DisplayNegligence()
{
    negligenceHolder.gameObject.SetActive(true);
}",0.00,0.00,2.00,0.01,,,,,,,,,,,,,,,,,,,
NegligenceManager,"public void OnIgnoreButtonClicked()
{
    try
    {
        environmentManager.Change_Negligence(currentDisplayingNegligence.negligence_ignore);
        CloseNegligence();

        saveManager.SaveStartMainCallback();
    }
    catch (Exception ex)
    {
        if (isApiReportingEnabled)
        {
            OnExceptionDto dto = new(lastLocalSave: saveManager.GetLocalLastSave(), whereExceptionThrownScriptName: ""NegligenceManager"", whereExceptionThrownFunctionName: ""OnIgnoreButtonClicked"", exceptionMessage: ex.Message);

            StartCoroutine(playerAuthManager.SaveExceptionToServer(dto));
            StartCoroutine(DisableApiExceptionReporting());
        }

        CloseNegligence();
    }
}",2.00,0.00,11.00,0.50,,,,,,,,,,,,,,,,,,,
NegligenceManager,"public void OnTakeActionButtonClicked()
{
    try
    {
        if (resourceManager.TryConsumeYP(currentDisplayingNegligence.intervention_cost))
        {
            environmentManager.Change_Negligence(currentDisplayingNegligence.negligence_warn);
        }
        CloseNegligence();

        saveManager.SaveStartMainCallback();
    }
    catch (Exception ex)
    {
        if (isApiReportingEnabled)
        {
            OnExceptionDto dto = new(lastLocalSave: saveManager.GetLocalLastSave(), whereExceptionThrownScriptName: ""NegligenceManager"", whereExceptionThrownFunctionName: ""OnTakeActionButtonClicked"", exceptionMessage: ex.Message);

            StartCoroutine(playerAuthManager.SaveExceptionToServer(dto));
            StartCoroutine(DisableApiExceptionReporting());
        }

        CloseNegligence();
    }
}",2.00,0.00,13.00,0.50,,,,,,,,,,,,,,,,,,,
NegligenceManager,"public void CloseNegligence()
{
    negligenceHolder.gameObject.SetActive(false);
}",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
NegligenceManager,"private IEnumerator CitizenNegligenceCheckMainLoop()
{
    // guided tutorial check
    // does not start while guided tutorial is ongoing
    while (guidedTutorialManager.GetIsTutorialOngoing())
    {
        yield return new WaitForSeconds(13.0f);
    }

    // at start
    yield return new WaitForSeconds(1.5f * 60.0f);
    DetermineNegligenceTypeAndFindBuilding_Display();

    // else other normal check
    while (true)
    {
        var rand = UnityEngine.Random.Range(-25, 45);
        yield return new WaitForSeconds((3 * 60.0f) + rand);

        DetermineNegligenceTypeAndFindBuilding_Display();
    }
}",0.00,0.00,6.00,0.60,,,,,,,,,,,,,,,,,,,
NegligenceManager,"private IEnumerator DisableApiExceptionReporting()
{
    yield return new WaitForSeconds(5);

    isApiReportingEnabled = false;
}",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
NegligenceManager,"public string GetCorrectLangugeString_GetCorrectLevelText()
{
    var currentLocaleCode = LocalizationSettings.SelectedLocale.Identifier.Code;

    switch (currentLocaleCode)
    {
        // LANGUAGE
        case ""en"": return ""Level"";
        case ""zh"": return ""等级"";
        case ""fr"": return ""Niveau"";
        case ""de"": return ""Ebene"";
        case ""ru"": return ""уровень"";
        case ""es"": return ""Nivel"";
        case ""tr"": return ""Seviye"";

        default: return ""Level"";
    };
}",0.00,0.00,2.00,0.10,,,,,,,,,,,,,,,,,,,
PlayerGameSettings,"private void Awake()
{
    if (Instance == null)
    {
        Instance = this;
    }
    else if (Instance != this)
    {
        Destroy(gameObject);
    }
}",0.00,0.00,3.00,0.01,,,,,,,,,,,,,,,,,,,
PlayerGameSettings,"    private void Start()
    {
        LoadSettingsOnStart();

#if UNITY_EDITOR
#else
        Application.targetFrameRate = 30;
#endif
    }",0.00,0.00,3.00,0.10,,,,,,,,,,,,,,,,,,,
PlayerGameSettings,"public bool CheckIsSettingsLoaded()
{
    return _isSettingsLoaded;
}",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
PlayerGameSettings,"public Dictionary<string, bool> GetAllSettings()
{
    return new()
    {
        {""_music"", _music},
        {""_shadow"", _shadow},
        {""_camTilt"", _camTilt},
        {""_lessNotifications"", _lessNotifications},
        {""_quality"", _quality}
    };
}",0.00,0.00,1.00,0.10,,,,,,,,,,,,,,,,,,,
PlayerGameSettings,"private void SaveToLocalAfterSettingCahnge()
{
    Dictionary<string, bool> dict = new()
    {
        {""_music"", _music},
        {""_shadow"", _shadow},
        {""_camTilt"", _camTilt},
        {""_lessNotifications"", _lessNotifications},
        {""_quality"", _quality}
    };

    var jsonStr = JsonConvert.SerializeObject(dict);
    System.IO.File.WriteAllText(Application.persistentDataPath + ""/settings.json"", jsonStr, encoding: Encoding.UTF8);
}",0.00,0.00,5.00,0.50,,,,,,,,,,,,,,,,,,,
PlayerGameSettings,"public bool GetCameraTilt()
{
    return _camTilt;
}",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
PlayerGameSettings,"public bool GetLessNotifications()
{
    return _lessNotifications;
}",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
Population,"private void Awake()
{
    if (Instance == null)
    {
        Instance = this;
    }
    else if (Instance != this)
    {
        Destroy(gameObject);
    }

    buildingInfo = BuildingInfo.Instance;
    buildingsManager = BuildingsManager.Instance;

}",0.00,0.00,4.00,0.01,,,,,,,,,,,,,,,,,,,
Population,"void Start()
{
    currentPopCap = 0;
    percentIncrease = 0;
    valueIncrease = 0;
    //StartCoroutine(CalculatePopulationMainLoop());
    //StartCoroutine(CalculatePopCapMainLoop());
}",0.00,0.00,2.00,0.02,,,,,,,,,,,,,,,,,,,
Population,"public int GetCurrentPop()
{
    return currentPop;
}",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
Population,"public int GetCurrentVisualPopCap()
{
    return currentVisualVersionPopCap;
}",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
Population,"public int GetCurrentPopCap()
{
    return currentPopCap;
}",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
Population,"public int GetPercentIncrease()
{
    return percentIncrease;
}",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
Population,"public int GetValueIncrease()
{
    return valueIncrease;
}",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
Population,public void SetPop(int pop) { currentPop = pop; },0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
Population,public void SetPopCap(int popCap) { currentPopCap = popCap; },0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
Population,public void SetVisualPopCap(int visualPopCap) { currentVisualVersionPopCap = visualPopCap; },0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
Population,"IEnumerator CalculatePopulationMainLoop()
{
    while (true)
    {
        var placedObject_Dones = buildingsManager.GetBuildingsList();
        var tempPopToChange = 0;
        foreach (var building in placedObject_Dones)
        {
            var code = building.getPlacedObjectTypeSO().kod;
            Root root = buildingInfo.QByKod(code);
            if (root == null) { continue; }

            // check if building bring people to town
            var list = root.OnFinish.PP;
            var listCount = list.Count;
            if (list == null) { continue; }

            var buildingLvl = building.getBuildingLevel();
            if (listCount < buildingLvl) { continue; }
            tempPopToChange += list[buildingLvl];
        }
        currentPop = tempPopToChange;
        yield return new WaitForSeconds(5.7f);
    }
}",0.00,0.00,13.00,2.00,,,,,,,,,,,,,,,,,,,
RawResource,"private void Awake()
{
    if (Instance == null)
    {
        Instance = this;
    }
    else if (Instance != this)
    {
        Destroy(gameObject);
    }
}",0.00,0.00,2.00,0.01,,,,,,,,,,,,,,,,,,,
RawResource,"private void Start()
{
    environment = EnvironmentManager.Instance;
    buildingInfo = BuildingInfo.Instance;
    marketplace = Marketplace.Instance;
    displayError = DisplayError.Instance;
    saveManager = SaveManager.Instance;
}",0.00,0.00,5.00,0.01,,,,,,,,,,,,,,,,,,,
RawResource,public double getYp() { return yp; },0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
RawResource,public double getYpCap() { return ypCap; },0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
RawResource,"public bool increaseYp(double amount)
{
    if (yp + amount <= ypCap)
    {
        yp += amount;
        return true;
    }
    else
    {
        if (yp < ypCap)
        {
            yp = ypCap;
        }
        return false;
    }
}",0.00,0.00,3.00,0.02,,,,,,,,,,,,,,,,,,,
RawResource,public void increaseYp_BypassCapacity(double amount) { yp += amount; },0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
RawResource,"public bool decreaseYp(double amount)
{
    if (checkDecreasePossible(yp, amount))
    {
        yp -= amount;
        return true;
    }
    return false;
}",0.00,0.00,3.00,0.02,,,,,,,,,,,,,,,,,,,
RawResource,"public void increaseYpCap(double amount)
{
    ypCap += amount;
}",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
RawResource,public double getYCoin() { return yCoin; },0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
RawResource,public double getYCoinCap() { return yCoinCap; },0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
RawResource,"public bool increaseYCoin(double amount)
{
    if (yCoin + amount <= yCoinCap)
    {
        yCoin += amount;
        return true;
    }
    else
    {
        if (yCoin < yCoinCap)
        {
            yCoin = yCoinCap;
        }
        return false;
    }
}",0.00,0.00,3.00,0.02,,,,,,,,,,,,,,,,,,,
RawResource,public void increaseYCoin_BypassCapacity(double amount) { yCoin += amount; },0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
RawResource,"public bool decreaseYCoin(double amount)
{
    if (checkDecreasePossible(yCoin, amount))
    {
        yCoin -= amount;
        return true;
    }
    return false;

}",0.00,0.00,3.00,0.02,,,,,,,,,,,,,,,,,,,
RawResource,"public void increaseYCoinCap(double amount)
{
    yCoinCap += amount;
}",0.00,0.00,3.00,0.02,,,,,,,,,,,,,,,,,,,
RawResource,public double getCement() { return cement; },0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
RawResource,public double getCementCap() { return cementCap; },0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
RawResource,"public bool increaseCement(double amount)
{
    if (cement + amount <= cementCap)
    {
        cement += amount;
        return true;
    }
    else
    {
        if (cement < cementCap)
        {
            cement = cementCap;
        }
        return false;
    }
}",0.00,0.00,3.00,0.02,,,,,,,,,,,,,,,,,,,
RawResource,public void increaseCement_BypassCapacity(double amount) { cement += amount; },0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
RawResource,"public bool decreaseCement(double amount)
{
    if (checkDecreasePossible(cement, amount))
    {
        cement -= amount;
        return true;
    }
    return false;

}",0.00,0.00,3.00,0.02,,,,,,,,,,,,,,,,,,,
RawResource,"public void increaseCementCap(double amount)
{
    cementCap += amount;
}",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
RawResource,public double getWire() { return wire; },0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
RawResource,public double getWireCap() { return wireCap; },0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
RawResource,"public bool increaseWire(double amount)
{
    if (wire + amount <= wireCap)
    {
        wire += amount;
        return true;
    }
    else
    {
        if (wire < wireCap)
        {
            wire = wireCap;
        }
        return false;
    }
}",0.00,0.00,3.00,0.02,,,,,,,,,,,,,,,,,,,
RawResource,public void increaseWire_BypassCapacity(double amount) { wire += amount; },0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
RawResource,"public bool decreaseWire(double amount)
{
    if (checkDecreasePossible(wire, amount))
    {
        wire -= amount;
        return true;
    }
    return false;

}",0.00,0.00,3.00,0.02,,,,,,,,,,,,,,,,,,,
RawResource,"public void increaseWireCap(double amount)
{
    wireCap += amount;
}",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
RawResource,public double getMechanicalPart() { return mechanicalPart; },0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
RawResource,public double getMechanicalPartCap() { return mechanicalPartCap; },0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
RawResource,"public bool increaseMechanicalPart(double amount)
{
    if (mechanicalPart + amount <= mechanicalPartCap)
    {
        mechanicalPart += amount;
        return true;
    }
    else
    {
        if (mechanicalPart < mechanicalPartCap)
        {
            mechanicalPart = mechanicalPartCap;
        }
        return false;
    }
}",0.00,0.00,3.00,0.02,,,,,,,,,,,,,,,,,,,
RawResource,public void increaseMechanicalPart_BypassCapacity(double amount) { mechanicalPart += amount; },0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
RawResource,"public bool decreaseMechanicalPart(double amount)
{
    if (checkDecreasePossible(mechanicalPart, amount))
    {
        mechanicalPart -= amount;
        return true;
    }
    return false;

}",0.00,0.00,3.00,0.02,,,,,,,,,,,,,,,,,,,
RawResource,"public void increaseMechanicalPartCap(double amount)
{
    mechanicalPartCap += amount;
}",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
RawResource,public double getChemical() { return chemical; },0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
RawResource,public double getChemicalCap() { return chemicalCap; },0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
RawResource,"public bool increaseChemical(double amount)
{
    if (chemical + amount <= chemicalCap)
    {
        chemical += amount;
        return true;
    }
    else
    {
        if (chemical < chemicalCap)
        {
            chemical = chemicalCap;
        }
        return false;
    }
}",0.00,0.00,3.00,0.02,,,,,,,,,,,,,,,,,,,
RawResource,public void increaseChemical_BypassCapacity(double amount) { chemical += amount; },0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
RawResource,"public bool decreaseChemical(double amount)
{
    if (checkDecreasePossible(chemical, amount))
    {
        chemical -= amount;
        return true;
    }
    return false;

}",0.00,0.00,3.00,0.02,,,,,,,,,,,,,,,,,,,
RawResource,"public void increaseChemicalCap(double amount)
{
    chemicalCap += amount;
}",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
RawResource,public double getFood() { return food; },0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
RawResource,public double getFoodCap() { return foodCap; },0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
RawResource,"public bool increaseFood(double amount)
{
    if (food + amount <= foodCap)
    {
        food += amount;
        return true;
    }
    else
    {
        if (food < foodCap)
        {
            food = foodCap;
        }
        return false;
    }
}",0.00,0.00,3.00,0.02,,,,,,,,,,,,,,,,,,,
RawResource,public void increaseFood_BypassCapacity(double amount) { food += amount; },0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
RawResource,"public bool decreaseFood(double amount)
{
    if (checkDecreasePossible(food, amount))
    {
        food -= amount;
        return true;
    }
    return false;

}",0.00,0.00,3.00,0.02,,,,,,,,,,,,,,,,,,,
RawResource,"public void increaseFoodCap(double amount)
{
    foodCap += amount;
}",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
RawResource,"private bool checkDecreasePossible(double currentlyHave, double decAmount) { return currentlyHave - decAmount >= 0 ? true : false; }",0.00,0.00,3.00,0.10,,,,,,,,,,,,,,,,,,,
RawResource,"public bool TryReduceFirstConstructionOrUpgradeCost(PlacedObject_Done plcd)
{
    REQC svK = GetNextLvlReqForBuildings(plcd);
    var lvl = plcd.getBuildingLevel();

    var reqcYp = svK.Gm;
    var ypCost = BuildingInfo.ApplyFunction(new BuildingInfo.GameVariableFunctionModel(reqcYp.InitialValue, reqcYp.Coefficients), lvl);

    var reqcCementcost = svK.Cement;
    var cementcost = BuildingInfo.ApplyFunction(new BuildingInfo.GameVariableFunctionModel(reqcCementcost.InitialValue, reqcCementcost.Coefficients), lvl);

    var reqcWireCost = svK.Electronic;
    var wirecost = BuildingInfo.ApplyFunction(new BuildingInfo.GameVariableFunctionModel(reqcWireCost.InitialValue, reqcWireCost.Coefficients), lvl);

    var reqcChemCost = svK.Chemical;
    var chemicalcost = BuildingInfo.ApplyFunction(new BuildingInfo.GameVariableFunctionModel(reqcChemCost.InitialValue, reqcChemCost.Coefficients), lvl);

    var reqcMechCost = svK.Mechanic;
    var mechPartcost = BuildingInfo.ApplyFunction(new BuildingInfo.GameVariableFunctionModel(reqcMechCost.InitialValue, reqcMechCost.Coefficients), lvl);

    return TryReduceCost(ypCost, cementcost, wirecost, mechPartcost, chemicalcost);
}",0.00,0.00,16.00,1.00,,,,,,,,,,,,,,,,,,,
RawResource,"public bool TryReduceFirstConstructionOnly(PlacedObjectTypeSO plcd_so)
{
    REQC svK = GetNextLvlReqForBuildings(plcd_so);
    var lvl = 0;

    var reqcYp = svK.Gm;
    var ypCost = BuildingInfo.ApplyFunction(new BuildingInfo.GameVariableFunctionModel(reqcYp.InitialValue, reqcYp.Coefficients), lvl);

    var reqcCementcost = svK.Cement;
    var cementcost = BuildingInfo.ApplyFunction(new BuildingInfo.GameVariableFunctionModel(reqcCementcost.InitialValue, reqcCementcost.Coefficients), lvl);

    var reqcWireCost = svK.Electronic;
    var wirecost = BuildingInfo.ApplyFunction(new BuildingInfo.GameVariableFunctionModel(reqcWireCost.InitialValue, reqcWireCost.Coefficients), lvl);

    var reqcChemCost = svK.Chemical;
    var chemicalcost = BuildingInfo.ApplyFunction(new BuildingInfo.GameVariableFunctionModel(reqcChemCost.InitialValue, reqcChemCost.Coefficients), lvl);

    var reqcMechCost = svK.Mechanic;
    var mechPartcost = BuildingInfo.ApplyFunction(new BuildingInfo.GameVariableFunctionModel(reqcMechCost.InitialValue, reqcMechCost.Coefficients), lvl);

    return TryReduceCost(ypCost, cementcost, wirecost, mechPartcost, chemicalcost);
}",0.00,0.00,16.00,1.00,,,,,,,,,,,,,,,,,,,
RawResource,"public bool TryUseTechFoodCheck(double cfValue, int tick = 1)
{
    var reductionFoodAmount = cfValue * tick;
    var hasEnoughFood = reductionFoodAmount <= food;

    return hasEnoughFood;
}",0.00,0.00,3.00,0.20,,,,,,,,,,,,,,,,,,,
RawResource,"public bool TryUseTechFood(double cfValue, int tick = 1)
{
    var reductionFoodAmount = cfValue * tick;
    var hasEnoughFood = reductionFoodAmount <= food;

    if (hasEnoughFood)
    {
        food -= reductionFoodAmount;
        return true;
    }
    else
    {
        return false;
    }
}",0.00,0.00,4.00,0.10,,,,,,,,,,,,,,,,,,,
RawResource,"public bool CheckIfEnoughResAvailableHELPER_yp(PlacedObject_Done plcd)
{
    var kod = plcd.getPlacedObjectTypeSO().kod;
    var lvl = plcd.getBuildingLevel();

    Root root = buildingInfo.QByKod(kod);
    var reqcYp = root.OnInit.REQC.Gm;

    var ypCost = BuildingInfo.ApplyFunction(new BuildingInfo.GameVariableFunctionModel(reqcYp.InitialValue, reqcYp.Coefficients), lvl);

    return checkDecreasePossible(yp, ypCost);
}",0.00,0.00,8.00,0.30,,,,,,,,,,,,,,,,,,,
RawResource,"public bool CheckIfEnoughResAvailableHELPER_cement(PlacedObject_Done plcd)
{
    var kod = plcd.getPlacedObjectTypeSO().kod;
    var lvl = plcd.getBuildingLevel();

    Root root = buildingInfo.QByKod(kod);
    var reqcCementcost = root.OnInit.REQC.Cement;
    var cementcost = BuildingInfo.ApplyFunction(new BuildingInfo.GameVariableFunctionModel(reqcCementcost.InitialValue, reqcCementcost.Coefficients), lvl);

    return checkDecreasePossible(cement, cementcost);
}",0.00,0.00,8.00,0.30,,,,,,,,,,,,,,,,,,,
RawResource,"public bool CheckIfEnoughResAvailableHELPER_wire(PlacedObject_Done plcd)
{
    var kod = plcd.getPlacedObjectTypeSO().kod;
    var lvl = plcd.getBuildingLevel();

    Root root = buildingInfo.QByKod(kod);
    var reqcWireCost = root.OnInit.REQC.Electronic;
    var wirecost = BuildingInfo.ApplyFunction(new BuildingInfo.GameVariableFunctionModel(reqcWireCost.InitialValue, reqcWireCost.Coefficients), lvl);

    return checkDecreasePossible(wire, wirecost);
}",0.00,0.00,8.00,0.30,,,,,,,,,,,,,,,,,,,
RawResource,"public bool CheckIfEnoughResAvailableHELPER_chemical(PlacedObject_Done plcd)
{
    var kod = plcd.getPlacedObjectTypeSO().kod;
    var lvl = plcd.getBuildingLevel();

    Root root = buildingInfo.QByKod(kod);
    var reqcChemCost = root.OnInit.REQC.Chemical;
    var chemicalcost = BuildingInfo.ApplyFunction(new BuildingInfo.GameVariableFunctionModel(reqcChemCost.InitialValue, reqcChemCost.Coefficients), lvl);

    return checkDecreasePossible(chemical, chemicalcost);
}",0.00,0.00,8.00,0.30,,,,,,,,,,,,,,,,,,,
RawResource,"public bool CheckIfEnoughResAvailableHELPER_mechPart(PlacedObject_Done plcd)
{
    var kod = plcd.getPlacedObjectTypeSO().kod;
    var lvl = plcd.getBuildingLevel();

    Root root = buildingInfo.QByKod(kod);
    var reqcMechCost = root.OnInit.REQC.Mechanic;
    var mechPartcost = BuildingInfo.ApplyFunction(new BuildingInfo.GameVariableFunctionModel(reqcMechCost.InitialValue, reqcMechCost.Coefficients), lvl);

    return checkDecreasePossible(mechanicalPart, mechPartcost);
}",0.00,0.00,8.00,0.30,,,,,,,,,,,,,,,,,,,
RawResource,"public bool CheckIfEnoughResAvailableHELPER_yp(double amount)
{
    return checkDecreasePossible(yp, amount);
}",0.00,0.00,2.00,0.01,,,,,,,,,,,,,,,,,,,
RawResource,"public bool CheckIfEnoughResAvailableHELPER_cement(double amount)
{
    return checkDecreasePossible(cement, amount);
}",0.00,0.00,2.00,0.01,,,,,,,,,,,,,,,,,,,
RawResource,"public bool CheckIfEnoughResAvailableHELPER_wire(double amount)
{
    return checkDecreasePossible(wire, amount);
}",0.00,0.00,2.00,0.01,,,,,,,,,,,,,,,,,,,
RawResource,"public bool CheckIfEnoughResAvailableHELPER_chemical(double amount)
{
    return checkDecreasePossible(chemical, amount);
}",0.00,0.00,2.00,0.01,,,,,,,,,,,,,,,,,,,
RawResource,"public bool CheckIfEnoughResAvailableHELPER_mechPart(double amount)
{
    return checkDecreasePossible(mechanicalPart, amount);
}",0.00,0.00,2.00,0.01,,,,,,,,,,,,,,,,,,,
RawResource,"public bool Tech_CheckIfEnoughResAvailableHELPER_cement(int cement_t)
{
    return checkDecreasePossible(cement, cement_t);
}",0.00,0.00,2.00,0.01,,,,,,,,,,,,,,,,,,,
RawResource,"public bool Tech_CheckIfEnoughResAvailableHELPER_wire(int wire_t)
{
    return checkDecreasePossible(wire, wire_t);
}",0.00,0.00,2.00,0.01,,,,,,,,,,,,,,,,,,,
RawResource,"public bool Tech_CheckIfEnoughResAvailableHELPER_chemical(int chemical_t)
{
    return checkDecreasePossible(chemical, chemical_t);
}",0.00,0.00,2.00,0.01,,,,,,,,,,,,,,,,,,,
RawResource,"public bool Tech_CheckIfEnoughResAvailableHELPER_mechPart(int mechPart_t)
{
    return checkDecreasePossible(mechanicalPart, mechPart_t);
}",0.00,0.00,2.00,0.01,,,,,,,,,,,,,,,,,,,
RawResource,"public REQC GetNextLvlReqForBuildings(PlacedObject_Done plcd)
{
    var kod = plcd.getPlacedObjectTypeSO().kod;

    //Debug.Log(kod);
    Root root = buildingInfo.QByKod(kod);
    return root.OnInit.REQC;
}",0.00,0.00,4.00,0.10,,,,,,,,,,,,,,,,,,,
RawResource,"public REQC GetNextLvlReqForBuildings(PlacedObjectTypeSO plcd_so)
{
    var kod = plcd_so.kod;

    Root root = buildingInfo.QByKod(kod);
    return root.OnInit.REQC;
}",0.00,0.00,3.00,0.10,,,,,,,,,,,,,,,,,,,
RawResource,"public void IncreaseResourcesOnChargeback(float ypCost = 0, float cementCost = 0, float wireCost = 0, float mechanicalPartCost = 0, float chemicalCost = 0)
{
    increaseYp_BypassCapacity(ypCost);
    increaseCement_BypassCapacity(cementCost);
    increaseWire_BypassCapacity(wireCost);
    increaseMechanicalPart_BypassCapacity(mechanicalPartCost);
    increaseChemical_BypassCapacity(chemicalCost);
}",0.00,0.00,5.00,0.02,,,,,,,,,,,,,,,,,,,
RawResource,"public bool IncreaseFood()
{
    return increaseFood(1);
}",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
RawResource,"public bool TryConsumeFood(double amount, int tick = 1)
{
    if (amount == null || amount == 0.0) { return true; }

    return decreaseFood(tick * (amount / 3600.0));
}",0.00,0.00,2.00,0.02,,,,,,,,,,,,,,,,,,,
RawResource,"public bool TryConsumeYP(double amount)
{
    return decreaseYp(amount);
}",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
RawResource,"public void IncreaseRawResourceCapForLoadVersion(PlacedObject_Done placedObject_Done)
{
    var kod = placedObject_Done.getPlacedObjectTypeSO().kod;
    Root root = buildingInfo.QByKod(kod);

    if (root == null || !root.Identifiers.BuildingAttributes.Contains(""STRG"")) { return; }

    var buildingLvl = placedObject_Done.getBuildingLevel();

    var strg_tmp = root.ExtraSpecial?.StorageProvided;
    if (strg_tmp == null) { return; }

    var cementStrgCap = BuildingInfo.ApplyFunction(new BuildingInfo.GameVariableFunctionModel(strg_tmp.Provide_Cement.InitialValue, strg_tmp.Provide_Cement.Coefficients), buildingLvl);
    var wireStrgCap = BuildingInfo.ApplyFunction(new BuildingInfo.GameVariableFunctionModel(strg_tmp.Provide_Electronic.InitialValue, strg_tmp.Provide_Electronic.Coefficients), buildingLvl);
    var chemStrgCap = BuildingInfo.ApplyFunction(new BuildingInfo.GameVariableFunctionModel(strg_tmp.Provide_Chemical.InitialValue, strg_tmp.Provide_Chemical.Coefficients), buildingLvl);
    var mechStrgCap = BuildingInfo.ApplyFunction(new BuildingInfo.GameVariableFunctionModel(strg_tmp.Provide_Mechanic.InitialValue, strg_tmp.Provide_Mechanic.Coefficients), buildingLvl);
    var foodStrgCap = BuildingInfo.ApplyFunction(new BuildingInfo.GameVariableFunctionModel(strg_tmp.Provide_Food.InitialValue, strg_tmp.Provide_Food.Coefficients), buildingLvl);

    IncreaseRawResourceCap(cementStrgCap, wireStrgCap, chemStrgCap, mechStrgCap, foodStrgCap);
}",0.00,0.00,14.00,1.00,,,,,,,,,,,,,,,,,,,
RawResource,"public void IncreaseRawResourceCap(int cement, int electronic, int chem, int mech, int food)
{
    increaseCementCap(cement);
    increaseWireCap(electronic);
    increaseChemicalCap(chem);
    increaseMechanicalPartCap(mech);
    increaseFoodCap(food);
}",0.00,0.00,5.00,0.10,,,,,,,,,,,,,,,,,,,
RawResource,"public void IncreaseRawResources_BypassCapacity(double cement = 0, double wire = 0, double chemical = 0, double mechPart = 0, double yc = 0)
{

    increaseCement_BypassCapacity(cement);
    increaseWire_BypassCapacity(wire);
    increaseChemical_BypassCapacity(chemical);
    increaseMechanicalPart_BypassCapacity(mechPart);

    increaseYCoin_BypassCapacity(yc);
    return;
}",0.00,0.00,5.00,0.10,,,,,,,,,,,,,,,,,,,
RawResource,"public void AddRawResourcesOnLeaderLevelUp_BypassCapacity(LeaderLvlBonus bonus)
{
    increaseCement_BypassCapacity(bonus.allResources);
    increaseWire_BypassCapacity(bonus.allResources);
    increaseChemical_BypassCapacity(bonus.allResources);
    increaseMechanicalPart_BypassCapacity(bonus.allResources);

    increaseYp_BypassCapacity(bonus.greenMoney);
    return;
}",0.00,0.00,5.00,0.10,,,,,,,,,,,,,,,,,,,
RawResource,"public IEnumerator FullResourcesOnFirstTimeWarehouseBuild()
{
    yield return new WaitForSeconds(.3f);

    // resource amounts can be greater than capacity
    // in that case do nothing

    if (cement < cementCap) { cement = cementCap; }
    if (wire < wireCap) { wire = wireCap; }
    if (mechanicalPart < mechanicalPartCap) { mechanicalPart = mechanicalPartCap; }
    if (chemical < chemicalCap) { chemical = chemicalCap; }
    if (food < foodCap) { food = foodCap; }

    saveManager.SaveStartMainCallback();
}",0.00,0.00,11.00,0.80,,,,,,,,,,,,,,,,,,,
RawResource,"public void FullResourcesOnOpenPremiumRawResourcePackage()
{
    if (cement < cementCap) { cement = cementCap; }
    if (wire < wireCap) { wire = wireCap; }
    if (mechanicalPart < mechanicalPartCap) { mechanicalPart = mechanicalPartCap; }
    if (chemical < chemicalCap) { chemical = chemicalCap; }
    if (food < foodCap) { food = foodCap; }
}",0.00,0.00,10.00,0.30,,,,,,,,,,,,,,,,,,,
RawResource,"public IEnumerator AddResourcesOnLeaderLevelUp()
{
    yield return new WaitForSeconds(.1f);

    // resource amounts can be greater than capacity
    // in that case do nothing

    increaseCement_BypassCapacity(cementCap * 0.2);
    increaseWire_BypassCapacity(wireCap * 0.2);
    increaseChemical_BypassCapacity(chemicalCap * 0.2);
    increaseMechanicalPart_BypassCapacity(mechanicalPartCap * 0.2);
    increaseFood_BypassCapacity(foodCap * 0.02);

    saveManager.SaveStartMainCallback();
}",0.00,0.00,6.00,0.10,,,,,,,,,,,,,,,,,,,
RawResource,"public void OnFireXPercentDamageRawResources(double prc)
{
    var cement = (prc * getCement()) / 100.0f;
    var wire = (prc * getWire()) / 100.0f;
    var mechanicalPart = (prc * getMechanicalPart()) / 100.0f;
    var chemical = (prc * getChemical()) / 100.0f;
    var food = (prc * getFood()) / 100.0f;

    decreaseCement(cement);
    decreaseWire(wire);
    decreaseMechanicalPart(mechanicalPart);
    decreaseChemical(chemical);
    decreaseFood(food);
}",0.00,0.00,15.00,0.10,,,,,,,,,,,,,,,,,,,
RawResource,"public void SetRRValuesForLoad(RawResources rr)
{
    yp = rr.YP;
    yCoin = rr.YC;
    cement = rr.Cement;
    wire = rr.Wire;
    mechanicalPart = rr.MechPart;
    chemical = rr.Chem;
    food = rr.Food;
}",0.00,0.00,8.00,0.01,,,,,,,,,,,,,,,,,,,
ScreenManager,"private void Awake()
{
    if (Instance == null)
    {
        Instance = this;
    }
    else if (Instance != this)
    {
        Destroy(gameObject);
    }

    mainCamera = Camera.main;
}",0.00,0.00,3.00,0.01,,,,,,,,,,,,,,,,,,,
ScreenManager,"private void Start()
{
    guidedTutorialManager = GuidedTutorialManager.Instance;
    buildingsManager = BuildingsManager.Instance;
    criminalEventsManager = CriminalEventsManager.Instance;

    StartCoroutine(MoveCamToMainOnAppStart());
}",0.00,0.00,4.00,0.02,,,,,,,,,,,,,,,,,,,
ScreenManager,"private IEnumerator MoveCamToMainOnAppStart()
{
    yield return new WaitForEndOfFrame();

    var tempCoordinates = GetMainBuildingPosModifiedForGoingToCityScreenCamPos();
    mainCamera.transform.position = tempCoordinates;
    mainCamera.transform.rotation = Quaternion.Euler(mainCamera.transform.rotation.eulerAngles.x, 0, 0);
}",0.00,0.00,3.00,0.10,,,,,,,,,,,,,,,,,,,
ScreenManager,"public void GoToCityScreen()
{
    screen = ScreenData.City;

    //bottomLeftBuilding.OpenCityBuildingBar();

    var tempCoordinates = GetMainBuildingPosModifiedForGoingToCityScreenCamPos();
    mainCamera.transform.position = tempCoordinates;
    mainCamera.transform.rotation = Quaternion.Euler(45, 0, 0);

    // close holders on screen change
    selectedDetailsManager.TryCloseUi();
    buildingFirstConstructionDetails.CloseBuildingDetailsContainer();
    dirtySelectedDetailsManager.TryCloseDetailsUi();
    techSelectedDetailsManager.TryCloseTechUi();

    buildingsManager.DisableAnyGhostWhileBuildingOnHolderOpen();

    guidedTutorialManager.OnScreenChange();
}",0.00,0.00,11.00,0.40,,,,,,,,,,,,,,,,,,,
ScreenManager,"public void GoToFarmlandScreen()
{
    screen = ScreenData.Farmland;

    //bottomLeftBuilding.OpenFarmBuildingBar();

    //var tempCoordinates = new Vector3(farmCenter.position.x, mainCamera.transform.position.y, farmCenter.position.z);
    var tempCoordinates = new Vector3(farmCenter.position.x, 165, farmCenter.position.z);
    mainCamera.transform.position = tempCoordinates;
    mainCamera.transform.rotation = Quaternion.Euler(45, 0, 0);

    buildingsManager.AddRemoveAllFarmsVisualsOnSceneChange();

    // close holders on screen change
    selectedDetailsManager.TryCloseUi();
    buildingFirstConstructionDetails.CloseBuildingDetailsContainer();
    dirtySelectedDetailsManager.TryCloseDetailsUi();
    techSelectedDetailsManager.TryCloseTechUi();

    criminalEventsManager.CloseAllOpenEventsWhenAnotherTriesToOpen();

    buildingsManager.DisableAnyGhostWhileBuildingOnHolderOpen();

    guidedTutorialManager.OnScreenChange();
}",0.00,0.00,11.00,0.40,,,,,,,,,,,,,,,,,,,
ScreenManager,"private Vector3 GetMainBuildingPosModifiedForGoingToCityScreenCamPos()
{
    var buildingList = buildingsManager.GetBuildingsList();
    foreach (var building in buildingList)
    {
        var so = building.getPlacedObjectTypeSO();
        if (so.kod == ""MAIN"")
        {
            // get pos and break
            var buildingAnchor = building.getWorldPosition();
            var widthX = 2.5f * so.width;
            var heightY = 2.5f * so.height;

            var correctWorldPos = new Vector3(buildingAnchor.x + widthX, 165, buildingAnchor.z + heightY);
            // return modified -> offset a little
            return correctWorldPos + new Vector3(0,0,-157f);
        }
    }
    // if here there are no main building so default cam pos
    return new Vector3(cityCenter.position.x, mainCamera.transform.position.y, cityCenter.position.z);

}",0.00,0.00,9.00,1.00,,,,,,,,,,,,,,,,,,,
TechnologyManager,"private void Awake()
{
    if (Instance == null)
    {
        Instance = this;
    }
    else if (Instance != this)
    {
        Destroy(gameObject);
    }

    nextLevelCurrentlyResearching = new List<TechSelfUpgradeData>();
}",0.00,0.00,3.00,0.01,,,,,,,,,,,,,,,,,,,
TechnologyManager,"private void Start()
{
    TECHCHEM = 1;
    TECHEE = 1;
    TECHMECH = 1;
    TECHENG = 1;
    TECHRENEWENG = 1;
    TECHFARMING = 1;
    TECHPURIFICATION = 1;

    displayError = DisplayError.Instance;
    defaultTechInfos = TechnologyInfo.Instance;
    defaultBuildingInfos = BuildingInfo.Instance;
    resourceManager = RawResource.Instance;
    leaderManager = Leader.Instance;
    buildingsManager = BuildingsManager.Instance;
    utilitiesManager = Utilities.Instance;
    saveManager = SaveManager.Instance;
    customTimeManager = CustomTimeManager.Instance;
}",0.00,0.00,8.00,0.03,,,,,,,,,,,,,,,,,,,
TechnologyManager,public int GetTechCHEMLvl() { return TECHCHEM; },0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
TechnologyManager,public int GetTechEELvl() { return TECHEE; },0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
TechnologyManager,public int GetTechMechLvl() { return TECHMECH; },0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
TechnologyManager,public int GetTechENGLvl() { return TECHENG; },0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
TechnologyManager,public int GetTechRENEWENGLvl() { return TECHRENEWENG; },0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
TechnologyManager,public int GetTechFARMINGLvl() { return TECHFARMING; },0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
TechnologyManager,public int GetTechPURIFICATIONLvl() { return TECHPURIFICATION; },0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
TechnologyManager,"public void AddToUpgradeListForLoad(Tech tech)
{
    var techRoot = defaultTechInfos.QTechByKod(tech.TechCode);

    var whileResearching = techRoot.TechWhileResearching[0];


    TechUtilsFoodConsumptionForSaveAndIsoSimulatorModel saveConsumption = new()
    {
        electric = BuildingInfo.ApplyFunction(new BuildingInfo.GameVariableFunctionModel(whileResearching.TechCU.CElectricty.InitialValue, whileResearching.TechCU.CElectricty.Coefficients), tech.TechLvl),
        sewage = BuildingInfo.ApplyFunction(new BuildingInfo.GameVariableFunctionModel(whileResearching.TechCU.CWtreatment.InitialValue, whileResearching.TechCU.CWtreatment.Coefficients), tech.TechLvl),
        water = BuildingInfo.ApplyFunction(new BuildingInfo.GameVariableFunctionModel(whileResearching.TechCU.CWater.InitialValue, whileResearching.TechCU.CWater.Coefficients), tech.TechLvl),
        food = BuildingInfo.ApplyFunction(new BuildingInfo.GameVariableFunctionModel(whileResearching.TechCF.InitialValue, whileResearching.TechCF.Coefficients), tech.TechLvl),

    };


    utilitiesManager.ForceTechCUForLoad(saveConsumption);

    nextLevelCurrentlyResearching.Add(new TechSelfUpgradeData() { TechCode = tech.TechCode, remainingSeconds = tech.TechUpgrade.UpgradeRemainingTimeInSeconds, techCU = saveConsumption });
}",0.00,0.00,11.00,0.60,,,,,,,,,,,,,,,,,,,
TechnologyManager,"public bool CheckBuildingHasTechReq(PlacedObject_Done placedObject_Done)
{
    var root = defaultBuildingInfos.QByKod(placedObject_Done.getPlacedObjectTypeSO().kod);
    var lvl = placedObject_Done.getBuildingLevel();

    if (root == null || root.OnInit == null || root.OnInit.OnInitHandSetValues.Count < lvl + 1 || root.OnInit.OnInitHandSetValues[lvl] == null || root.OnInit.OnInitHandSetValues[lvl].REQT == null) { return true; }

    List<REQT> reqt = root.OnInit.OnInitHandSetValues[lvl].REQT;

    // check reqt
    if (reqt == null) { return false; }

    if (reqt.Count == 0) { return true; }

    // loop list of reqt in list
    // and for each reqt get tech lvl and check
    foreach (var reqTech in reqt)
    {
        var reqTechCode = reqTech.reqt_tech_code;
        var reqTechLvl = reqTech.reqt_lvl;

        var currentTechLvl = GetTechLevelFromString(reqTechCode);

        if (currentTechLvl < reqTechLvl) { return false; }
    }

    // every contition is satiesfied

    return true;
}",0.00,0.00,14.00,0.50,,,,,,,,,,,,,,,,,,,
TechnologyManager,"private bool isAlreadyResearching(string kod)
{
    foreach (var techUp in nextLevelCurrentlyResearching)
    {
        if (techUp.TechCode == kod) return true;
    }
    return false;
}",0.00,0.00,3.00,0.20,,,,,,,,,,,,,,,,,,,
TechnologyManager,"public int? GetTechLevelFromString(string techCode)
{
    if (techCode == null) return null;

    switch (techCode)
    {
        case ""TECHCHEM"":
            return TECHCHEM;
        case ""TECHEE"":
            return TECHEE;
        case ""TECHMECH"":
            return TECHMECH;
        case ""TECHENG"":
            return TECHENG;
        case ""TECHRENEWENG"":
            return TECHRENEWENG;
        case ""TECHFARMING"":
            return TECHFARMING;
        case ""TECHPURIFICATION"":
            return TECHPURIFICATION;
        default: return null;
    }
}",0.00,0.00,4.00,0.10,,,,,,,,,,,,,,,,,,,
TechnologyManager,"public void SetTechLevelFromStringForLoad(string techCode, int lvl)
{
    if (techCode == null) return ;

    switch (techCode)
    {
        case ""TECHCHEM"":
            TECHCHEM = lvl;
            break;
        case ""TECHEE"":
            TECHEE = lvl;
            break;
        case ""TECHMECH"":
            TECHMECH = lvl;
            break;
        case ""TECHENG"":
            TECHENG = lvl;
            break;
        case ""TECHRENEWENG"":
            TECHRENEWENG = lvl;
            break;
        case ""TECHFARMING"":
            TECHFARMING = lvl;
            break;
        case ""TECHPURIFICATION"":
            TECHPURIFICATION = lvl;
            break;
        default: return ;
    }
}",0.00,0.00,4.00,0.10,,,,,,,,,,,,,,,,,,,
TechnologyManager,"public int? IncreaseTechLevelFromString(string techCode)
{
    if (techCode == null) return null;

    Debug.Log(techCode + "" new lvl "" + (GetTechLevelFromString(techCode) + 1).ToString());
    switch (techCode)
    {
        case ""TECHCHEM"":
            return TECHCHEM++;
        case ""TECHEE"":
            return TECHEE++;
        case ""TECHMECH"":
            return TECHMECH++;
        case ""TECHENG"":
            return TECHENG++;
        case ""TECHRENEWENG"":
            return TECHRENEWENG++;
        case ""TECHFARMING"":
            return TECHFARMING++;
        case ""TECHPURIFICATION"":
            return TECHPURIFICATION++;
        default: return null;
    }
}",0.00,0.00,5.00,0.10,,,,,,,,,,,,,,,,,,,
Utilities,"private void Awake()
{
    if (Instance == null)
    {
        Instance = this;
    }
    else if (Instance != this)
    {
        Destroy(gameObject);
    }

    BuildingInfo = BuildingInfo.Instance;
}",0.00,0.00,4.00,0.01,,,,,,,,,,,,,,,,,,,
Utilities,public double GetElectricCap() { return electricCap; },0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
Utilities,public double GetBuildingsElectricConsumption() { return buildingsElectricConsumption; },0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
Utilities,public double GetTechElectricConsumption() { return techElectricConsumption; },0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
Utilities,public double GetAllElectricConsumption() { return buildingsElectricConsumptionForUiCorrect + techElectricConsumption; },0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
Utilities,public double GetElectricStrgCap() { return electricStrgCap; },0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
Utilities,public double GetElectricInStrg() { return electricInStrg; },0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
Utilities,public void SetElectricInStrgCap(double storageCap) { electricStrgCap = storageCap; },0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
Utilities,public double GetElectricMaxOutputFromStorage() { return electricMaxOutputFromStorage; },0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
Utilities,public void SetElectricMaxOutputFromStorage(double maxOutput) { electricMaxOutputFromStorage = maxOutput; },0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
Utilities,public double GetUiElectricyCUFromDepo() { return uiElectricyCUFromDepo; },0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
Utilities,public double GetWaterWasteCap() { return waterWasteCap; },0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
Utilities,public double GetWaterWasteConsumption() { return buildingsWaterWasteConsumption; },0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
Utilities,public double GetTechWaterWasteConsumption() { return techWaterWasteConsumption; },0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
Utilities,public double GetAllWaterWasteConsumption() { return buildingsWaterWasteConsumptionForUiCorrect + techWaterWasteConsumption; },0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
Utilities,public double GetBuildingsWaterWasteConsumption() { return buildingsWaterWasteConsumption; },0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
Utilities,public double Get_sum_water_waste() { return sum_water_waste; },0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
Utilities,public double GetWaterStrgCap() { return waterStrgCap; },0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
Utilities,public void SetWaterStorageCap(double storageCap) { waterStrgCap = storageCap; },0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
Utilities,public void IncreaseWaterInStorage_BypassCapacity(double addWaterAmount) { waterInStrg += addWaterAmount; },0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
Utilities,public double GetWaterInStrg() { return waterInStrg; },0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
Utilities,"private void Start()
{
    displayError = DisplayError.Instance;
    guidedTutorialManager = GuidedTutorialManager.Instance;
    environmentManager = EnvironmentManager.Instance;

    uiElectricyCU = 0.0f;
    uiElectricyCUTemp = 0.0f;
    uiElectricyPU = 0.0f;
    uiElectricyPUTemp = 0.0f;
    uiElectricyCUFromDepo = 0.0f;

    uiWaterCU = 0.0f;
    uiWaterCUTemp = 0.0f;
    uiWaterPU = 0.0f;
    uiWaterPUTemp = 0.0f;

    StartCoroutine(UiConsumptionGenerationCalculation());
}",0.00,0.00,14.00,0.10,,,,,,,,,,,,,,,,,,,
Utilities,"public bool TryTechCU(int electric, int sewage, int water)
{
    var hasEnoughElectric = electric < electricCap;
    var hasEnoughWaterWaste = sewage < waterWasteCap;
    var hasEnoughWater = waterInStrg - (water) / 3600.0f > 0;

    if (hasEnoughElectric && hasEnoughWaterWaste && hasEnoughWater)
    {
        // has everything so apply
        techElectricConsumption += electric;
        techWaterWasteConsumption += sewage;
        return true;
    }
    else
    {
        return false;
    }

}",0.00,0.00,8.00,0.70,,,,,,,,,,,,,,,,,,,
Utilities,"public bool ForceTechCUForLoad(TechUtilsFoodConsumptionForSaveAndIsoSimulatorModel techCuCf)
{
    techElectricConsumption += techCuCf.electric;
    techWaterWasteConsumption += techCuCf.sewage;
    return true;

}",0.00,0.00,2.00,0.20,,,,,,,,,,,,,,,,,,,
Utilities,"public void RemoveTechCU(TechUtilsFoodConsumptionForSaveAndIsoSimulatorModel techCuFu)
{
    techElectricConsumption -= techCuFu.electric;
    techWaterWasteConsumption -= techCuFu.sewage;
}",0.00,0.00,2.00,0.20,,,,,,,,,,,,,,,,,,,
Utilities,"public bool TryTechWaterCheck(int water, int tick = 1)
{
    var hasEnoughWater = waterInStrg - tick * ((water) / 3600.0f) > 0;

    return hasEnoughWater;
}",0.00,0.00,2.00,0.20,,,,,,,,,,,,,,,,,,,
Utilities,"public bool TryTechWaterC(int water, int tick = 1)
{
    var hasEnoughWater = waterInStrg - tick * ((water) / 3600.0f) > 0;

    if (hasEnoughWater)
    {
        waterInStrg -= tick * ((water) / 3600.0f);
        uiWaterCU += tick * ((water) / 3600.0f);
        return true;
    }
    else
    {
        return false;
    }
}",0.00,0.00,4.00,0.50,,,,,,,,,,,,,,,,,,,
Utilities,"public void IncreaseElectricFromStorage(double amount)
{
    electricInStrg += amount;
}",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
Utilities,"public void DecreaseElectricFromStorage(double amount)
{
    if (electricInStrg - amount < 0) { electricInStrg = 0; }
    else { electricInStrg -= amount; }
}",0.00,0.00,2.00,0.30,,,,,,,,,,,,,,,,,,,
Utilities,"public void IncreaseWaterFromStorage(double amount)
{
    waterInStrg += amount;
}",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
Utilities,"public void DecreaseWaterFromStorage(double amount)
{
    if (waterInStrg - amount < 0) { waterInStrg = 0; }
    else { waterInStrg -= amount; }
}",0.00,0.00,2.00,0.10,,,,,,,,,,,,,,,,,,,
Utilities,"public void AddBoostUtils(UtilsTypes type)
{
    switch (type)
    {
        case UtilsTypes.Electric:
            {
                ActivateBoostElectric();
                break;
            }
        case UtilsTypes.WaterWaste:
            {
                ActivateBoostWaterWaste();
                break;
            }
        case UtilsTypes.Water:
            {
                ActivateBoostWater();
                break;
            }
        default: break;
    }
}",0.00,0.00,3.00,0.05,,,,,,,,,,,,,,,,,,,
Utilities,"public void AllBoostDecreaseRemainingTime(int tick)
{
    if (isElectricBoostActive)
    {
        if (electricBoostRemainingTime > 0) { electricBoostRemainingTime -= tick; } else { DeActivateBoostElectric(); }
    }

    if (isWaterWasteBoostActive)
    {
        if (waterWasteBoostRemainingTime > 0) { waterWasteBoostRemainingTime -= tick; } else { DeActivateBoostWaterWaste(); }
    }

    if (isWaterBoostActive)
    {
        if (waterBoostRemainingTime > 0) { waterBoostRemainingTime -= tick; } else { DeActivateBoostWater(); }
    }
}",0.00,0.00,12.00,0.30,,,,,,,,,,,,,,,,,,,
Utilities,"public void StartCoroutineElectricBoost()
{
    if (!isElectricBoostActive) { StartCoroutine(ElectricBoostWrapper()); }
}",0.00,0.00,2.00,0.01,,,,,,,,,,,,,,,,,,,
Utilities,"public void StartCoroutineWaterWasteBoost()
{
    if (!isWaterWasteBoostActive) { StartCoroutine(WaterWasteBoostWrapper()); }
}",0.00,0.00,2.00,0.01,,,,,,,,,,,,,,,,,,,
Utilities,"public void StartCoroutineWaterBoost()
{
    if (!isWaterBoostActive) { StartCoroutine(WaterBoostWrapper()); }
}",0.00,0.00,2.00,0.01,,,,,,,,,,,,,,,,,,,
Utilities,"private IEnumerator ElectricBoostWrapper()
{
    var activeDuration = 60;
    electricBoostRemainingTime = activeDuration;
    ActivateBoostElectric();
    while (activeDuration > 0)
    {
        yield return new WaitForSeconds(1.0f);
        activeDuration--;
        electricBoostRemainingTime = activeDuration;
    }
    DeActivateBoostElectric();
}",0.00,0.00,6.00,0.20,,,,,,,,,,,,,,,,,,,
Utilities,"private IEnumerator WaterWasteBoostWrapper()
{
    var activeDuration = 60;
    waterWasteBoostRemainingTime = activeDuration;
    ActivateBoostWaterWaste();
    while (activeDuration > 0)
    {
        yield return new WaitForSeconds(1.0f);
        activeDuration--;
        waterWasteBoostRemainingTime = activeDuration;
    }
    DeActivateBoostWaterWaste();
}",0.00,0.00,6.00,0.20,,,,,,,,,,,,,,,,,,,
Utilities,"private IEnumerator WaterBoostWrapper()
{
    var activeDuration = 60;
    waterBoostRemainingTime = activeDuration;
    ActivateBoostWater();
    while (activeDuration > 0)
    {
        yield return new WaitForSeconds(1.0f);
        activeDuration--;
        waterBoostRemainingTime = activeDuration;
    }
    DeActivateBoostWater();
}",0.00,0.00,6.00,0.20,,,,,,,,,,,,,,,,,,,
Utilities,"private void ActivateBoostElectric()
{
    electricBoostRemainingTime = 3600;
    isElectricBoostActive = true;
}",0.00,0.00,2.00,0.10,,,,,,,,,,,,,,,,,,,
Utilities,"private void DeActivateBoostElectric()
{
    electricBoostRemainingTime = 0;
    isElectricBoostActive = false;
}",0.00,0.00,2.00,0.10,,,,,,,,,,,,,,,,,,,
Utilities,"private void ActivateBoostWaterWaste()
{
    waterWasteBoostRemainingTime = 3600;
    isWaterWasteBoostActive = true;
}",0.00,0.00,2.00,0.10,,,,,,,,,,,,,,,,,,,
Utilities,"private void DeActivateBoostWaterWaste()
{
    waterWasteBoostRemainingTime = 0;
    isWaterWasteBoostActive = false;
}",0.00,0.00,2.00,0.10,,,,,,,,,,,,,,,,,,,
Utilities,"private void ActivateBoostWater()
{
    waterBoostRemainingTime = 3600;
    isWaterBoostActive = true;
}",0.00,0.00,2.00,0.10,,,,,,,,,,,,,,,,,,,
Utilities,"private void DeActivateBoostWater()
{
    waterBoostRemainingTime = 0;
    isWaterBoostActive = false;
}",0.00,0.00,2.00,0.10,,,,,,,,,,,,,,,,,,,
Utilities,public bool IsElectricBoostActive() { return isElectricBoostActive; },0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
Utilities,public bool IsWaterWasteCapBoostActive() { return isWaterWasteBoostActive; },0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
Utilities,public bool IsWaterCapBoostActive() { return isWaterBoostActive; },0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
Utilities,"IEnumerator UiConsumptionGenerationCalculation()
{
    while (true)
    {
        uiWaterCU = uiWaterCUTemp / 6.0f;
        uiWaterPU = uiWaterPUTemp / 6.0f;
        uiWaterCUTemp = 0.0f;
        uiWaterPUTemp = 0.0f;
        yield return new WaitForSeconds(6.0f);
    }
}",0.00,0.00,5.00,0.50,,,,,,,,,,,,,,,,,,,
Utilities,"public double GetUiWaterConsumption()
{
    return uiWaterCU;
}",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
Utilities,"public double GetUiWaterProduction()
{
    return uiWaterPU;
}",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
Utilities,"public void SetUtilsForLoad(UtilitiesSave utilsSave)
{
    waterStrgCap = utilsSave.waterStorageCap;
    waterInStrg = utilsSave.waterInStorage;

    electricInStrg = utilsSave.electricInStorage;
    electricStrgCap = utilsSave.electricStorageCap;

    isElectricFromDepoActive = utilsSave.isElectricFromDepoActive;
}",0.00,0.00,5.00,0.50,,,,,,,,,,,,,,,,,,,
BottomSellectBuilding,"private void Start()
{
    gridBuildingSystem = GridBuildingSystem.Instance;
    farmlandGridBuildingSystem = FarmlandGridBuildingSystem.Instance;
    screenManager = ScreenManager.Instance;
    guidedTutorialManager = GuidedTutorialManager.Instance;
}",0.00,0.00,4.00,0.03,,,,,,,,,,,,,,,,,,,
BottomSellectBuilding,"public void CloseBuildingBar()
{
    fieldsHolder.gameObject.SetActive(false);
    baseHolder.gameObject.SetActive(false);
    utilitiesHolder.gameObject.SetActive(false);
    leisureHolder.gameObject.SetActive(false);
    factoriesHolder.gameObject.SetActive(false);
    energyHolder.gameObject.SetActive(false);

    buildingButtonBG.gameObject.SetActive(false);
    typesCity.gameObject.SetActive(false);
    typesFarmland.gameObject.SetActive(false);
}",2.00,0.00,20.00,0.40,,,,,,,,,,,,,,,,,,,
BottomSellectBuilding,"public void OpenCloseFieldsBuildingHolder()
{
    audioManager.Play_defaultButtonClick();
    typesCity.gameObject.SetActive(false);
    typesFarmland.gameObject.SetActive(false);

    fieldsHolder.gameObject.SetActive(true);
    activeContainer = farmContainer;
}",2.00,0.00,10.00,0.20,,,,,,,,,,,,,,,,,,,
BottomSellectBuilding,"public void OpenCloseBaseBuildingHolder()
{
    guidedTutorialManager.OnBaseSectionClicked();
    audioManager.Play_defaultButtonClick();
    typesCity.gameObject.SetActive(false);
    typesFarmland.gameObject.SetActive(false);

    baseHolder.gameObject.SetActive(true);
    activeContainer = mainContainer;
}",2.00,0.00,10.00,0.20,,,,,,,,,,,,,,,,,,,
BottomSellectBuilding,"public void OpenCloseUtilsBuildingHolder()
{
    audioManager.Play_defaultButtonClick();
    typesCity.gameObject.SetActive(false);
    typesFarmland.gameObject.SetActive(false);

    utilitiesHolder.gameObject.SetActive(true);
    activeContainer = utilsboxContainer;
}",2.00,0.00,10.00,0.20,,,,,,,,,,,,,,,,,,,
BottomSellectBuilding,"public void OpenCloseLeisureBuildingHolder()
{
    audioManager.Play_defaultButtonClick();
    typesCity.gameObject.SetActive(false);
    typesFarmland.gameObject.SetActive(false);

    leisureHolder.gameObject.SetActive(true);
    activeContainer = leisureContainer;
}",2.00,0.00,10.00,0.20,,,,,,,,,,,,,,,,,,,
BottomSellectBuilding,"public void OpenCloseFactoriesBuildingHolder()
{
    audioManager.Play_defaultButtonClick();
    typesCity.gameObject.SetActive(false);
    typesFarmland.gameObject.SetActive(false);

    factoriesHolder.gameObject.SetActive(true);
    activeContainer = factoryContainer;
}",2.00,0.00,10.00,0.20,,,,,,,,,,,,,,,,,,,
BottomSellectBuilding,"public void OpenCloseEnergyBuildingHolder()
{
    audioManager.Play_defaultButtonClick();
    typesCity.gameObject.SetActive(false);
    typesFarmland.gameObject.SetActive(false);

    energyHolder.gameObject.SetActive(true);
    activeContainer = energyContainer;
}",2.00,0.00,10.00,0.20,,,,,,,,,,,,,,,,,,,
BottomSellectBuilding,"public void OnGoToFarmlandButtonClicked()
{
    audioManager.Play_defaultButtonClick();
    // close opened holders
    CloseBuildingBar();

    buildingButtonBG.gameObject.SetActive(false);

    // open farmland buttons
    //fieldsBtn.gameObject.SetActive(true);
}",2.00,0.00,4.00,0.10,,,,,,,,,,,,,,,,,,,
BottomSellectBuilding,"public void OnGoToCityButtonClicked()
{
    audioManager.Play_defaultButtonClick();
    // close opened holders
    CloseBuildingBar();

    buildingButtonBG.gameObject.SetActive(false);
}",2.00,0.00,4.00,0.10,,,,,,,,,,,,,,,,,,,
BottomSellectBuilding,"public void GoBackToTypesOfBuildingsBottom()
{
    CloseBuildingBar();
    OpenCloseMenuControllerSwitchMainCallback();
}",2.00,0.00,4.00,0.05,,,,,,,,,,,,,,,,,,,
BottomSellectBuilding,"public void SelectPlacedObjectTypeForBuilding_Farmland_1_Farm()
{
    //farmlandGridBuildingSystem.SetSelectedPlacedObjectTypeSO(0);
    isMouseButtonDown = true; isHoveringOverUI = true;
    soToInitIndex = 0;

    // do not display any time when user is selected this building
    // for first time construction
    //DisplayDetailsBeforeFirstConstructionForBuildingDetails();
}",2.00,0.00,3.00,0.10,,,,,,,,,,,,,,,,,,,
BottomSellectBuilding,"public void SelectPlacedObjectTypeForBuilding_City_1_HQ()
{
    //gridBuildingSystem.SetSelectedPlacedObjectTypeSO(5);
    isMouseButtonDown = true; isHoveringOverUI = true;
    soToInitIndex = 5;
}",2.00,0.00,3.00,0.10,,,,,,,,,,,,,,,,,,,
BottomSellectBuilding,"public void SelectPlacedObjectTypeForBuilding_City_1_House()
{
    //gridBuildingSystem.SetSelectedPlacedObjectTypeSO(4);
    isMouseButtonDown = true; isHoveringOverUI = true;
    soToInitIndex = 4;
}",2.00,0.00,3.00,0.10,,,,,,,,,,,,,,,,,,,
BottomSellectBuilding,"public void SelectPlacedObjectTypeForBuilding_City_1_Residence_1()
{
    //gridBuildingSystem.SetSelectedPlacedObjectTypeSO(4);
    isMouseButtonDown = true; isHoveringOverUI = true;
    soToInitIndex = 24;
}",2.00,0.00,3.00,0.10,,,,,,,,,,,,,,,,,,,
BottomSellectBuilding,"public void SelectPlacedObjectTypeForBuilding_City_1_Residence_2()
{
    //gridBuildingSystem.SetSelectedPlacedObjectTypeSO(4);
    isMouseButtonDown = true; isHoveringOverUI = true;
    soToInitIndex = 25;
}",2.00,0.00,3.00,0.10,,,,,,,,,,,,,,,,,,,
BottomSellectBuilding,"public void SelectPlacedObjectTypeForBuilding_City_1_Research()
{
    //gridBuildingSystem.SetSelectedPlacedObjectTypeSO(6);
    isMouseButtonDown = true; isHoveringOverUI = true;
    soToInitIndex = 6;
}",2.00,0.00,3.00,0.10,,,,,,,,,,,,,,,,,,,
BottomSellectBuilding,"public void SelectPlacedObjectTypeForBuilding_City_1_Uni()
{
    //gridBuildingSystem.SetSelectedPlacedObjectTypeSO(9);
    isMouseButtonDown = true; isHoveringOverUI = true;
    soToInitIndex = 9;
}",2.00,0.00,3.00,0.10,,,,,,,,,,,,,,,,,,,
BottomSellectBuilding,"public void SelectPlacedObjectTypeForBuilding_City_1_Road()
{
    //gridBuildingSystem.SetSelectedPlacedObjectTypeSO(14);
    isMouseButtonDown = true; isHoveringOverUI = true;
    soToInitIndex = 14;
}",2.00,0.00,3.00,0.10,,,,,,,,,,,,,,,,,,,
BottomSellectBuilding,"public void SelectPlacedObjectTypeForBuilding_City_2_Water()
{
    //gridBuildingSystem.SetSelectedPlacedObjectTypeSO(10);
    isMouseButtonDown = true; isHoveringOverUI = true;
    soToInitIndex = 10;
}",2.00,0.00,3.00,0.10,,,,,,,,,,,,,,,,,,,
BottomSellectBuilding,"public void SelectPlacedObjectTypeForBuilding_City_2_WaterTank()
{
    //gridBuildingSystem.SetSelectedPlacedObjectTypeSO(17);
    isMouseButtonDown = true; isHoveringOverUI = true;
    soToInitIndex = 17;
}",2.00,0.00,3.00,0.10,,,,,,,,,,,,,,,,,,,
BottomSellectBuilding,"public void SelectPlacedObjectTypeForBuilding_City_2_Sewage()
{
    //gridBuildingSystem.SetSelectedPlacedObjectTypeSO(7);
    isMouseButtonDown = true; isHoveringOverUI = true;
    soToInitIndex = 7;
}",2.00,0.00,3.00,0.10,,,,,,,,,,,,,,,,,,,
BottomSellectBuilding,"public void SelectPlacedObjectTypeForBuilding_City_2_Warehouse()
{
    //gridBuildingSystem.SetSelectedPlacedObjectTypeSO(8);
    isMouseButtonDown = true; isHoveringOverUI = true;
    soToInitIndex = 8;
}",2.00,0.00,3.00,0.10,,,,,,,,,,,,,,,,,,,
BottomSellectBuilding,"public void SelectPlacedObjectTypeForBuilding_City_2_FireDept()
{
    //gridBuildingSystem.SetSelectedPlacedObjectTypeSO(12);
    isMouseButtonDown = true; isHoveringOverUI = true;
    soToInitIndex = 12;
}",2.00,0.00,3.00,0.10,,,,,,,,,,,,,,,,,,,
BottomSellectBuilding,"public void SelectPlacedObjectTypeForBuilding_City_2_Police()
{
    //gridBuildingSystem.SetSelectedPlacedObjectTypeSO(15);
    isMouseButtonDown = true; isHoveringOverUI = true;
    soToInitIndex = 15;
}",2.00,0.00,3.00,0.10,,,,,,,,,,,,,,,,,,,
BottomSellectBuilding,"public void SelectPlacedObjectTypeForBuilding_City_2_WaterTreatmentPlant()
{
    //gridBuildingSystem.SetSelectedPlacedObjectTypeSO(18);
    isMouseButtonDown = true; isHoveringOverUI = true;
    soToInitIndex = 18;
}",2.00,0.00,3.00,0.10,,,,,,,,,,,,,,,,,,,
BottomSellectBuilding,"public void SelectPlacedObjectTypeForBuilding_City_2_Cleaning()
{
    //gridBuildingSystem.SetSelectedPlacedObjectTypeSO(19);
    isMouseButtonDown = true; isHoveringOverUI = true;
    soToInitIndex = 19;
}",2.00,0.00,3.00,0.10,,,,,,,,,,,,,,,,,,,
BottomSellectBuilding,"public void SelectPlacedObjectTypeForBuilding_City_3_Park()
{
    //gridBuildingSystem.SetSelectedPlacedObjectTypeSO(13);
    isMouseButtonDown = true; isHoveringOverUI = true;
    soToInitIndex = 13;
}",2.00,0.00,3.00,0.10,,,,,,,,,,,,,,,,,,,
BottomSellectBuilding,"public void SelectPlacedObjectTypeForBuilding_City_3_Tree()
{
    //gridBuildingSystem.SetSelectedPlacedObjectTypeSO(16);
    isMouseButtonDown = true; isHoveringOverUI = true;
    soToInitIndex = 16;
}",2.00,0.00,3.00,0.10,,,,,,,,,,,,,,,,,,,
BottomSellectBuilding,"public void SelectPlacedObjectTypeForBuilding_City_4_FactoryCement()
{
    //gridBuildingSystem.SetSelectedPlacedObjectTypeSO(0);
    isMouseButtonDown = true; isHoveringOverUI = true;
    soToInitIndex = 0;
}",2.00,0.00,3.00,0.10,,,,,,,,,,,,,,,,,,,
BottomSellectBuilding,"public void SelectPlacedObjectTypeForBuilding_City_4_FactoryChemicals()
{
    //gridBuildingSystem.SetSelectedPlacedObjectTypeSO(1);
    isMouseButtonDown = true; isHoveringOverUI = true;
    soToInitIndex = 1;
}",2.00,0.00,3.00,0.10,,,,,,,,,,,,,,,,,,,
BottomSellectBuilding,"public void SelectPlacedObjectTypeForBuilding_City_4_FactoryElectronics()
{
    //gridBuildingSystem.SetSelectedPlacedObjectTypeSO(2);
    isMouseButtonDown = true; isHoveringOverUI = true;
    soToInitIndex = 2;
}",2.00,0.00,3.00,0.10,,,,,,,,,,,,,,,,,,,
BottomSellectBuilding,"public void SelectPlacedObjectTypeForBuilding_City_4_FactoryMechanics()
{
    //gridBuildingSystem.SetSelectedPlacedObjectTypeSO(3);
    isMouseButtonDown = true; isHoveringOverUI = true;
    soToInitIndex = 3;
}",2.00,0.00,3.00,0.10,,,,,,,,,,,,,,,,,,,
BottomSellectBuilding,"public void SelectPlacedObjectTypeForBuilding_City_5_CoalPP()
{
    //gridBuildingSystem.SetSelectedPlacedObjectTypeSO(11);
    isMouseButtonDown = true; isHoveringOverUI = true;
    soToInitIndex = 22;
}",2.00,0.00,3.00,0.10,,,,,,,,,,,,,,,,,,,
BottomSellectBuilding,"public void SelectPlacedObjectTypeForBuilding_City_5_NatGasPP()
{
    //gridBuildingSystem.SetSelectedPlacedObjectTypeSO(11);
    isMouseButtonDown = true; isHoveringOverUI = true;
    soToInitIndex = 23;
}",2.00,0.00,3.00,0.10,,,,,,,,,,,,,,,,,,,
BottomSellectBuilding,"public void SelectPlacedObjectTypeForBuilding_City_5_WindTurbine()
{
    //gridBuildingSystem.SetSelectedPlacedObjectTypeSO(11);
    isMouseButtonDown = true; isHoveringOverUI = true;
    soToInitIndex = 11;
}",2.00,0.00,3.00,0.10,,,,,,,,,,,,,,,,,,,
BottomSellectBuilding,"public void SelectPlacedObjectTypeForBuilding_City_5_SolarPanel()
{
    //gridBuildingSystem.SetSelectedPlacedObjectTypeSO(20);
    isMouseButtonDown = true; isHoveringOverUI = true;
    soToInitIndex = 20;
}",2.00,0.00,3.00,0.10,,,,,,,,,,,,,,,,,,,
BottomSellectBuilding,"public void SelectPlacedObjectTypeForBuilding_City_5_Battery()
{
    //gridBuildingSystem.SetSelectedPlacedObjectTypeSO(21);
    isMouseButtonDown = true; isHoveringOverUI = true;
    soToInitIndex = 21;
}",2.00,0.00,3.00,0.10,,,,,,,,,,,,,,,,,,,
BottomSellectBuilding,"public void SetHQVisibilityNone()
{
    HQMainBtn.SetActive(false);
}",0.00,0.00,2.00,0.01,,,,,,,,,,,,,,,,,,,
BottomSellectBuilding,"public void DisplayDetailsBeforeFirstConstructionForBuildingDetails()
{
    if (screenManager.screen == ScreenManager.ScreenData.City)
    {
        var citySOList = gridBuildingSystem.GetPlcdSOList();
        var soToDisplayDetails = citySOList[soToInitIndex];

        // invoke first contruction details gameobject avtivate
        buildingFirstConstructionDetailsManager.OpenAndDisplayFirstBuildingDetailContainer(soToDisplayDetails);
    }
    else
    {
        var farmlandSOList = farmlandGridBuildingSystem.GetPlcdSOList();
        var soToDisplayDetails = farmlandSOList[soToInitIndex];

        // invoke first contruction details gameobject avtivate
        buildingFirstConstructionDetailsManager.OpenAndDisplayFirstBuildingDetailContainer(soToDisplayDetails);
    }
}",2.00,0.00,9.00,0.50,,,,,,,,,,,,,,,,,,,
ButtonLongPressListener,"private void Awake()
{
    button = GetComponent<Button>();
    delay = new WaitForSeconds(0.05f);
}",0.00,0.00,2.00,0.50,,,,,,,,,,,,,,,,,,,
ButtonLongPressListener,"public void OnPointerDown(PointerEventData eventData)
{
    isPointerDown = true;
    pressTime = DateTime.Now;
    onClickMousePos = Input.touches[0].position;
    StartCoroutine(Timer());
}",2.00,0.00,6.00,0.50,,,,,,,,,,,,,,,,,,,
ButtonLongPressListener,"public void OnPointerUp(PointerEventData eventData)
{
    isPointerDown = false;
    isLongPressed = false;
}",2.00,0.00,2.00,0.30,,,,,,,,,,,,,,,,,,,
ButtonLongPressListener,"private IEnumerator Timer()
{
    while (isPointerDown && !isLongPressed)
    {
        double elapsedSeconds = (DateTime.Now - pressTime).TotalSeconds;

        // calculate if finger moved on the screen 
        // and if moved no invoke
        var dist = Vector3.Distance(onClickMousePos, Input.touches[0].position);
        //Debug.Log(dist);
        if (dist > 40)
        {
            yield break;
        }

        if (elapsedSeconds >= holdDuration)
        {
            isLongPressed = true;
            if (button.interactable)
                onLongPress?.Invoke();

            yield break;
        }

        yield return delay;
    }
}",0.00,0.00,9.00,1.00,,,,,,,,,,,,,,,,,,,
ButtonMultipleTimeClickListener,"private void Awake()
{
    button = GetComponent<Button>();
}",0.00,0.00,2.00,0.01,,,,,,,,,,,,,,,,,,,
ButtonMultipleTimeClickListener,"public void OnPointerClick(PointerEventData eventData)
{
    double elapsedSeconds = (DateTime.Now - firstClickTime).TotalSeconds;
    if (elapsedSeconds > doubleClickDuration)
        clicks = 0;

    clicks++;

    if (clicks == 1)
        firstClickTime = DateTime.Now;
    else if (clicks > 8)
    {
        if (elapsedSeconds <= doubleClickDuration)
        {
            if (button.interactable)
                onDoubleClick?.Invoke();
        }
        clicks = 0;
    }
}",2.00,0.00,10.00,1.00,,,,,,,,,,,,,,,,,,,
ChangeScreen,"private void Start()
{
    screenManager = ScreenManager.Instance;
    gridBuildingSystem = GridBuildingSystem.Instance;
    farmlandGridBuildingSystem = FarmlandGridBuildingSystem.Instance;
    listOfBuildings = BuildingsManager.Instance.GetBuildingsList();
    guidedTutorialManager = GuidedTutorialManager.Instance;

    StartCoroutine(UpdateUiIsFarmsReady_HarvestOrPlant());
}",0.00,0.00,8.00,0.10,,,,,,,,,,,,,,,,,,,
ChangeScreen,"public void SwitchScreen()
{
    gridBuildingSystem.DeselectObjectType();
    farmlandGridBuildingSystem.DeselectObjectType();

    // TODO
    // close details ui if open
    // close building holder if open

    if (screenManager.screen == ScreenManager.ScreenData.City)
    {
        // go to farm
        if (gridBuildingSystem.isMoveActive) return;

        goToFarmButton.sprite = toCitySprite;
        bottomSellectBuilding.OnGoToFarmlandButtonClicked();

        // if guided tutorial finished -> then open drag actions (harvest and seed btns)
        if (!guidedTutorialManager.GetIsTutorialOngoing())
        {
            userDragBtnsHolder.gameObject.SetActive(true);
        }
        
        screenManager.GoToFarmlandScreen();
    }
    else
    {
        // go to city 
        if (farmlandGridBuildingSystem.isMoveActive) return;

        goToFarmButton.sprite = toFarmlandSprite;
        bottomSellectBuilding.OnGoToCityButtonClicked();

        userDragBtnsHolder.gameObject.SetActive(false);

        screenManager.GoToCityScreen();
    }
}",2.00,0.00,16.00,2.50,,,,,,,,,,,,,,,,,,,
EnvironmentOpenClose,"public void OpenEnvironmentContainer()
{
    //environmentOpenedHolderTransform.gameObject.SetActive(true);
    UIBoxAnimate.UI_Anim_OnOpen(environmentOpenedHolderTransform);
    //closeEnvironmentBtnTransform.gameObject.SetActive(true);

    audioManager.Play_defaultButtonClick();
}",2.00,0.00,2.00,0.30,,,,,,,,,,,,,,,,,,,
EnvironmentOpenClose,"public void CloseEnvironmentContainer()
{
    //environmentOpenedHolderTransform.gameObject.SetActive(false);
    UIBoxAnimate.UI_Anim_OnClose(environmentOpenedHolderTransform);
    //closeEnvironmentBtnTransform.gameObject.SetActive(false);

    audioManager.Play_defaultButtonClick();
}",2.00,0.00,2.00,0.30,,,,,,,,,,,,,,,,,,,
FarmUserDragActions,"private void Start()
{
    _farmlandGridBuildingSystem = FarmlandGridBuildingSystem.Instance;
    _screenManager = ScreenManager.Instance;
    _buildingManager = BuildingsManager.Instance;

    _farmlandGrid = _farmlandGridBuildingSystem.GetGrid();

    _imgRef = GetComponent<Image>();

    switch (actionType)
    {
        case FarmUserActionTypes.Harvest_Scythe:
            correctOffset = spriteOffsetForHarvest; break;
        case FarmUserActionTypes.Plant_Seed:
            correctOffset = spriteOffsetForPlant; break;
    }
}",0.00,0.00,10.00,0.20,,,,,,,,,,,,,,,,,,,
FarmUserDragActions,"public void OnBeginDrag(PointerEventData eventData)
{
    Debug.Log(""OnBeginDrag"");

    lastChecked_PlcdFarmList.Clear();

    _instantiatedMoveTransform = Instantiate(sprite_transform, position: Input.mousePosition + correctOffset, rotation: transform.rotation, parent: transform.parent);

    _imgRef.enabled = false;
}",2.00,0.00,6.00,0.80,,,,,,,,,,,,,,,,,,,
FarmUserDragActions,"public void OnEndDrag(PointerEventData eventData)
{
    Debug.Log(""OnEndDrag"");
    _imgRef.enabled = true;

    lastChecked_PlcdFarmList.Clear();

    Destroy(_instantiatedMoveTransform.gameObject);
    _instantiatedMoveTransform = null;
}",2.00,0.00,6.00,0.80,,,,,,,,,,,,,,,,,,,
FarmUserDragActions,"private void TryHarvestDragFarm(PlacedObject_Done plcd_farm)
{
    _buildingManager.FarmTileDragCollectButtonOnClick(plcd_farm);
}",2.00,0.00,1.00,0.30,,,,,,,,,,,,,,,,,,,
FarmUserDragActions,"private void TrySeedDragFarm(PlacedObject_Done plcd_farm)
{
    _selectedDetailsManager.TryPlantFarmWithNormalSeed_Drag(plcd_farm);
}",2.00,0.00,1.00,0.30,,,,,,,,,,,,,,,,,,,
InventoryManager,"void Start()
{
    marketplace = Marketplace.Instance;
    rawResource = RawResource.Instance;
    saveManager = SaveManager.Instance;
    seedResource = SeedResource.Instance;
    displayError = DisplayError.Instance;
    buildingsManager = BuildingsManager.Instance;
}",0.00,0.00,7.00,0.01,,,,,,,,,,,,,,,,,,,
InventoryManager,"public void OpenInventory()
{
    //inverntoryTransform.gameObject.SetActive(true);
    UIBoxAnimate.UI_Anim_OnOpen(inverntoryTransform);

    UptadeAllItemsAndValues();

    buildingsManager.DisableAnyGhostWhileBuildingOnHolderOpen();

    audioManager.Play_defaultButtonClick();
}",2.00,0.00,4.00,0.20,,,,,,,,,,,,,,,,,,,
InventoryManager,"public void CloseInventory()
{
    //inverntoryTransform.gameObject.SetActive(false);
    UIBoxAnimate.UI_Anim_OnClose(inverntoryTransform);

    audioManager.Play_defaultButtonClick();
}",2.00,0.00,2.00,0.15,,,,,,,,,,,,,,,,,,,
InventoryManager,"public void OnSliderValuechanged(float value)
{
    sliderAmount_int = (int)value;
    slider_amount_T.text = sliderAmount_int.ToString();
}",2.00,0.00,3.00,0.30,,,,,,,,,,,,,,,,,,,
InventoryManager,"private void OpenSliderHolder()
{
    slider_holder.gameObject.SetActive(true);
    slider_self.value = 0;
    slider_amount_holder.gameObject.SetActive(true);
}",0.00,0.00,5.00,0.20,,,,,,,,,,,,,,,,,,,
InventoryManager,"private void CloseSliderHolder()
{
    slider_holder.gameObject.SetActive(false);
    slider_amount_holder.gameObject.SetActive(false);
}",0.00,0.00,4.00,0.20,,,,,,,,,,,,,,,,,,,
InventoryManager,"public void OpenConstructionBundle()
{
    marketplace.Open_ModularPackage_PremiumConstructionSpeedupPackage(sliderAmount_int);
    UptadeAllItemsAndValues();
    saveManager.SaveStartMainCallback();
}",2.00,0.00,3.00,0.20,,,,,,,,,,,,,,,,,,,
InventoryManager,"public void SelectConstructionBundle()
{
    OpenSliderHolder();
    _selectedItem = InventoryItems.pre_const_speedup_bundle;

    slider_self.maxValue = marketplace.premiumItemsHolder.package_construction_speedup;
    if (slider_self.maxValue >= 1) { slider_self.value = 1; }

    selected_info_name_transform.GetComponent<TextMeshProUGUI>().text = GetCorrectLangugeString_ForInventoryItemHeadName(""Premium Construction Speedup Bundle"");
    selected_info_details_transform.GetComponent<TextMeshProUGUI>().text = GetCorrectLangugeString_ForInventoryItemDESC(""With Construction Speedup Bundle you can grow your city much faster!"");
}",2.00,0.00,9.00,0.20,,,,,,,,,,,,,,,,,,,
InventoryManager,"public void OpenRawResourceBundle()
{
    marketplace.Open_ModularPackage_PremiumRawResourcePackage(sliderAmount_int);
    UptadeAllItemsAndValues();
    saveManager.SaveStartMainCallback();
}",2.00,0.00,3.00,0.20,,,,,,,,,,,,,,,,,,,
InventoryManager,"public void SelectRawResourceBundle()
{
    OpenSliderHolder();
    _selectedItem = InventoryItems.pre_raw_res_bundle;

    slider_self.maxValue = marketplace.premiumItemsHolder.package_raw_resource;
    if (slider_self.maxValue >= 1) { slider_self.value = 1; }

    selected_info_name_transform.GetComponent<TextMeshProUGUI>().text = GetCorrectLangugeString_ForInventoryItemHeadName(""Premium Resource Bundle"");
    selected_info_details_transform.GetComponent<TextMeshProUGUI>().text = GetCorrectLangugeString_ForInventoryItemDESC(""Resource Bundle gives you all the resources you need!"");
}",2.00,0.00,9.00,0.20,,,,,,,,,,,,,,,,,,,
InventoryManager,"public void OpenSeedBundle()
{
    marketplace.Open_ModularPackage_PremiumSeedPackage(sliderAmount_int);
    UptadeAllItemsAndValues();
    saveManager.SaveStartMainCallback();
}",2.00,0.00,3.00,0.20,,,,,,,,,,,,,,,,,,,
InventoryManager,"public void SelectSeedBundle()
{
    OpenSliderHolder();
    _selectedItem = InventoryItems.pre_seed_bundle;

    slider_self.maxValue = marketplace.premiumItemsHolder.package_pre_seed;
    if (slider_self.maxValue >= 1) { slider_self.value = 1; }

    selected_info_name_transform.GetComponent<TextMeshProUGUI>().text = GetCorrectLangugeString_ForInventoryItemHeadName(""Premium Seed Bundle"");
    selected_info_details_transform.GetComponent<TextMeshProUGUI>().text = GetCorrectLangugeString_ForInventoryItemDESC(""Seed Bundle gives you premium seeds that yield much more food than regular seeds!"");
}",2.00,0.00,9.00,0.20,,,,,,,,,,,,,,,,,,,
InventoryManager,"public void OpenPuzzleBundle()
{
    // TODO
    UptadeAllItemsAndValues();
    saveManager.SaveStartMainCallback();
}",2.00,0.00,3.00,0.20,,,,,,,,,,,,,,,,,,,
InventoryManager,"public void SelectPuzzleBundle()
{
    OpenSliderHolder();
    _selectedItem = InventoryItems.pre_puzzle_bundle;

    slider_self.maxValue = marketplace.premiumItemsHolder.package_puzzle;
    if (slider_self.maxValue >= 1) { slider_self.value = 1; }

    selected_info_name_transform.GetComponent<TextMeshProUGUI>().text = GetCorrectLangugeString_ForInventoryItemHeadName(""Puzzle Bundle"");
    selected_info_details_transform.GetComponent<TextMeshProUGUI>().text = GetCorrectLangugeString_ForInventoryItemDESC(""Puzzle!!"");
}",2.00,0.00,9.00,0.20,,,,,,,,,,,,,,,,,,,
InventoryManager,"public void Open24hConstruction()
{
    marketplace.TryUseConstructionSpeedup(""24_hour"");
    UptadeAllItemsAndValues();
    saveManager.SaveStartMainCallback();
}",2.00,0.00,3.00,0.20,,,,,,,,,,,,,,,,,,,
InventoryManager,"public void Open16hConstruction()
{
    marketplace.TryUseConstructionSpeedup(""16_hour"");
    UptadeAllItemsAndValues();
    saveManager.SaveStartMainCallback();
}",2.00,0.00,3.00,0.20,,,,,,,,,,,,,,,,,,,
InventoryManager,"public void Open8hConstruction()
{
    marketplace.TryUseConstructionSpeedup(""8_hour"");
    UptadeAllItemsAndValues();
    saveManager.SaveStartMainCallback();
}",2.00,0.00,3.00,0.20,,,,,,,,,,,,,,,,,,,
InventoryManager,"public void Open1hConstruction()
{
    marketplace.TryUseConstructionSpeedup(""1_hour"");
    UptadeAllItemsAndValues();
    saveManager.SaveStartMainCallback();
}",2.00,0.00,3.00,0.20,,,,,,,,,,,,,,,,,,,
InventoryManager,"public void Select_normalSeed()
{
    OpenSliderHolder();
    _selectedItem = InventoryItems.normalSeed;

    slider_self.maxValue = marketplace.premiumItemsHolder.normalSeed;
    if (slider_self.maxValue >= 1) { slider_self.value = 1; }

    selected_info_name_transform.GetComponent<TextMeshProUGUI>().text = GetCorrectLangugeString_ForInventoryItemHeadName(""Normal Seed"");
    selected_info_details_transform.GetComponent<TextMeshProUGUI>().text = GetCorrectLangugeString_ForInventoryItemDESC(""You can use seeds from inventory to add them to your storage, and then plant them on your farms."");
}",2.00,0.00,9.00,0.30,,,,,,,,,,,,,,,,,,,
InventoryManager,"public void Open_normalSeed()
{
    if (marketplace.TryUseSeedFromInventory_Multiple(sliderAmount_int))
    {
        // seed used from holder
        // increase sr normal seed
        seedResource.increaseRegularSeedAmount(sliderAmount_int);
        UptadeAllItemsAndValues();
        saveManager.SaveStartMainCallback();
    }
    else
    {
        displayError.ShowError(""You dont have normal seed in inventory!"");
    }
}",2.00,0.00,6.00,0.40,,,,,,,,,,,,,,,,,,,
InventoryManager,"public void Select_food()
{
    OpenSliderHolder();
    _selectedItem = InventoryItems.food;

    slider_self.maxValue = marketplace.premiumItemsHolder.food;
    if (slider_self.maxValue >= 1) { slider_self.value = 1; }

    selected_info_name_transform.GetComponent<TextMeshProUGUI>().text = GetCorrectLangugeString_ForInventoryItemHeadName(""Food"");
    selected_info_details_transform.GetComponent<TextMeshProUGUI>().text = GetCorrectLangugeString_ForInventoryItemDESC(""Food is vital for your city. You can use foods from inventory to add them to your city."");
}",2.00,0.00,9.00,0.30,,,,,,,,,,,,,,,,,,,
InventoryManager,"public void Open_food()
{
    if (marketplace.TryUseFoodFromInventory_Multiple(sliderAmount_int))
    {
        // food used from holder
        // increase rr fod
        if (rawResource.increaseFood(sliderAmount_int))
        {
            // succes
            UptadeAllItemsAndValues();
            saveManager.SaveStartMainCallback();
        }
        else
        {
            displayError.ShowError(""You dont have enough food storage!"");

            // since there are no storage used food from invo should be returned to invo
            marketplace.TryUseFoodFromHolder_CHARGEBACK_Multiple(sliderAmount_int);
        }
    }
    else
    {
        displayError.ShowError(""You dont have food in inventory!"");
    }
}",2.00,0.00,9.00,0.30,,,,,,,,,,,,,,,,,,,
InventoryManager,"public void Open_L_cement()
{
    if (marketplace.premiumItemsHolder.L_cement < sliderAmount_int)
    {
        return;
    }
    marketplace.premiumItemsHolder.L_cement -= sliderAmount_int;

    rawResource.increaseCement_BypassCapacity(25000 * sliderAmount_int);
    UptadeAllItemsAndValues();
    saveManager.SaveStartMainCallback();
}",2.00,0.00,5.00,0.20,,,,,,,,,,,,,,,,,,,
InventoryManager,"public void Select_L_cement()
{
    OpenSliderHolder();
    _selectedItem = InventoryItems.L_cement;

    slider_self.maxValue = marketplace.premiumItemsHolder.L_cement;
    if (slider_self.maxValue >= 1) { slider_self.value = 1; }

    selected_info_name_transform.GetComponent<TextMeshProUGUI>().text = GetCorrectLangugeString_ForInventoryItemHeadName(""Large Cement"");
    selected_info_details_transform.GetComponent<TextMeshProUGUI>().text = GetCorrectLangugeString_ForInventoryItemDESC(""Does your city needs more cement! Activate this package to get cement. If you do not have enough space in your warehouse, you can not open this package!"");
}",2.00,0.00,9.00,0.20,,,,,,,,,,,,,,,,,,,
InventoryManager,"public void Open_M_cement()
{
    if (marketplace.premiumItemsHolder.M_cement < sliderAmount_int)
    {
        return;
    }

    marketplace.premiumItemsHolder.M_cement -= sliderAmount_int;

    rawResource.increaseCement_BypassCapacity(5000 * sliderAmount_int);
    UptadeAllItemsAndValues();
    saveManager.SaveStartMainCallback();
}",2.00,0.00,5.00,0.20,,,,,,,,,,,,,,,,,,,
InventoryManager,"public void Select_M_cement()
{
    OpenSliderHolder();
    _selectedItem = InventoryItems.M_cement;

    slider_self.maxValue = marketplace.premiumItemsHolder.M_cement;
    if (slider_self.maxValue >= 1) { slider_self.value = 1; }

    selected_info_name_transform.GetComponent<TextMeshProUGUI>().text = GetCorrectLangugeString_ForInventoryItemHeadName(""Medium Cement"");
    selected_info_details_transform.GetComponent<TextMeshProUGUI>().text = GetCorrectLangugeString_ForInventoryItemDESC(""Does your city needs more cement! Activate this package to get cement. If you do not have enough space in your warehouse, you can not open this package!"");
}",2.00,0.00,9.00,0.20,,,,,,,,,,,,,,,,,,,
InventoryManager,"public void Open_S_cement()
{
    if (marketplace.premiumItemsHolder.S_cement < sliderAmount_int)
    {
        return;
    }

    marketplace.premiumItemsHolder.S_cement -= sliderAmount_int;

    rawResource.increaseCement_BypassCapacity(1500 * sliderAmount_int);
    UptadeAllItemsAndValues();
    saveManager.SaveStartMainCallback();
}",2.00,0.00,5.00,0.20,,,,,,,,,,,,,,,,,,,
InventoryManager,"public void Select_S_cement()
{
    OpenSliderHolder();
    _selectedItem = InventoryItems.S_cement;

    slider_self.maxValue = marketplace.premiumItemsHolder.S_cement;
    if (slider_self.maxValue >= 1) { slider_self.value = 1; }

    selected_info_name_transform.GetComponent<TextMeshProUGUI>().text = GetCorrectLangugeString_ForInventoryItemHeadName(""Small Cement"");
    selected_info_details_transform.GetComponent<TextMeshProUGUI>().text = GetCorrectLangugeString_ForInventoryItemDESC(""Does your city needs more cement! Activate this package to get cement. If you do not have enough space in your warehouse, you can not open this package!"");
}",2.00,0.00,9.00,0.20,,,,,,,,,,,,,,,,,,,
InventoryManager,"public void Open_L_wire()
{
    if (marketplace.premiumItemsHolder.L_wire < sliderAmount_int)
    {
        return;
    }

    marketplace.premiumItemsHolder.L_wire -= sliderAmount_int;

    rawResource.increaseWire_BypassCapacity(4500 * sliderAmount_int);
    UptadeAllItemsAndValues();
    saveManager.SaveStartMainCallback();
}",2.00,0.00,5.00,0.20,,,,,,,,,,,,,,,,,,,
InventoryManager,"public void Select_L_wire()
{
    OpenSliderHolder();
    _selectedItem = InventoryItems.L_wire;

    slider_self.maxValue = marketplace.premiumItemsHolder.L_wire;
    if (slider_self.maxValue >= 1) { slider_self.value = 1; }

    selected_info_name_transform.GetComponent<TextMeshProUGUI>().text = GetCorrectLangugeString_ForInventoryItemHeadName(""Large Electronics"");
    selected_info_details_transform.GetComponent<TextMeshProUGUI>().text = GetCorrectLangugeString_ForInventoryItemDESC(""Does your city needs more electronics! Activate this package to get electronics. If you do not have enough space in your warehouse, you can not open this package!"");
}",2.00,0.00,9.00,0.20,,,,,,,,,,,,,,,,,,,
InventoryManager,"public void Open_M_wire()
{
    if (marketplace.premiumItemsHolder.M_wire < sliderAmount_int)
    {
        return;
    }

    marketplace.premiumItemsHolder.M_wire -= sliderAmount_int;

    rawResource.increaseWire_BypassCapacity(1000 * sliderAmount_int);
    UptadeAllItemsAndValues();
    saveManager.SaveStartMainCallback();
}",2.00,0.00,5.00,0.20,,,,,,,,,,,,,,,,,,,
InventoryManager,"public void Select_M_wire()
{
    OpenSliderHolder();
    _selectedItem = InventoryItems.M_wire;

    slider_self.maxValue = marketplace.premiumItemsHolder.M_wire;
    if (slider_self.maxValue >= 1) { slider_self.value = 1; }

    selected_info_name_transform.GetComponent<TextMeshProUGUI>().text = GetCorrectLangugeString_ForInventoryItemHeadName(""Medium Electronics"");
    selected_info_details_transform.GetComponent<TextMeshProUGUI>().text = GetCorrectLangugeString_ForInventoryItemDESC(""Does your city needs more electronics! Activate this package to get electronics. If you do not have enough space in your warehouse, you can not open this package!"");
}",2.00,0.00,9.00,0.20,,,,,,,,,,,,,,,,,,,
InventoryManager,"public void Open_S_wire()
{
    if (marketplace.premiumItemsHolder.S_wire < sliderAmount_int)
    {
        return;
    }

    marketplace.premiumItemsHolder.S_wire -= sliderAmount_int;

    rawResource.increaseWire_BypassCapacity(300 * sliderAmount_int);
    UptadeAllItemsAndValues();
    saveManager.SaveStartMainCallback();
}",2.00,0.00,5.00,0.20,,,,,,,,,,,,,,,,,,,
InventoryManager,"public void Select_S_wire()
{
    OpenSliderHolder();
    _selectedItem = InventoryItems.S_wire;

    slider_self.maxValue = marketplace.premiumItemsHolder.S_wire;
    if (slider_self.maxValue >= 1) { slider_self.value = 1; }

    selected_info_name_transform.GetComponent<TextMeshProUGUI>().text = GetCorrectLangugeString_ForInventoryItemHeadName(""Small Electronics"");
    selected_info_details_transform.GetComponent<TextMeshProUGUI>().text = GetCorrectLangugeString_ForInventoryItemDESC(""Does your city needs more electronics! Activate this package to get electronics. If you do not have enough space in your warehouse, you can not open this package!"");
}",2.00,0.00,9.00,0.20,,,,,,,,,,,,,,,,,,,
InventoryManager,"public void Open_L_chemical()
{
    if (marketplace.premiumItemsHolder.L_chemical < sliderAmount_int)
    {
        return;
    }

    marketplace.premiumItemsHolder.L_chemical -= sliderAmount_int;

    rawResource.increaseChemical_BypassCapacity(17000 * sliderAmount_int);
    UptadeAllItemsAndValues();
    saveManager.SaveStartMainCallback();
}",2.00,0.00,5.00,0.20,,,,,,,,,,,,,,,,,,,
InventoryManager,"public void Select_L_chemical()
{
    OpenSliderHolder();
    _selectedItem = InventoryItems.L_chemical;

    slider_self.maxValue = marketplace.premiumItemsHolder.L_chemical;
    if (slider_self.maxValue >= 1) { slider_self.value = 1; }

    selected_info_name_transform.GetComponent<TextMeshProUGUI>().text = GetCorrectLangugeString_ForInventoryItemHeadName(""Large Chemical"");
    selected_info_details_transform.GetComponent<TextMeshProUGUI>().text = GetCorrectLangugeString_ForInventoryItemDESC(""Does your city needs more chemical! Activate this package to get chemical. If you do not have enough space in your warehouse, you can not open this package!"");
}",2.00,0.00,9.00,0.20,,,,,,,,,,,,,,,,,,,
InventoryManager,"public void Open_M_chemical()
{
    if (marketplace.premiumItemsHolder.M_chemical < sliderAmount_int)
    {
        return;
    }

    marketplace.premiumItemsHolder.M_chemical -= sliderAmount_int;

    rawResource.increaseChemical_BypassCapacity(6000 * sliderAmount_int);
    UptadeAllItemsAndValues();
    saveManager.SaveStartMainCallback();
}",2.00,0.00,5.00,0.20,,,,,,,,,,,,,,,,,,,
InventoryManager,"public void Select_M_chemical()
{
    OpenSliderHolder();
    _selectedItem = InventoryItems.M_chemical;

    slider_self.maxValue = marketplace.premiumItemsHolder.M_chemical;
    if (slider_self.maxValue >= 1) { slider_self.value = 1; }

    selected_info_name_transform.GetComponent<TextMeshProUGUI>().text = GetCorrectLangugeString_ForInventoryItemHeadName(""Medium Chemical"");
    selected_info_details_transform.GetComponent<TextMeshProUGUI>().text = GetCorrectLangugeString_ForInventoryItemDESC(""Does your city needs more chemical! Activate this package to get chemical. If you do not have enough space in your warehouse, you can not open this package!"");
}",2.00,0.00,9.00,0.20,,,,,,,,,,,,,,,,,,,
InventoryManager,"public void Open_S_chemical()
{
    if (marketplace.premiumItemsHolder.S_chemical < sliderAmount_int)
    {
        return;
    }

    marketplace.premiumItemsHolder.S_chemical -= sliderAmount_int;

    rawResource.increaseChemical_BypassCapacity(2500 * sliderAmount_int);
    UptadeAllItemsAndValues();
    saveManager.SaveStartMainCallback();
}",2.00,0.00,5.00,0.20,,,,,,,,,,,,,,,,,,,
InventoryManager,"public void Select_S_chemical()
{
    OpenSliderHolder();
    _selectedItem = InventoryItems.S_chemical;

    slider_self.maxValue = marketplace.premiumItemsHolder.S_chemical;
    if (slider_self.maxValue >= 1) { slider_self.value = 1; }

    selected_info_name_transform.GetComponent<TextMeshProUGUI>().text = GetCorrectLangugeString_ForInventoryItemHeadName(""Small Chemical"");
    selected_info_details_transform.GetComponent<TextMeshProUGUI>().text = GetCorrectLangugeString_ForInventoryItemDESC(""Does your city needs more chemical! Activate this package to get chemical. If you do not have enough space in your warehouse, you can not open this package!"");
}",2.00,0.00,9.00,0.20,,,,,,,,,,,,,,,,,,,
InventoryManager,"public void Open_L_mechpart()
{
    if (marketplace.premiumItemsHolder.L_mechpart < sliderAmount_int)
    {
        return;
    }

    marketplace.premiumItemsHolder.L_mechpart -= sliderAmount_int;
    rawResource.increaseMechanicalPart_BypassCapacity(17000 * sliderAmount_int);
    UptadeAllItemsAndValues();
    saveManager.SaveStartMainCallback();
}",2.00,0.00,5.00,0.20,,,,,,,,,,,,,,,,,,,
InventoryManager,"public void Select_L_mechpart()
{
    OpenSliderHolder();
    _selectedItem = InventoryItems.L_mechpart;

    slider_self.maxValue = marketplace.premiumItemsHolder.L_mechpart;
    if (slider_self.maxValue >= 1) { slider_self.value = 1; }

    selected_info_name_transform.GetComponent<TextMeshProUGUI>().text = GetCorrectLangugeString_ForInventoryItemHeadName(""Large Mechanic"");
    selected_info_details_transform.GetComponent<TextMeshProUGUI>().text = GetCorrectLangugeString_ForInventoryItemDESC(""Does your city needs more mechanics! Activate this package to get mechanics. If you do not have enough space in your warehouse, you can not open this package!"");
}",2.00,0.00,9.00,0.20,,,,,,,,,,,,,,,,,,,
InventoryManager,"public void Open_M_mechpart()
{
    if (marketplace.premiumItemsHolder.M_mechpart < sliderAmount_int)
    {
        return;
    }

    marketplace.premiumItemsHolder.M_mechpart -= sliderAmount_int;

    rawResource.increaseMechanicalPart_BypassCapacity(6000 * sliderAmount_int);
    UptadeAllItemsAndValues();
    saveManager.SaveStartMainCallback();
}",2.00,0.00,5.00,0.20,,,,,,,,,,,,,,,,,,,
InventoryManager,"public void Select_M_mechpart()
{
    OpenSliderHolder();
    _selectedItem = InventoryItems.M_mechpart;

    slider_self.maxValue = marketplace.premiumItemsHolder.M_mechpart;
    if (slider_self.maxValue >= 1) { slider_self.value = 1; }

    selected_info_name_transform.GetComponent<TextMeshProUGUI>().text = GetCorrectLangugeString_ForInventoryItemHeadName(""Medium Mechanic"");
    selected_info_details_transform.GetComponent<TextMeshProUGUI>().text = GetCorrectLangugeString_ForInventoryItemDESC(""Does your city needs more mechanics! Activate this package to get mechanics. If you do not have enough space in your warehouse, you can not open this package!"");
}",2.00,0.00,9.00,0.20,,,,,,,,,,,,,,,,,,,
InventoryManager,"public void Open_S_mechpart()
{
    if (marketplace.premiumItemsHolder.S_mechpart < sliderAmount_int)
    {
        return;
    }

    marketplace.premiumItemsHolder.S_mechpart -= sliderAmount_int
        ;
    rawResource.increaseMechanicalPart_BypassCapacity(2500 * sliderAmount_int);
    UptadeAllItemsAndValues();
    saveManager.SaveStartMainCallback();
}",2.00,0.00,5.00,0.20,,,,,,,,,,,,,,,,,,,
InventoryManager,"public void Select_S_mechpart()
{
    OpenSliderHolder();
    _selectedItem = InventoryItems.S_mechpart;

    slider_self.maxValue = marketplace.premiumItemsHolder.S_mechpart;
    if (slider_self.maxValue >= 1) { slider_self.value = 1; }

    selected_info_name_transform.GetComponent<TextMeshProUGUI>().text = GetCorrectLangugeString_ForInventoryItemHeadName(""Small Mechanic"");
    selected_info_details_transform.GetComponent<TextMeshProUGUI>().text = GetCorrectLangugeString_ForInventoryItemDESC(""Does your city needs more mechanics! Activate this package to get mechanics. If you do not have enough space in your warehouse, you can not open this package!"");
}",2.00,0.00,9.00,0.20,,,,,,,,,,,,,,,,,,,
TopUIResAndUtilsOpenClose,"public void OpenRawResAndUtils()
{
    audioManager.Play_defaultButtonClick();

    //rawResTransform.gameObject.SetActive(true);
    //utilsTransform.gameObject.SetActive(true);
    UIBoxAnimate.UI_Anim_OnOpen(rawResTransform);
    UIBoxAnimate.UI_Anim_OnOpen(utilsTransform);

    closedButtonToOpenTransform.gameObject.SetActive(false);
}",2.00,0.00,4.00,0.20,,,,,,,,,,,,,,,,,,,
TopUIResAndUtilsOpenClose,"public void CloseRawResAndUtils()
{
    audioManager.Play_defaultButtonClick();

    //rawResTransform.gameObject.SetActive(false);
    //utilsTransform.gameObject.SetActive(false);
    UIBoxAnimate.UI_Anim_OnClose(rawResTransform);
    UIBoxAnimate.UI_Anim_OnClose(utilsTransform);

    closedButtonToOpenTransform.gameObject.SetActive(true);
}",2.00,0.00,4.00,0.20,,,,,,,,,,,,,,,,,,,
TopUIRightGCSeedsOpenClose,"public void CloseGcAndSeedsHolder()
{
    audioManager.Play_defaultButtonClick();

    //rightGcAndSeedsTransform.gameObject.SetActive(false);
    UIBoxAnimate.UI_Anim_OnClose(rightGcAndSeedsTransform);

    openBtnTransform.gameObject.SetActive(true);
    closeBtnTransform.gameObject.SetActive(false);
}",2.00,0.00,4.00,0.20,,,,,,,,,,,,,,,,,,,
TopUIRightGCSeedsOpenClose,"public void OpenGcAndSeedsHolder()
{
    audioManager.Play_defaultButtonClick();

    //rightGcAndSeedsTransform.gameObject.SetActive(true);
    UIBoxAnimate.UI_Anim_OnOpen(rightGcAndSeedsTransform);

    openBtnTransform.gameObject.SetActive(false);
    closeBtnTransform.gameObject.SetActive(true);
}",2.00,0.00,4.00,0.20,,,,,,,,,,,,,,,,,,,
UIBoxAnimate,"public static void UI_Anim_OnOpen(Transform _transform)
{
    _transform.gameObject.SetActive(true);
    var canvasGroup = _transform.gameObject.GetComponent<CanvasGroup>();
    if (canvasGroup == null)
    {
        canvasGroup = _transform.gameObject.AddComponent<CanvasGroup>();
    }
    canvasGroup.alpha = 0f;
    canvasGroup.DOFade(1, 0.4f).SetEase(Ease.InQuart);
    _transform.GetComponent<RectTransform>().DOLocalJump(new Vector3(0, 1, 0), 50, 1, _locaJumpOpenDuration);
}",0.00,0.00,11.00,1.50,,,,,,,,,,,,,,,,,,,
UIBoxAnimate,"public static void UI_Anim_OnClose(Transform _transform)
{
    var canvasGroup = _transform.gameObject.GetComponent<CanvasGroup>();
    if (canvasGroup == null)
    {
        canvasGroup = _transform.gameObject.AddComponent<CanvasGroup>();
    }
    canvasGroup.alpha = 1f;
    _transform.GetComponent<RectTransform>().DOLocalJump(new Vector3(0, 1, 0), 50, 1, _locaJumpCloseDuration);
    canvasGroup.DOFade(0, 0.4f).OnComplete(() =>
    {
        _transform.gameObject.SetActive(false);
    });
}",0.00,0.00,11.00,1.50,,,,,,,,,,,,,,,,,,,
UICollectable,"public void Init(Transform followTransform_, PlacedObject_Done followPlcd_Done_, Vector3 targeTPos_, Transform sprite_anim_, Transform parent_)
{
    followTransform = followTransform_;
    followPlcd_Done = followPlcd_Done_;
    targeTPos = targeTPos_;
    sprite_anim = sprite_anim_;
    anim_parent = parent_;

    var gridCellSize = GridBuildingSystem.Instance.GetGrid().GetCellSize();
    var width_plcd = followPlcd_Done_.getPlacedObjectTypeSO().width * gridCellSize;
    var height_plcd = followPlcd_Done_.getPlacedObjectTypeSO().height * gridCellSize;

    offset = new Vector3(width_plcd / 2.0f, 10.0f, height_plcd / 2.0f);
    //Debug.Log(offset);

    for (int i = 0; i < 20; i++)
    {
        var tr = Instantiate(sprite_anim_, transform.position, transform.rotation, parent: parent_);
        tr.gameObject.SetActive(false);
        animQueue.Enqueue(tr);
        animList.Add(tr);
    }
}",0.00,0.00,18.00,2.00,,,,,,,,,,,,,,,,,,,
UICollectable,"private void Start()
{
    _saveManager = SaveManager.Instance;
    _mainCamera = Camera.main;
}",0.00,0.00,2.00,0.01,,,,,,,,,,,,,,,,,,,
UICollectable,"void LateUpdate()
{
    // should update self position on the ui 
    // based on parent connected plcdobject_Done with-> camera world to screen

    Vector3 screenPos = _mainCamera.WorldToScreenPoint(followTransform.position + offset);
    transform.position = screenPos;
}",0.00,0.00,2.00,1.50,,,,,,,,,,,,,,,,,,,
UICollectable,"public void OnCollectSelfClicked()
{
    var storageAmount = (int)followPlcd_Done.GetPlcdInternalStorage().factorySelfStorage;
    //Debug.Log(""storageAmount: "" + storageAmount);
    if (storageAmount < 1) { return; }

    if (followPlcd_Done != null && followPlcd_Done.getPlacedObjectTypeSO().kod == ""MAIN"")
    {
        followPlcd_Done.CollectSelfUi_Main();
    }
    gameObject.SetActive(false);
    followPlcd_Done.SetIsSelfCollectUiButtonEnabled(false);

    _saveManager.SaveStartMainCallback();
    AnimatAndCloseeOnCollectClicked(storageAmount);

}",2.00,0.00,10.00,1.00,,,,,,,,,,,,,,,,,,,
UICollectable,"void OnBecameVisible()
{
    Debug.Log(""OnBecameVisible"");
    _isSelfVisibleOnCanvas = true;
}",0.00,0.00,2.00,0.25,,,,,,,,,,,,,,,,,,,
UICollectable,"void OnBecameInvisible()
{
    Debug.Log(""OnBecameInvisible"");
    _isSelfVisibleOnCanvas = false;
}",0.00,0.00,2.00,0.25,,,,,,,,,,,,,,,,,,,
UISettingsHelper,"private void Start()
{
    playerGameSettings = PlayerGameSettings.Instance;
    buildingsManager = BuildingsManager.Instance;
    assistantCheckHelperManager = AssistantCheckHelperManager.Instance;
}",0.00,0.00,3.00,0.02,,,,,,,,,,,,,,,,,,,
UISettingsHelper,"public void CloseSettings()
{
    //openCloseSettingsTransform.gameObject.SetActive(false);
    UIBoxAnimate.UI_Anim_OnClose(openCloseSettingsTransform);
}",2.00,0.00,1.00,0.35,,,,,,,,,,,,,,,,,,,
UISettingsHelper,"public void SwitchMusicSetting()
{
    playerGameSettings.SwtichSetting(PlayerGameSettings.UserGameSettingEnum.music);

    if (music_onBtn.gameObject.activeSelf)
    {
        music_onBtn.gameObject.SetActive(false);
        music_offBtn.gameObject.SetActive(true);
    }
    else
    {
        music_onBtn.gameObject.SetActive(true);
        music_offBtn.gameObject.SetActive(false);
    }
}",2.00,0.00,6.00,0.50,,,,,,,,,,,,,,,,,,,
UISettingsHelper,"public void SwitchShadowSetting()
{
    playerGameSettings.SwtichSetting(PlayerGameSettings.UserGameSettingEnum.shadow);

    if (shadow_onBtn.gameObject.activeSelf)
    {
        shadow_onBtn.gameObject.SetActive(false);
        shadow_offBtn.gameObject.SetActive(true);
    }
    else
    {
        shadow_onBtn.gameObject.SetActive(true);
        shadow_offBtn.gameObject.SetActive(false);
    }
}",2.00,0.00,6.00,0.50,,,,,,,,,,,,,,,,,,,
UISettingsHelper,"public void SwitchCamTiltSetting()
{
    playerGameSettings.SwtichSetting(PlayerGameSettings.UserGameSettingEnum.camTilt);

    if (camTilt_onBtn.gameObject.activeSelf)
    {
        camTilt_onBtn.gameObject.SetActive(false);
        camTilt_offBtn.gameObject.SetActive(true);
    }
    else
    {
        camTilt_onBtn.gameObject.SetActive(true);
        camTilt_offBtn.gameObject.SetActive(false);
    }
}",2.00,0.00,6.00,0.50,,,,,,,,,,,,,,,,,,,
UISettingsHelper,"public void SwitchLessNotificationSetting()
{
    playerGameSettings.SwtichSetting(PlayerGameSettings.UserGameSettingEnum.lessNotifications);

    if (lessNotification_onBtn.gameObject.activeSelf)
    {
        lessNotification_onBtn.gameObject.SetActive(false);
        lessNotification_offBtn.gameObject.SetActive(true);
    }
    else
    {
        lessNotification_onBtn.gameObject.SetActive(true);
        lessNotification_offBtn.gameObject.SetActive(false);
    }
}",2.00,0.00,6.00,0.50,,,,,,,,,,,,,,,,,,,
UISettingsHelper,"public void SwitchQualitySetting()
{
    playerGameSettings.SwtichSetting(PlayerGameSettings.UserGameSettingEnum.quality);

    if (quality_highBtn.gameObject.activeSelf)
    {
        quality_highBtn.gameObject.SetActive(false);
        quality_lowBtn.gameObject.SetActive(true);
    }
    else
    {
        quality_highBtn.gameObject.SetActive(true);
        quality_lowBtn.gameObject.SetActive(false);
    }
}",2.00,0.00,6.00,0.50,,,,,,,,,,,,,,,,,,,
UiBuildingsBar,"private void Awake()
{
    gridBuildingSystem = GridBuildingSystem.Instance;
    farmlandGridBuildingSystem = FarmlandGridBuildingSystem.Instance;
}",0.00,0.00,2.00,0.01,,,,,,,,,,,,,,,,,,,
UiBuildingsBar,"private void onBaseExpanderButtonClicked()
{
    if (openHolder1.style.display == DisplayStyle.Flex)
    {
        openHolder1.style.display = DisplayStyle.None;
    }
    else
    {
        openHolder1.style.display = DisplayStyle.Flex;
    }

    openHolder2.style.display = DisplayStyle.None;
    openHolder3.style.display = DisplayStyle.None;
    openHolder4.style.display = DisplayStyle.None;
}",2.00,0.00,6.00,0.70,,,,,,,,,,,,,,,,,,,
UiBuildingsBar,"private void onfactoriesExpanderButtonClicked()
{
    if (openHolder2.style.display == DisplayStyle.Flex)
    {
        openHolder2.style.display = DisplayStyle.None;
    }
    else
    {
        openHolder2.style.display = DisplayStyle.Flex;
    }

    openHolder1.style.display = DisplayStyle.None;
    openHolder3.style.display = DisplayStyle.None;
    openHolder4.style.display = DisplayStyle.None;
}",2.00,0.00,6.00,0.70,,,,,,,,,,,,,,,,,,,
UiBuildingsBar,"private void onUtilsExpanderButtonClicked()
{
    if (openHolder3.style.display == DisplayStyle.Flex)
    {
        openHolder3.style.display = DisplayStyle.None;
    }
    else
    {
        openHolder3.style.display = DisplayStyle.Flex;
    }

    openHolder1.style.display = DisplayStyle.None;
    openHolder2.style.display = DisplayStyle.None;
    openHolder4.style.display = DisplayStyle.None;
}",2.00,0.00,6.00,0.70,,,,,,,,,,,,,,,,,,,
UiBuildingsBar,"private void onEnergyExpanderButtonClicked()
{
    if (openHolder4.style.display == DisplayStyle.Flex)
    {
        openHolder4.style.display = DisplayStyle.None;
    }
    else
    {
        openHolder4.style.display = DisplayStyle.Flex;
    }

    openHolder1.style.display = DisplayStyle.None;
    openHolder2.style.display = DisplayStyle.None;
    openHolder3.style.display = DisplayStyle.None;
}",2.00,0.00,6.00,0.70,,,,,,,,,,,,,,,,,,,
UiBuildingsBar,"private void onFarmlandFarmExpanderButtonClicked()
{
    if (openHolder1Farm.style.display == DisplayStyle.Flex)
    {
        openHolder1Farm.style.display = DisplayStyle.None;
    }
    else
    {
        openHolder1Farm.style.display = DisplayStyle.Flex;
    }
    // and close other open holder style to none if any exist
}",2.00,0.00,6.00,0.70,,,,,,,,,,,,,,,,,,,
UiBuildingsBar,"public void SetHQVisibilityNone()
{
    Holder1BuildingButton1.style.display = DisplayStyle.None;
}",2.00,0.00,1.00,0.08,,,,,,,,,,,,,,,,,,,
UiBuildingsBar,"private void onBuildingButton1Clicked()
{
    gridBuildingSystem.SetSelectedPlacedObjectTypeSO(5);
}",2.00,0.00,1.00,0.08,,,,,,,,,,,,,,,,,,,
UiBuildingsBar,"private void onBuildingButton2Clicked()
{
    gridBuildingSystem.SetSelectedPlacedObjectTypeSO(4);
}",2.00,0.00,1.00,0.08,,,,,,,,,,,,,,,,,,,
UiBuildingsBar,"private void onBuildingButton3Clicked()
{
    gridBuildingSystem.SetSelectedPlacedObjectTypeSO(6);
}",2.00,0.00,1.00,0.08,,,,,,,,,,,,,,,,,,,
UiBuildingsBar,"private void onBuildingButton4Clicked()
{
    gridBuildingSystem.SetSelectedPlacedObjectTypeSO(9);
}",2.00,0.00,1.00,0.08,,,,,,,,,,,,,,,,,,,
UiBuildingsBar,"private void onBuildingButton5Clicked()
{
    gridBuildingSystem.SetSelectedPlacedObjectTypeSO(0);
}",2.00,0.00,1.00,0.08,,,,,,,,,,,,,,,,,,,
UiBuildingsBar,"private void onBuildingButton6Clicked()
{
    gridBuildingSystem.SetSelectedPlacedObjectTypeSO(1);
}",2.00,0.00,1.00,0.08,,,,,,,,,,,,,,,,,,,
UiBuildingsBar,"private void onBuildingButton7Clicked()
{
    gridBuildingSystem.SetSelectedPlacedObjectTypeSO(2);
}",2.00,0.00,1.00,0.08,,,,,,,,,,,,,,,,,,,
UiBuildingsBar,"private void onBuildingButton8Clicked()
{
    gridBuildingSystem.SetSelectedPlacedObjectTypeSO(3);
}",2.00,0.00,1.00,0.08,,,,,,,,,,,,,,,,,,,
UiBuildingsBar,"private void onBuildingButton9Clicked()
{
    gridBuildingSystem.SetSelectedPlacedObjectTypeSO(7);
}",2.00,0.00,1.00,0.08,,,,,,,,,,,,,,,,,,,
UiBuildingsBar,"private void onBuildingButton10Clicked()
{
    gridBuildingSystem.SetSelectedPlacedObjectTypeSO(10);
}",2.00,0.00,1.00,0.08,,,,,,,,,,,,,,,,,,,
UiBuildingsBar,"private void onBuildingButton11Clicked()
{
    gridBuildingSystem.SetSelectedPlacedObjectTypeSO(11);
}",2.00,0.00,1.00,0.08,,,,,,,,,,,,,,,,,,,
UiBuildingsBar,"private void onBuildingButton12Clicked()
{
    gridBuildingSystem.SetSelectedPlacedObjectTypeSO(8);
}",2.00,0.00,1.00,0.08,,,,,,,,,,,,,,,,,,,
UiBuildingsBar,"private void onBuildingButton13Clicked()
{
    gridBuildingSystem.SetSelectedPlacedObjectTypeSO(12);
}",2.00,0.00,1.00,0.08,,,,,,,,,,,,,,,,,,,
UiBuildingsBar,"private void onBuildingButton14Clicked()
{
    gridBuildingSystem.SetSelectedPlacedObjectTypeSO(13);
}",2.00,0.00,1.00,0.08,,,,,,,,,,,,,,,,,,,
UiBuildingsBar,"private void onBuildingButton15Clicked()
{
    gridBuildingSystem.SetSelectedPlacedObjectTypeSO(14);
}",2.00,0.00,1.00,0.08,,,,,,,,,,,,,,,,,,,
UiBuildingsBar,"private void onBuildingButton16Clicked()
{
    gridBuildingSystem.SetSelectedPlacedObjectTypeSO(15);
}",2.00,0.00,1.00,0.08,,,,,,,,,,,,,,,,,,,
UiBuildingsBar,"private void onBuildingButton17Clicked()
{
    gridBuildingSystem.SetSelectedPlacedObjectTypeSO(16);
}",2.00,0.00,1.00,0.08,,,,,,,,,,,,,,,,,,,
UiBuildingsBar,"private void onBuildingButton18Clicked()
{
    gridBuildingSystem.SetSelectedPlacedObjectTypeSO(17);
}",2.00,0.00,1.00,0.08,,,,,,,,,,,,,,,,,,,
UiBuildingsBar,"private void onBuildingButton19Clicked()
{
    gridBuildingSystem.SetSelectedPlacedObjectTypeSO(18);
}",2.00,0.00,1.00,0.08,,,,,,,,,,,,,,,,,,,
UiBuildingsBar,"private void onBuildingButton20Clicked()
{
    gridBuildingSystem.SetSelectedPlacedObjectTypeSO(19);
}",2.00,0.00,1.00,0.08,,,,,,,,,,,,,,,,,,,
UiBuildingsBar,"private void onBuildingButton21Clicked()
{
    gridBuildingSystem.SetSelectedPlacedObjectTypeSO(20);
}",2.00,0.00,1.00,0.08,,,,,,,,,,,,,,,,,,,
UiBuildingsBar,"private void onBuildingButton22Clicked()
{
    gridBuildingSystem.SetSelectedPlacedObjectTypeSO(21);
}",2.00,0.00,1.00,0.08,,,,,,,,,,,,,,,,,,,
UiBuildingsBar,"public void OpenCityBuildingBar()
{
    bottomContainer.style.display = DisplayStyle.Flex;
    bottomFarmContainer.style.display = DisplayStyle.None;
}",2.00,0.00,2.00,0.15,,,,,,,,,,,,,,,,,,,
UiBuildingsBar,"public void OpenFarmBuildingBar()
{
    bottomContainer.style.display = DisplayStyle.None;
    bottomFarmContainer.style.display = DisplayStyle.Flex;
}",2.00,0.00,2.00,0.15,,,,,,,,,,,,,,,,,,,
UiBuildingsBar,"// farm build buttons
public void onFarmlandFarmButtonClicked()
{
    farmlandGridBuildingSystem.SetSelectedPlacedObjectTypeSO(0);
}",2.00,0.00,1.00,0.10,,,,,,,,,,,,,,,,,,,
UiLeader,"private void Awake()
{
    leaderManager = Leader.Instance;
}",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
UiLeader,"private void OnEnable()
{
    uiDoc = GetComponent<UIDocument>();
    root = uiDoc.rootVisualElement;

    VisualElement bottomContainer = root.Q<VisualElement>(""bottomContainer"");
    VisualElement bottomRightCircle = root.Q<VisualElement>(""bottomRightCircle"");

    baskanLvl = bottomRightCircle.Q<GroupBox>(""levelHolder"").Q<Label>(""lvlValue"");

    xpCurrent = bottomRightCircle.Q<GroupBox>(""infoHolder"").Q<Label>(""baskanXpCurrent"");
    xpNext = bottomRightCircle.Q<GroupBox>(""infoHolder"").Q<Label>(""baskanXpNext"");

}",0.00,0.00,16.00,0.20,,,,,,,,,,,,,,,,,,,
UiLeader,"private void FixedUpdate()
{
    baskanLvl.text = leaderManager.GetLeaderLevel().ToString();

    xpCurrent.text = leaderManager.GetLeaderExp().ToString();
    xpNext.text = leaderManager.GetNextXpRequired().ToString();
}",0.00,0.00,9.00,0.07,,,,,,,,,,,,,,,,,,,
UiNotification,"void OnEnable()
{
    placedObject_Done = null;
    uiDoc = GetComponent<UIDocument>();
    root = uiDoc.rootVisualElement;

    root.style.display = DisplayStyle.None;

    VisualElement middleLeftContainer = root.Q<VisualElement>(""middleLeftContainer"");

    closeButton = middleLeftContainer.Q<VisualElement>(""containerCloseHolder"").Q<Button>(""closeButton"");

    topHeadName = middleLeftContainer.Q<GroupBox>(""topHeadHolder"").Q<Label>(""headLabel"");
    topHeadDetailsHolder = middleLeftContainer.Q<GroupBox>(""topHeadDetailsHolder"");
    detailsLabel = topHeadDetailsHolder.Q<Label>(""detailsLabel"");


    closeButton.RegisterCallback<ClickEvent>(e => CloseDetailsUi());
}",0.00,0.00,17.00,0.25,,,,,,,,,,,,,,,,,,,
UiNotification,"public void ChangeWhichObjectToSetDetails(PlacedObject_Done placedObjectDone, string headText, string detailsText)
{
    // placedObjectDone might be used for notification sender building or related data
    topHeadName.text = headText;
    detailsLabel.text = detailsText;
    OpenDetailsUi();
}",2.00,0.00,3.00,0.10,,,,,,,,,,,,,,,,,,,
UiNotification,"private void OpenDetailsUi()
{
    root.style.display = DisplayStyle.Flex;
}",2.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
UiNotification,"private void CloseDetailsUi()
{
    root.style.display = DisplayStyle.None;
}",2.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
UiTopResources,"private void Awake()
{
    holder = RawResource.Instance;
    utilitiesManager = Utilities.Instance;
    seedManager = SeedResource.Instance;
}",0.00,0.00,3.00,0.02,,,,,,,,,,,,,,,,,,,
UiTopResources,"private void addFoodDebug()
{
    seedManager.increaseRegularSeedAmount(1);
}",2.00,0.00,1.00,0.02,,,,,,,,,,,,,,,,,,,
UiTopResources,"private void OpenMarketSeed()
{
    marketFull.style.display = DisplayStyle.Flex;
}",2.00,0.00,1.00,0.02,,,,,,,,,,,,,,,,,,,
UiTopResources,"private void CloseMarketSeed()
{
    marketFull.style.display = DisplayStyle.None;
}",2.00,0.00,1.00,0.02,,,,,,,,,,,,,,,,,,,
UiTopResources,"private void BuyNormalSeed()
{
    Vector3 mousePosition = Mouse3D.GetMouseWorldPosition();
    if (holder.TryConsumeYP(1000000))
    {
        addFoodDebug();
    }
    else
    {
    }

}",2.00,0.00,4.00,0.05,,,,,,,,,,,,,,,,,,,
UiTopResources,"private void ActivateBoost(Utilities.UtilsTypes type)
{
    var hasEnoughRes = holder.TryConsumeYP(10000);
    if (hasEnoughRes) { utilitiesManager.AddBoostUtils(type); }
}",0.00,0.00,3.00,0.03,,,,,,,,,,,,,,,,,,,
UiTopResources,"private void Update()
{
    ypButton.text = holder.getYp().ToString(""F0"");
    cementButton.text = holder.getCement().ToString(""F0"");
    wireButton.text = holder.getWire().ToString(""F0"");
    mechPartButton.text = holder.getMechanicalPart().ToString(""F0"");
    chemButton.text = holder.getChemical().ToString(""F0"");
    foodButton.text = holder.getFood().ToString(""F0"");

    electricLabel.text = utilitiesManager.GetAllElectricConsumption().ToString(""F1"") + "" / "" + utilitiesManager.GetElectricCap().ToString(""F0"");
    kanalizasyonLabel.text = utilitiesManager.GetAllWaterWasteConsumption().ToString(""F1"") + "" / "" + utilitiesManager.GetWaterWasteCap().ToString(""F0"");
    suLabel.text = utilitiesManager.GetWaterInStrg().ToString(""F1"") + "" / "" + utilitiesManager.GetWaterStrgCap().ToString(""F0"");

    suConsumptionLabel.text = utilitiesManager.GetUiWaterConsumption().ToString(""F1"");
    suProductionLabel.text = utilitiesManager.GetUiWaterProduction().ToString(""F1"");

    normalSeedCountLabel.text = seedManager.getRegularSeedAmount().ToString();
    preSeedCountLabel.text = seedManager.getPremiumSeedAmount().ToString();
}",0.00,0.00,26.00,0.50,,,,,,,,,,,,,,,,,,,
AchievementsManager,"private void Awake()
{
    if (Instance == null)
    {
        Instance = this;
    }
    else if (Instance != this)
    {
        Destroy(gameObject);
    }
}",0.00,0.00,3.00,0.01,,,,,,,,,,,,,,,,,,,
AchievementsManager,"private void Start()
{
    Debug.Log(""AchievementsManager Start"");
    achievementsInfo = AchievementsInfo.Instance;
    resourceManager = RawResource.Instance;
    saveManager = SaveManager.Instance;
    buildingsManager = BuildingsManager.Instance;
    _mainCamera = Camera.main;

    StartCoroutine(InitializeDelayedAtStart());
    StartCoroutine(DelayedExclamationMarkAtStart());

    // ach anim
    Init();
}",0.00,0.00,11.00,0.10,,,,,,,,,,,,,,,,,,,
AchievementsManager,"public void AddPoint(int point, bool isLoad = false)
{
    // if from load only add
    if (isLoad) { AddPointOnly(point); return; }
    // else

    AddPointOnly(point);

    // check if exc mark should visible
    DetermineIfExclamationMarkOnAchShouldBeVisibleOnAnyChange();
}",0.00,0.00,4.00,0.20,,,,,,,,,,,,,,,,,,,
AchievementsManager,"private int GetClaimableAchCount()
{
    var claimableCount = 0;
    var ach = achievementsInfo.myDeserializedAchievementsRootClass;
    for (int i = 0; i < ach.Count; i++)
    {
        if (ach[i].requiredPoints < achievementPoint)
        {
            claimableCount++;
        }
    }
    return claimableCount;
}",0.00,0.00,5.00,0.15,,,,,,,,,,,,,,,,,,,
AchievementsManager,"private void DetermineIfExclamationMarkOnAchShouldBeVisibleOnAnyChange()
{
    var claimableCount = GetClaimableAchCount();
    var claimedCount = claimedAchievementsLevelList.Count;
    if (claimedCount < claimableCount)
    {
        // there are achievements that can be claimable
        // exc mark visible
        achievementsNewExclamationMarkOnNewAch.gameObject.SetActive(true);
    }
    else
    {
        // there are no achievements that can be claimable
        // exc mark non-visible
        achievementsNewExclamationMarkOnNewAch.gameObject.SetActive(false);
    }
}",0.00,0.00,8.00,0.30,,,,,,,,,,,,,,,,,,,
AchievementsManager,private void AddPointOnly(int point) { achievementPoint += point; },0.00,0.00,1.00,0.02,,,,,,,,,,,,,,,,,,,
AchievementsManager,"public void CloseAchievementsHolder()
{
    audioManager.Play_defaultButtonClick();
    //achievementsTransform.gameObject.SetActive(false);
    UIBoxAnimate.UI_Anim_OnClose(achievementsTransform);
}",2.00,0.00,2.00,0.20,,,,,,,,,,,,,,,,,,,
AchievementsManager,"public void OpenAchievementsHolder()
{
    audioManager.Play_defaultButtonClick();
    T_pointAmount.GetComponent<TextMeshProUGUI>().text = achievementPoint.ToString();

    buildingsManager.DisableAnyGhostWhileBuildingOnHolderOpen();

    var ach = achievementsInfo.myDeserializedAchievementsRootClass;

    // foreach list of achievement if points is not enough
    // set text to reach 600 point etc
    for (int i = 1; i < achievemtBtnTextTransforms.Count + 1; i++)
    {
        if (ach[i - 1].requiredPoints > achievementPoint)
        {
            achievemtBtnTextTransforms[i - 1].text = ach[i - 1].requiredPoints.ToString() + "" "" + GetCorrectLangugeString_ForAchievements(""Points required"");
        }
        else
        {
            achievemtBtnTextTransforms[i - 1].text = GetCorrectLangugeString_ForAchievements(""Claim"");
        }
    }

    // foreach activated list
    // make text claimed
    foreach (var index in claimedAchievementsLevelList)
    {
        //Debug.Log(""index: "" + index);
        achievemtBtnTextTransforms[index - 1].text = GetCorrectLangugeString_ForAchievements(""Claimed"");
    }

    //achievementsTransform.gameObject.SetActive(true);
    UIBoxAnimate.UI_Anim_OnOpen(achievementsTransform);
}",2.00,0.00,14.00,0.50,,,,,,,,,,,,,,,,,,,
AchievementsManager,public List<int> GetAchievementsLevelList() { return claimedAchievementsLevelList; },0.00,0.00,1.00,0.03,,,,,,,,,,,,,,,,,,,
AchievementsManager,public void SetAchievementListOnly(List<int> list) { claimedAchievementsLevelList = list; },0.00,0.00,1.00,0.03,,,,,,,,,,,,,,,,,,,
AchievementsManager,"public void SetAchievementListMain(List<int> list)
{
    SetAchievementListOnly(list);
}",0.00,0.00,1.00,0.03,,,,,,,,,,,,,,,,,,,
AchievementsManager,"public void AddToClaimedList(int level)
{
    if (claimedAchievementsLevelList.Contains(level)) { return; }
    claimedAchievementsLevelList.Add(level);
}",0.00,0.00,2.00,0.10,,,,,,,,,,,,,,,,,,,
AchievementsManager,"public void ClaimeAAchievement(int level)
{
    if (claimedAchievementsLevelList.Contains(level)) { return; }

    // check if required points is satisfied
    if (CheckPointsRequirement(level))
    {
        // add res and gc, pc
        // if there are space available
        var ach = achievementsInfo.myDeserializedAchievementsRootClass[level - 1];

        //resourceManager.IncreaseRawResources_BypassCapacity(ach.award.allRawRes, ach.award.allRawRes, ach.award.allRawRes, ach.award.allRawRes, ach.award.gc);
        resourceManager.IncreaseRawResources_BypassCapacity(resourceManager.getCementCap() * 0.2f, resourceManager.getWireCap() * 0.2f, resourceManager.getChemicalCap() * 0.2f, resourceManager.getMechanicalPartCap() * 0.2f, ach.award.gc);

        AddToClaimedList(level);

        DetermineIfExclamationMarkOnAchShouldBeVisibleOnAnyChange();

        saveManager.SaveStartMainCallback();
    }

    OpenAchievementsHolder();
}",0.00,0.00,13.00,1.00,,,,,,,,,,,,,,,,,,,
AchievementsManager,"private bool CheckPointsRequirement(int level)
{
    var ach = achievementsInfo.myDeserializedAchievementsRootClass[level - 1];

    if (ach != null && ach.requiredPoints <= achievementPoint)
    {
        // satisfied
        return true;
    }
    return false;
}",0.00,0.00,2.00,0.15,,,,,,,,,,,,,,,,,,,
AchievementsManager,"private void OnAchievementConstructionAddBtnListeners(Button btn, int index)
{
    btn.onClick.AddListener(() => ClaimeAAchievement(index));
    btn.onClick.AddListener(() => OnBtnClickSound());
}",0.00,0.00,4.00,0.25,,,,,,,,,,,,,,,,,,,
AchievementsManager,"private void OnBtnClickSound()
{
    audioManager.Play_defaultButtonClick();
}",0.00,0.00,1.00,0.05,,,,,,,,,,,,,,,,,,,
AchievementsManager,"private IEnumerator DelayedExclamationMarkAtStart()
{
    yield return null;
    DetermineIfExclamationMarkOnAchShouldBeVisibleOnAnyChange();
}",0.00,0.00,1.00,0.02,,,,,,,,,,,,,,,,,,,
AchievementsManager,"public void Init()
{
    for (int i = 0; i < 15; i++)
    {
        var tr = Instantiate(achievementSprinteForAnim, transform.position, transform.rotation, parent: animParent);
        tr.gameObject.SetActive(false);
        animQueue.Enqueue(tr);
    }
}",0.00,0.00,4.00,0.50,,,,,,,,,,,,,,,,,,,
AchievementsManager,"private string GetCorrectLangugeString_ForAchievements_GC()
{
    var currentLocaleCode = LocalizationSettings.SelectedLocale.Identifier.Code;

    switch (currentLocaleCode)
    {
        // LANGUAGE
        case ""en"": return ""GC"";
        case ""zh"": return ""绿硬币"";
        case ""fr"": return ""PV"";
        case ""de"": return ""GM"";
        case ""ru"": return ""Зм"";
        case ""es"": return ""MV"";
        case ""tr"": return ""YS"";
    };

    return ""GC"";
}",0.00,0.00,2.00,0.05,,,,,,,,,,,,,,,,,,,
AvatarIconManager,"private void Start()
{
    saveManager = SaveManager.Instance;
    buildingsManager = BuildingsManager.Instance;

    foreach (var avatar in avatarIconSOList)
    {
        // foreach avatar create gameobject and add listener
        // while checking if it is the active one

        var go = Instantiate(avatarPrefab, parent: content);

        avatar.transform = go;
        // assign btn callback
        var btn = go.GetComponent<Button>();
        OnAvatarIconConstructionAddBtnListeners(btn, avatar.id);

        // add sprite img to the instantiated gameobject as children
        var sprite = Instantiate(defaultSpriteImagePrefab, parent: go);

        // re-assign correct image sprite
        sprite.GetComponent<Image>().sprite = avatar.sprite;

        // check if active and assign active prefab
        if (currentlySelectedAvatarIconId == avatar.id)
        {
            currentlySelectedAvatarIconSO = avatarIconSOList[avatar.id];
            currentlySelectedAvatarIconId = avatar.id;
            InstantiateNewSelectedIconForAvatarIconFrame(go);
        }
    }

    avatarIconTransformInGameView.GetComponent<Image>().sprite = currentlySelectedAvatarIconSO.sprite;
}",0.00,0.00,15.00,0.50,,,,,,,,,,,,,,,,,,,
AvatarIconManager,"public void OpenAvatarIconSelection()
{
    // TODO
    // check if selected avatar icon index loaded in time
    // if not load again
    _audioManager.Play_defaultButtonClick();

    buildingsManager.DisableAnyGhostWhileBuildingOnHolderOpen();

    holder.gameObject.SetActive(true);
}",2.00,0.00,3.00,0.25,,,,,,,,,,,,,,,,,,,
AvatarIconManager,"void CloseAvatarIconSelection()
{
    _audioManager.Play_defaultButtonClick();

    holder.gameObject.SetActive(false);
}",2.00,0.00,2.00,0.10,,,,,,,,,,,,,,,,,,,
AvatarIconManager,"public void ChangeSelectedAvatarIcon(int index)
{
    if (currentlySelectedAvatarIconId == index) return;
    currentlySelectedAvatarIconSO = avatarIconSOList[index];
    currentlySelectedAvatarIconId = index;

    DestroyPreviousSelectedAvatarIconGameObject();

    InstantiateNewSelectedIconForAvatarIconFrame(avatarIconSOList[index].transform);

    // change the selected icon to the newly selected object
    avatarIconTransformInGameView.GetComponent<Image>().sprite = currentlySelectedAvatarIconSO.sprite;

    _audioManager.Play_defaultButtonClick();
    saveManager.SaveStartMainCallback();
}",2.00,0.00,8.00,1.00,,,,,,,,,,,,,,,,,,,
AvatarIconManager,"private void DestroyPreviousSelectedAvatarIconGameObject()
{
    if (selectedAvatarIconGameObjectSelectedIcon != null)
    {
        Destroy(selectedAvatarIconGameObjectSelectedIcon.gameObject);
    }
}",2.00,0.00,2.00,0.15,,,,,,,,,,,,,,,,,,,
AvatarIconManager,"private void InstantiateNewSelectedIconForAvatarIconFrame(Transform parentAvatarFrame)
{
    selectedAvatarIconGameObjectSelectedIcon = Instantiate(selectedIconPrefab, parent: parentAvatarFrame);
}",2.00,0.00,1.00,0.10,,,,,,,,,,,,,,,,,,,
AvatarIconManager,public int GetSelectedAvatarIconIndex() { return currentlySelectedAvatarIconId; },2.00,0.00,1.00,0.03,,,,,,,,,,,,,,,,,,,
AvatarIconManager,"public void SetSelectedAvatarIconIndexForLoad(int index)
{
    if (currentlySelectedAvatarIconId == index) return;
    currentlySelectedAvatarIconSO = avatarIconSOList[index];
    currentlySelectedAvatarIconId = index;

    DestroyPreviousSelectedAvatarIconGameObject();

    InstantiateNewSelectedIconForAvatarIconFrame(avatarIconSOList[index].transform);

    // change the selected icon to the newly selected object
    avatarIconTransformInGameView.GetComponent<Image>().sprite = currentlySelectedAvatarIconSO.sprite;
}",2.00,0.00,7.00,0.50,,,,,,,,,,,,,,,,,,,
AvatarIconManager,"private void OnAvatarIconConstructionAddBtnListeners(Button btn, int index)
{
    btn.onClick.AddListener(() => ChangeSelectedAvatarIcon(index));
}",2.00,0.00,2.00,0.03,,,,,,,,,,,,,,,,,,,
BuildingFirstConstructionDetailsManager,"private void Start()
{
    defaulBuildingInfo = BuildingInfo.Instance;
    technologyInfo = TechnologyInfo.Instance;
    buildingsManager = BuildingsManager.Instance;
    techManager = TechnologyManager.Instance;
    leaderManager = Leader.Instance;
    environment = EnvironmentManager.Instance;
    resourceManager = RawResource.Instance;
    saveManager = SaveManager.Instance;
    isolatedSimulator = IsolatedSimulator.Instance;
    screensManager = ScreenManager.Instance;
    gridBuildingSystem = GridBuildingSystem.Instance;
    farmlandGridBuildingSystem = FarmlandGridBuildingSystem.Instance;
    marketplace = Marketplace.Instance;
    displayError = DisplayError.Instance;
    playerAuthManager = PlayerAuthManager.Instance;
    guidedTutorialManager = GuidedTutorialManager.Instance;
    criminalEventsManager = CriminalEventsManager.Instance;
}",2.00,0.00,19.00,0.10,,,,,,,,,,,,,,,,,,,
BuildingFirstConstructionDetailsManager,"public void CloseBuildingDetailsContainer()
{
    //detailsContainerTransformToShowHide.gameObject.SetActive(false);
    UIBoxAnimate.UI_Anim_OnClose(detailsContainerTransformToShowHide);
}",2.00,0.00,1.00,0.10,,,,,,,,,,,,,,,,,,,
BuildingFirstConstructionDetailsManager,"private IEnumerator DisableApiExceptionReporting()
{
    yield return new WaitForSeconds(5);

    isApiReportingEnabled = false;
}",2.00,0.00,1.00,0.02,,,,,,,,,,,,,,,,,,,
CanvasHelper,"void Awake()
{
    if (!helpers.Contains(this))
        helpers.Add(this);

    canvas = GetComponent<Canvas>();
    rectTransform = GetComponent<RectTransform>();

    safeAreaTransform = transform.Find(""SafeArea"") as RectTransform;

    ApplySafeArea();
}",2.00,0.00,10.00,0.25,,,,,,,,,,,,,,,,,,,
CanvasHelper,"void Update()
{
    if (helpers[0] != this)
        return;

    if (Screen.safeArea != lastSafeArea)
        SafeAreaChanged();

    if (Screen.width != lastResolution.x || Screen.height != lastResolution.y)
        ResolutionChanged();
}",2.00,0.00,5.00,0.15,,,,,,,,,,,,,,,,,,,
CanvasHelper,"void ApplySafeArea()
{
    if (safeAreaTransform == null)
        return;

    var safeArea = Screen.safeArea;

    var anchorMin = safeArea.position;
    var anchorMax = safeArea.position + safeArea.size;
    anchorMin.x /= canvas.pixelRect.width;
    anchorMin.y /= canvas.pixelRect.height;
    anchorMax.x /= canvas.pixelRect.width;
    anchorMax.y /= canvas.pixelRect.height;

    safeAreaTransform.anchorMin = anchorMin;
    safeAreaTransform.anchorMax = anchorMax;
}",2.00,0.00,10.00,0.50,,,,,,,,,,,,,,,,,,,
CanvasHelper,"void OnDestroy()
{
    if (helpers != null && helpers.Contains(this))
        helpers.Remove(this);
}",2.00,0.00,3.00,0.10,,,,,,,,,,,,,,,,,,,
CanvasHelper,"private static void ResolutionChanged()
{
    //Debug.Log(""Resolution changed from "" + lastResolution + "" to ("" + Screen.width + "", "" + Screen.height + "") at "" + Time.time);

    lastResolution.x = Screen.width;
    lastResolution.y = Screen.height;

    OnResolutionOrOrientationChanged.Invoke();
}",2.00,0.00,3.00,0.20,,,,,,,,,,,,,,,,,,,
CanvasHelper,"private static void SafeAreaChanged()
{
    // Debug.Log(""Safe Area changed from "" + lastSafeArea + "" to "" + Screen.safeArea.size + "" at "" + Time.time);

    lastSafeArea = Screen.safeArea;

    for (int i = 0; i < helpers.Count; i++)
    {
        helpers[i].ApplySafeArea();
    }
}",2.00,0.00,2.00,0.25,,,,,,,,,,,,,,,,,,,
CanvasMatchHelper,"void Start()
{
    device_type = GetDeviceType();

    if (device_type == DeviceType.Tablet)
    {
        gameObject.GetComponent<CanvasScaler>().matchWidthOrHeight = 0.0f;
    }
    if (device_type == DeviceType.Phone)
    {
        gameObject.GetComponent<CanvasScaler>().matchWidthOrHeight = 0.5f;
    }
}",2.00,0.00,8.00,0.15,,,,,,,,,,,,,,,,,,,
CanvasMatchHelper,"private float DeviceDiagonalSizeInInches()
{
    float screenWidth = Screen.width / Screen.dpi;
    float screenHeight = Screen.height / Screen.dpi;
    float diagonalInches = Mathf.Sqrt(Mathf.Pow(screenWidth, 2) + Mathf.Pow(screenHeight, 2));

    return diagonalInches;
}",2.00,0.00,6.00,0.30,,,,,,,,,,,,,,,,,,,
CanvasMatchHelper,"    public DeviceType GetDeviceType()
    {
#if UNITY_IOS
    bool deviceIsIpad = UnityEngine.iOS.Device.generation.ToString().Contains(""iPad"");
            if (deviceIsIpad)
            {
                return DeviceType.Tablet;
            }
 
            bool deviceIsIphone = UnityEngine.iOS.Device.generation.ToString().Contains(""iPhone"");
            if (deviceIsIphone)
            {
                return DeviceType.Phone;
            }
#endif

        float aspectRatio = Mathf.Max(Screen.width, Screen.height) / Mathf.Min(Screen.width, Screen.height);
        bool isTablet = (DeviceDiagonalSizeInInches() > 6.5f && aspectRatio < 2f);

        if (isTablet)
        {
            return DeviceType.Tablet;
        }
        else
        {
            return DeviceType.Phone;
        }
    }",2.00,0.00,16.00,0.50,,,,,,,,,,,,,,,,,,,
ExchangeManager,"private void Start()
{
    exchangeRatesInfo = ExchangeRatesInfo.Instance;
    resourceManager = RawResource.Instance;
    seedManager = SeedResource.Instance;
    displayError = DisplayError.Instance;
    saveManager = SaveManager.Instance;

    exchangeRates = exchangeRatesInfo.GetExchangeRates();

    BUY_active_selected_amount_transform_T = BUY_active_selected_amount_transform.GetComponent<TextMeshProUGUI>();

    SELL_active_selected_amount_transform_T = SELL_active_selected_amount_transform.GetComponent<TextMeshProUGUI>();

    BUY_active_image.sprite = cement_image;
    SELL_active_image.sprite = electronics_image;
    CalculateCurrentBuySellTypeSliderValues();
}",0.00,0.00,14.00,0.15,,,,,,,,,,,,,,,,,,,
ExchangeManager,"public void OnSliderValueChange()
{
    lastSliderValue = (int)slider.value;

    var buyAmount = (lcm_selected / buy_value_selected) * lastSliderValue;
    var sellAmount = (lcm_selected / sell_value_selected) * lastSliderValue;

    BUY_active_selected_amount_transform_T.text = buyAmount.ToString();
    SELL_active_selected_amount_transform_T.text = sellAmount.ToString();

    // determine tax at slider.value // gm
    var tax_amount = ReCalculateTaxValue(lcm_selected);
    taxText_T.text = tax_amount.ToString();

    var haveEnoughGm = tax_amount <= resourceManager.getYp();
    if (haveEnoughGm)
    {
        taxText_T.color = taxAvailableGreenColor;
    }
    else
    {
        taxText_T.color = taxAvailableRedColor;
    }
}",2.00,0.00,16.00,1.00,,,,,,,,,,,,,,,,,,,
ExchangeManager,"private int ReCalculateTaxValue(int lcm)
{
    var temp_tax = (int)((lcm * lastSliderValue) / 100.0f);
    if (temp_tax < 1)
    {
        temp_tax = 1;
    }
    return temp_tax;
}",0.00,0.00,3.00,0.20,,,,,,,,,,,,,,,,,,,
ExchangeManager,"private void OpenCorrectBuyActiveTransform()
{
    switch (buyType)
    {
        case ExhangeTypes.Cement:
            BUY_Cement_Active_transform.gameObject.SetActive(true);
            break;
        case ExhangeTypes.Electronics:
            BUY_Electronics_Active_transform.gameObject.SetActive(true);
            break;
        case ExhangeTypes.Chemicals:
            BUY_Chemicals_Active_transform.gameObject.SetActive(true);
            break;
        case ExhangeTypes.Mechanics:
            BUY_Mechanics_Active_transform.gameObject.SetActive(true);
            break;
        case ExhangeTypes.Food:
            BUY_Food_Active_transform.gameObject.SetActive(true);
            break;
        case ExhangeTypes.Seed:
            BUY_Seed_Active_transform.gameObject.SetActive(true);
            break;
    }
}",0.00,0.00,7.00,0.15,,,,,,,,,,,,,,,,,,,
ExchangeManager,"private void OpenCorrectSellActiveTransform()
{
    switch (sellType)
    {
        case ExhangeTypes.Cement:
            SELL_Cement_Active_transform.gameObject.SetActive(true);
            break;
        case ExhangeTypes.Electronics:
            SELL_Electronics_Active_transform.gameObject.SetActive(true);
            break;
        case ExhangeTypes.Chemicals:
            SELL_Chemicals_Active_transform.gameObject.SetActive(true);
            break;
        case ExhangeTypes.Mechanics:
            SELL_Mechanics_Active_transform.gameObject.SetActive(true);
            break;
        case ExhangeTypes.Food:
            SELL_Food_Active_transform.gameObject.SetActive(true);
            break;
        case ExhangeTypes.Seed:
            SELL_Seed_Active_transform.gameObject.SetActive(true);
            break;
    }
}",0.00,0.00,7.00,0.15,,,,,,,,,,,,,,,,,,,
ExchangeManager,"private void CloseAllBuyActiveTransforms()
{
    BUY_Cement_Active_transform.gameObject.SetActive(false);
    BUY_Electronics_Active_transform.gameObject.SetActive(false);
    BUY_Chemicals_Active_transform.gameObject.SetActive(false);
    BUY_Mechanics_Active_transform.gameObject.SetActive(false);
    BUY_Food_Active_transform.gameObject.SetActive(false);
    BUY_Seed_Active_transform.gameObject.SetActive(false);
}",0.00,0.00,6.00,0.05,,,,,,,,,,,,,,,,,,,
ExchangeManager,"private void CloseAllSellActiveTransforms()
{
    SELL_Cement_Active_transform.gameObject.SetActive(false);
    SELL_Electronics_Active_transform.gameObject.SetActive(false);
    SELL_Chemicals_Active_transform.gameObject.SetActive(false);
    SELL_Mechanics_Active_transform.gameObject.SetActive(false);
    SELL_Food_Active_transform.gameObject.SetActive(false);
    SELL_Seed_Active_transform.gameObject.SetActive(false);
}",0.00,0.00,6.00,0.05,,,,,,,,,,,,,,,,,,,
ExchangeManager,"static int GCD(int a, int b)
{
    while (b != 0)
    {
        int temp = b;
        b = a % b;
        a = temp;
    }
    return a;
}",0.00,0.00,3.00,0.20,,,,,,,,,,,,,,,,,,,
ExchangeManager,"static int LCM(int a, int b)
{
    return (a / GCD(a, b)) * b;
}",0.00,0.00,2.00,0.15,,,,,,,,,,,,,,,,,,,
IAPAwaitAndResultDisplayManager,"private void Start()
{
    displayIAPResultHolder_TMP = displayIAPResultHolder_T.GetComponent<TextMeshProUGUI>();
}",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
IAPAwaitAndResultDisplayManager,"public void OnIAP_BtnClicked()
{
    whileOnLoadingTransformOpenClose.gameObject.SetActive(true);
}",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
IAPAwaitAndResultDisplayManager,"public void OnIAP_ProcessEnd()
{
    whileOnLoadingTransformOpenClose.gameObject.SetActive(false);
}",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
IAPAwaitAndResultDisplayManager,"public void DisplayIAP_Result(string result)
{
    displayIAPResultHolder.gameObject.SetActive(true);

    displayIAPResultHolder_TMP.text = GetCorrectLangugeString_ForGuidedTutorial(result);
}",0.00,0.00,3.00,0.15,,,,,,,,,,,,,,,,,,,
IAPAwaitAndResultDisplayManager,"public void Close_IAP_Result()
{
    displayIAPResultHolder.gameObject.SetActive(false);
}",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
MarketplaceIAPHelper,"void Start()
{
    saveManager = SaveManager.Instance;
    resourceManager = RawResource.Instance;
    seedResource = SeedResource.Instance;
    rawResource = RawResource.Instance;
    buildingsManager = BuildingsManager.Instance;
    utilitiesManager = Utilities.Instance;
    customTimeManager = CustomTimeManager.Instance;

    marketplace = Marketplace.Instance;
    displayError = DisplayError.Instance;

    IronSourceRewardedVideoEvents.onAdRewardedEvent += AddNormalSeedAfterAdReward;
    IronSourceRewardedVideoEvents.onAdRewardedEvent += AddFoodAfterAdReward;
    IronSourceRewardedVideoEvents.onAdRewardedEvent += AddWaterAfterAdReward;
    IronSourceRewardedVideoEvents.onAdRewardedEvent += AddCementAfterAdReward;
    IronSourceRewardedVideoEvents.onAdRewardedEvent += AddElectronicAfterAdReward;
    IronSourceRewardedVideoEvents.onAdRewardedEvent += AddChemicalAfterAdReward;
    IronSourceRewardedVideoEvents.onAdRewardedEvent += AddMechanicAfterAdReward;
}",0.00,0.00,10.00,0.02,,,,,,,,,,,,,,,,,,,
MarketplaceIAPHelper,"public void ActivatePrePackageA()
{
    var haveEnoughMoney = resourceManager.decreaseYCoin(45);
    if (haveEnoughMoney)
    {
        if(marketplace.ActivatePrePackage(Marketplace.premiumPackageTypes.A))
        {
            // does not already has pre package A active
            IAPAwaitAndResultDisplayManager.DisplayIAP_Result(""Premium Package Activated Thank you."");
        }
        else
        {
            IAPAwaitAndResultDisplayManager.DisplayIAP_Result(""Failed. Premium Package Already Active."");
            // user has active package A

            // chargeback amount
            resourceManager.increaseYCoin_BypassCapacity(45);
        }

        saveManager.SaveStartMainCallback();
    }
    else
    {
        displayError.ShowError(""You dont have enough Green Coin!"");
    }
}",0.00,0.00,10.00,0.10,,,,,,,,,,,,,,,,,,,
MarketplaceIAPHelper,"public void ActivatePrePackageB()
{
    var haveEnoughMoney = resourceManager.decreaseYCoin(75);
    if (haveEnoughMoney)
    {
        if (marketplace.ActivatePrePackage(Marketplace.premiumPackageTypes.B))
        {
            // does not already has pre package B active
            IAPAwaitAndResultDisplayManager.DisplayIAP_Result(""Premium Package Activated Thank you."");
        }
        else
        {
            IAPAwaitAndResultDisplayManager.DisplayIAP_Result(""Failed. Premium Package Already Active."");
            // user has active package B

            // chargeback amount
            resourceManager.increaseYCoin_BypassCapacity(75);
        }

        saveManager.SaveStartMainCallback();
    }
    else
    {
        displayError.ShowError(""You dont have enough Green Coin!"");
    }
}",0.00,0.00,10.00,0.10,,,,,,,,,,,,,,,,,,,
MarketplaceIAPHelper,"public void ActivatePrePackageC()
{
    var haveEnoughMoney = resourceManager.decreaseYCoin(125);
    if (haveEnoughMoney)
    {
        if (marketplace.ActivatePrePackage(Marketplace.premiumPackageTypes.C))
        {
            // does not already has pre package C active
            IAPAwaitAndResultDisplayManager.DisplayIAP_Result(""Premium Package Activated Thank you."");
        }
        else
        {
            IAPAwaitAndResultDisplayManager.DisplayIAP_Result(""Failed. Premium Package Already Active."");
            // user has active package C

            // chargeback amount
            resourceManager.increaseYCoin_BypassCapacity(125);
        }

        saveManager.SaveStartMainCallback();
    }
    else
    {
        displayError.ShowError(""You dont have enough Green Coin!"");
    }
}",0.00,0.00,10.00,0.10,,,,,,,,,,,,,,,,,,,
MarketplaceIAPHelper,"public void AvtivateOnIAP_ApiJustCalled()
{
    IAPAwaitAndResultDisplayManager.OnIAP_BtnClicked();
}",2.00,0.00,1.00,0.20,,,,,,,,,,,,,,,,,,,
MarketplaceIAPHelper,"public void IAP_Purchase_Success(Product product)
{
    IAPAwaitAndResultDisplayManager.OnIAP_ProcessEnd();

    var purchasedItemName = product.metadata.localizedTitle;
    purchasedItemName = purchasedItemName.Replace(""(Green Balance)"", """");

    IAPAwaitAndResultDisplayManager.DisplayIAP_Result(purchasedItemName + "" is successfully purchased. Thank you."");
}",0.00,0.00,5.00,0.50,,,,,,,,,,,,,,,,,,,
MarketplaceIAPHelper,"public void IAP_Purchase_Failed(Product product, PurchaseFailureDescription failureDescription)
{
    IAPAwaitAndResultDisplayManager.OnIAP_ProcessEnd();

    var purchasedItemName = product.metadata.localizedTitle;
    purchasedItemName = purchasedItemName.Replace(""(Green Balance)"", """");

    IAPAwaitAndResultDisplayManager.DisplayIAP_Result(purchasedItemName + "" purchase FAILED!"");
}",0.00,0.00,5.00,0.50,,,,,,,,,,,,,,,,,,,
MarketplaceIAPHelper,"public void AddYc(int amount)
{
    resourceManager.increaseYCoin_BypassCapacity(amount);

    saveManager.SaveStartMainCallback();
}",2.00,0.00,10.00,0.20,,,,,,,,,,,,,,,,,,,
MarketplaceIAPHelper,"public void AddYp(int amount)
{
    var ycCost = 0;
    if (amount == 250) ycCost = 5;
    if (amount == 1000) ycCost = 17;
    if (resourceManager.decreaseYCoin(ycCost))
    {
        resourceManager.increaseYp_BypassCapacity(amount);
        saveManager.SaveStartMainCallback();
        IAPAwaitAndResultDisplayManager.DisplayIAP_Result(""+"" + amount + "" Green Money added. Thank you."");
    }
    else
    {
        displayError.ShowError(""You dont have enough Green Coin!"");
    }
}",2.00,0.00,10.00,0.20,,,,,,,,,,,,,,,,,,,
MarketplaceIAPHelper,"public void AddPremiumConstructionSpeedup()
{
    if (resourceManager.decreaseYCoin(15))
    {
        marketplace.premiumItemsHolder.package_construction_speedup++;
        saveManager.SaveStartMainCallback();
        IAPAwaitAndResultDisplayManager.DisplayIAP_Result(""Premium Construction Speedup Added. Thank you."");
    }
    else
    {
        displayError.ShowError(""You dont have enough Green Coin!"");
    }
}",2.00,0.00,6.00,0.20,,,,,,,,,,,,,,,,,,,
MarketplaceIAPHelper,"public void AddPremiumRawResource()
{
    if (resourceManager.decreaseYCoin(12))
    {
        marketplace.premiumItemsHolder.package_raw_resource++;
        saveManager.SaveStartMainCallback();
        IAPAwaitAndResultDisplayManager.DisplayIAP_Result(""Premium Resource Bundle Added. Thank you."");
    }
    else
    {
        displayError.ShowError(""You dont have enough Green Coin!"");
    }
}",2.00,0.00,6.00,0.20,,,,,,,,,,,,,,,,,,,
MarketplaceIAPHelper,"public void AddPremiumSeed()
{
    if (resourceManager.decreaseYCoin(5))
    {
        marketplace.premiumItemsHolder.package_pre_seed++;
        saveManager.SaveStartMainCallback();
        IAPAwaitAndResultDisplayManager.DisplayIAP_Result(""Premium Seed Bundle Added. Thank you."");
    }
    else
    {
        displayError.ShowError(""You dont have enough Green Coin!"");
    }
}",2.00,0.00,6.00,0.20,,,,,,,,,,,,,,,,,,,
MarketplaceIAPHelper,"public void AddPremiumPuzzle()
{
    if (resourceManager.decreaseYCoin(10))
    {
        marketplace.premiumItemsHolder.package_puzzle++;
        saveManager.SaveStartMainCallback();
        IAPAwaitAndResultDisplayManager.DisplayIAP_Result(""Puzzle Bundle Added. Thank you."");
    }
    else
    {
        displayError.ShowError(""You dont have enough Green Coin!"");
    }
}",2.00,0.00,6.00,0.20,,,,,,,,,,,,,,,,,,,
MarketplaceIAPHelper,"public void ExtinguishAllFire()
{
    if (resourceManager.decreaseYCoin(5))
    {
        buildingsManager.ExtinguishAllFiresInBuildings();
        IAPAwaitAndResultDisplayManager.DisplayIAP_Result(""All fires extinguished."");
    }
    else
    {
        displayError.ShowError(""You dont have enough Green Coin!"");
    }
}",2.00,0.00,6.00,0.20,,,,,,,,,,,,,,,,,,,
MarketplaceIAPHelper,"public void ShowNormalSeedAd()
{
    adsManager.TryShowRewardedVideoAd(""IAP_Store"");
}",2.00,0.00,1.00,0.20,,,,,,,,,,,,,,,,,,,
MarketplaceIAPHelper,"public void ShowFoodAd()
{
    adsManager.TryShowRewardedVideoAd(""IAP_Store_2"");
}",2.00,0.00,1.00,0.20,,,,,,,,,,,,,,,,,,,
MarketplaceIAPHelper,"public void ShowWaterAd()
{
    adsManager.TryShowRewardedVideoAd(""IAP_Store_3"");
}",2.00,0.00,1.00,0.20,,,,,,,,,,,,,,,,,,,
MarketplaceIAPHelper,"public void Show_RR_Cement()
{
    lastAdWatched_cement = customTimeManager.GetRealUtcTime();
    adsManager.TryShowRewardedVideoAd(""IAP_RR"");
}",2.00,0.00,1.00,0.20,,,,,,,,,,,,,,,,,,,
MarketplaceIAPHelper,"public void Show_RR_Electronic()
{
    adsManager.TryShowRewardedVideoAd(""IAP_RR_electronic"");
}",2.00,0.00,1.00,0.20,,,,,,,,,,,,,,,,,,,
MarketplaceIAPHelper,"public void Show_RR_Chemical()
{
    adsManager.TryShowRewardedVideoAd(""IAP_RR_chemical"");
}",2.00,0.00,1.00,0.20,,,,,,,,,,,,,,,,,,,
MarketplaceIAPHelper,"public void Show_RR_Mechanic()
{
    adsManager.TryShowRewardedVideoAd(""IAP_RR_mechanic"");
}",2.00,0.00,1.00,0.20,,,,,,,,,,,,,,,,,,,
MarketplaceIAPHelper,"private void AddNormalSeedAfterAdReward(IronSourcePlacement placement, IronSourceAdInfo adInfo)
{
    var placementName = placement.getPlacementName();
    var rewardName = placement.getRewardName();

    if (placementName != ""IAP_Store"" || rewardName != ""seed_normal"")
    {
        return;
    }

    var normalSeedToAddAmount = placement.getRewardAmount();

    Debug.Log(""AddNormalSeedAfterAdReward - +seed: "" + normalSeedToAddAmount);

    seedResource.increaseRegularSeedAmount(normalSeedToAddAmount);

    IAPAwaitAndResultDisplayManager.DisplayIAP_Result(""Free Seed Added. Thank you."");
}",0.00,0.00,12.00,0.15,,,,,,,,,,,,,,,,,,,
MarketplaceIAPHelper,"private void AddFoodAfterAdReward(IronSourcePlacement placement, IronSourceAdInfo adInfo)
{
    var placementName = placement.getPlacementName();
    var rewardName = placement.getRewardName();

    if (placementName != ""IAP_Store_2"" || rewardName != ""food"")
    {
        return;
    }

    var foodToAdd = placement.getRewardAmount();

    Debug.Log(""AddFoodAfterAdReward - +food: "" + foodToAdd);

    rawResource.increaseFood_BypassCapacity(foodToAdd);

    IAPAwaitAndResultDisplayManager.DisplayIAP_Result(""Free Food Added. Thank you."");
}",0.00,0.00,12.00,0.15,,,,,,,,,,,,,,,,,,,
MarketplaceIAPHelper,"private void AddWaterAfterAdReward(IronSourcePlacement placement, IronSourceAdInfo adInfo)
{
    var placementName = placement.getPlacementName();
    var rewardName = placement.getRewardName();

    if (placementName != ""IAP_Store_3"" || rewardName != ""water"")
    {
        return;
    }

    var waterToAdd = placement.getRewardAmount();

    Debug.Log(""AddWaterAfterAdReward - +water: "" + waterToAdd);

    utilitiesManager.IncreaseWaterInStorage_BypassCapacity(waterToAdd);

    IAPAwaitAndResultDisplayManager.DisplayIAP_Result(""Free Water Added. Thank you."");
}",0.00,0.00,12.00,0.15,,,,,,,,,,,,,,,,,,,
MarketplaceIAPHelper,"private void AddCementAfterAdReward(IronSourcePlacement placement, IronSourceAdInfo adInfo)
{
    var placementName = placement.getPlacementName();
    var rewardName = placement.getRewardName();

    if (placementName != ""IAP_RR"" || rewardName != ""cement"")
    {
        return;
    }

    var cementToAdd = placement.getRewardAmount();

    rawResource.increaseCement_BypassCapacity(cementToAdd);

    IAPAwaitAndResultDisplayManager.DisplayIAP_Result(""Free Cement Added. Thank you."");

    lastAdWatched_cement = customTimeManager.GetRealUtcTime();

    openMarketPlace.RefreshVisualOnAdWatched();
}",0.00,0.00,12.00,0.15,,,,,,,,,,,,,,,,,,,
MarketplaceIAPHelper,"private void AddElectronicAfterAdReward(IronSourcePlacement placement, IronSourceAdInfo adInfo)
{
    var placementName = placement.getPlacementName();
    var rewardName = placement.getRewardName();

    if (placementName != ""IAP_RR_electronic"" || rewardName != ""electronic"")
    {
        return;
    }

    var wireToAdd = placement.getRewardAmount();

    rawResource.increaseWire_BypassCapacity(wireToAdd);

    IAPAwaitAndResultDisplayManager.DisplayIAP_Result(""Free Electronics Added. Thank you."");

    lastAdWatched_electronic = customTimeManager.GetRealUtcTime();

    openMarketPlace.RefreshVisualOnAdWatched();
}",0.00,0.00,12.00,0.15,,,,,,,,,,,,,,,,,,,
MarketplaceIAPHelper,"private void AddChemicalAfterAdReward(IronSourcePlacement placement, IronSourceAdInfo adInfo)
{
    var placementName = placement.getPlacementName();
    var rewardName = placement.getRewardName();

    if (placementName != ""IAP_RR_chemical"" || rewardName != ""chemical"")
    {
        return;
    }

    var chemToAdd = placement.getRewardAmount();

    rawResource.increaseChemical_BypassCapacity(chemToAdd);

    IAPAwaitAndResultDisplayManager.DisplayIAP_Result(""Free Chemicals Added. Thank you."");

    lastAdWatched_chemical = customTimeManager.GetRealUtcTime();

    openMarketPlace.RefreshVisualOnAdWatched();
}",0.00,0.00,12.00,0.15,,,,,,,,,,,,,,,,,,,
MarketplaceIAPHelper,"private void AddMechanicAfterAdReward(IronSourcePlacement placement, IronSourceAdInfo adInfo)
{
    var placementName = placement.getPlacementName();
    var rewardName = placement.getRewardName();

    if (placementName != ""IAP_RR_mechanic"" || rewardName != ""mechanic"")
    {
        return;
    }

    var mechToAdd = placement.getRewardAmount();

    rawResource.increaseMechanicalPart_BypassCapacity(mechToAdd);

    IAPAwaitAndResultDisplayManager.DisplayIAP_Result(""Free Mechanics Added. Thank you."");

    lastAdWatched_mechanic = customTimeManager.GetRealUtcTime();

    openMarketPlace.RefreshVisualOnAdWatched();
}",0.00,0.00,12.00,0.15,,,,,,,,,,,,,,,,,,,
MarketplaceIAPHelper,"public void Add_L_cement()
{
    if (resourceManager.decreaseYCoin(5))
    {
        marketplace.premiumItemsHolder.L_cement++;
        saveManager.SaveStartMainCallback();

        IAPAwaitAndResultDisplayManager.DisplayIAP_Result(""Cement Package Added. Thank you."");
    }
    else
    {
        displayError.ShowError(""You dont have enough Green Coin!"");
    }
}",2.00,0.00,5.00,0.20,,,,,,,,,,,,,,,,,,,
MarketplaceIAPHelper,"public void Add_M_cement()
{
    if (resourceManager.decreaseYCoin(2))
    {
        marketplace.premiumItemsHolder.M_cement++;
        saveManager.SaveStartMainCallback();

        IAPAwaitAndResultDisplayManager.DisplayIAP_Result(""Cement Package Added. Thank you."");
    }
    else
    {
        displayError.ShowError(""You dont have enough Green Coin!"");
    }
}",2.00,0.00,5.00,0.20,,,,,,,,,,,,,,,,,,,
MarketplaceIAPHelper,"public void Add_S_cement()
{
    if (resourceManager.decreaseYCoin(1))
    {
        marketplace.premiumItemsHolder.S_cement++;
        saveManager.SaveStartMainCallback();

        IAPAwaitAndResultDisplayManager.DisplayIAP_Result(""Cement Package Added. Thank you."");
    }
    else
    {
        displayError.ShowError(""You dont have enough Green Coin!"");
    }
}",2.00,0.00,5.00,0.20,,,,,,,,,,,,,,,,,,,
MarketplaceIAPHelper,"public void Add_L_wire()
{
    if (resourceManager.decreaseYCoin(5))
    {
        marketplace.premiumItemsHolder.L_wire++;
        saveManager.SaveStartMainCallback();

        IAPAwaitAndResultDisplayManager.DisplayIAP_Result(""Electronics Package Added. Thank you."");
    }
    else
    {
        displayError.ShowError(""You dont have enough Green Coin!"");
    }
}",2.00,0.00,5.00,0.20,,,,,,,,,,,,,,,,,,,
MarketplaceIAPHelper,"public void Add_M_wire()
{
    if (resourceManager.decreaseYCoin(2))
    {
        marketplace.premiumItemsHolder.M_wire++;
        saveManager.SaveStartMainCallback();

        IAPAwaitAndResultDisplayManager.DisplayIAP_Result(""Electronics Package Added. Thank you."");
    }
    else
    {
        displayError.ShowError(""You dont have enough Green Coin!"");
    }
}",2.00,0.00,5.00,0.20,,,,,,,,,,,,,,,,,,,
MarketplaceIAPHelper,"public void Add_S_wire()
{
    if (resourceManager.decreaseYCoin(1))
    {
        marketplace.premiumItemsHolder.M_wire++;
        saveManager.SaveStartMainCallback();

        IAPAwaitAndResultDisplayManager.DisplayIAP_Result(""Electronics Package Added. Thank you."");
    }
    else
    {
        displayError.ShowError(""You dont have enough Green Coin!"");
    }
}",2.00,0.00,5.00,0.20,,,,,,,,,,,,,,,,,,,
MarketplaceIAPHelper,"public void Add_L_chemical()
{
    if (resourceManager.decreaseYCoin(5))
    {
        marketplace.premiumItemsHolder.L_chemical++;
        saveManager.SaveStartMainCallback();

        IAPAwaitAndResultDisplayManager.DisplayIAP_Result(""Chemicals Package Added. Thank you."");
    }
    else
    {
        displayError.ShowError(""You dont have enough Green Coin!"");
    }
}",2.00,0.00,5.00,0.20,,,,,,,,,,,,,,,,,,,
MarketplaceIAPHelper,"public void Add_M_chemical()
{
    if (resourceManager.decreaseYCoin(2))
    {
        marketplace.premiumItemsHolder.M_chemical++;
        saveManager.SaveStartMainCallback();

        IAPAwaitAndResultDisplayManager.DisplayIAP_Result(""Chemicals Package Added. Thank you."");
    }
    else
    {
        displayError.ShowError(""You dont have enough Green Coin!"");
    }
}",2.00,0.00,5.00,0.20,,,,,,,,,,,,,,,,,,,
MarketplaceIAPHelper,"public void Add_S_chemical()
{
    if (resourceManager.decreaseYCoin(1))
    {
        marketplace.premiumItemsHolder.S_chemical++;
        saveManager.SaveStartMainCallback();

        IAPAwaitAndResultDisplayManager.DisplayIAP_Result(""Chemicals Package Added. Thank you."");
    }
    else
    {
        displayError.ShowError(""You dont have enough Green Coin!"");
    }
}",2.00,0.00,5.00,0.20,,,,,,,,,,,,,,,,,,,
MarketplaceIAPHelper,"public void Add_L_mechpart()
{
    if (resourceManager.decreaseYCoin(5))
    {
        marketplace.premiumItemsHolder.L_mechpart++;
        saveManager.SaveStartMainCallback();

        IAPAwaitAndResultDisplayManager.DisplayIAP_Result(""Mechanics Package Added. Thank you."");
    }
    else
    {
        displayError.ShowError(""You dont have enough Green Coin!"");
    }
}",2.00,0.00,5.00,0.20,,,,,,,,,,,,,,,,,,,
MarketplaceIAPHelper,"public void Add_M_mechpart()
{
    if (resourceManager.decreaseYCoin(2))
    {
        marketplace.premiumItemsHolder.M_mechpart++;
        saveManager.SaveStartMainCallback();

        IAPAwaitAndResultDisplayManager.DisplayIAP_Result(""Mechanics Package Added. Thank you."");
    }
    else
    {
        displayError.ShowError(""You dont have enough Green Coin!"");
    }
}",2.00,0.00,5.00,0.20,,,,,,,,,,,,,,,,,,,
MarketplaceIAPHelper,"public void Add_S_mechpart()
{
    if (resourceManager.decreaseYCoin(1))
    {
        marketplace.premiumItemsHolder.S_mechpart++;
        saveManager.SaveStartMainCallback();

        IAPAwaitAndResultDisplayManager.DisplayIAP_Result(""Mechanics Package Added. Thank you."");
    }
    else
    {
        displayError.ShowError(""You dont have enough Green Coin!"");
    }
}",2.00,0.00,5.00,0.20,,,,,,,,,,,,,,,,,,,
MarketplaceIAPHelper,public DateTime GetCementAdInfo() { return lastAdWatched_cement; },0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
MarketplaceIAPHelper,public DateTime GetElectronicAdInfo() { return lastAdWatched_electronic; },0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
MarketplaceIAPHelper,public DateTime GetChemicalAdInfo() { return lastAdWatched_chemical; },0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
MarketplaceIAPHelper,public DateTime GetMechanicAdInfo() { return lastAdWatched_mechanic; },0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
MarketplaceIAPHelper,"public void InitAdValuesFromLoad(RawResourceAdInfo rrInfo)
{
    if (rrInfo != null)
    {
        if(rrInfo.lastCementAdWatched_UTC != null)
        {
            lastAdWatched_cement = DateTime.Parse(rrInfo.lastCementAdWatched_UTC);
        }
        if(rrInfo.lastElectronicAdWatched_UTC != null)
        {
            lastAdWatched_electronic = DateTime.Parse(rrInfo.lastElectronicAdWatched_UTC);
        }
        if(rrInfo.lastChemicalAdWatched_UTC != null)
        {
            lastAdWatched_chemical = DateTime.Parse(rrInfo.lastChemicalAdWatched_UTC);
        }
        if(rrInfo.lastMechanicAdWatched_UTC != null)
        {
            lastAdWatched_mechanic = DateTime.Parse(rrInfo.lastMechanicAdWatched_UTC);
        }
    }
}",0.00,0.00,13.00,0.15,,,,,,,,,,,,,,,,,,,
OpenMarketPlace,"private void Start()
{
    buildingsManager = BuildingsManager.Instance;
    achievementsManager = AchievementsManager.Instance;
    customTimeManager = CustomTimeManager.Instance;

    rr_free_cement_remainingTime_transform_T = rr_free_cement_remainingTime_transform.GetComponent<TextMeshProUGUI>();
    rr_free_electronic_remainingTime_transform_T = rr_free_electronic_remainingTime_transform.GetComponent<TextMeshProUGUI>();
    rr_free_chem_remainingTime_transform_T = rr_free_chem_remainingTime_transform.GetComponent<TextMeshProUGUI>();
    rr_free_mech_remainingTime_transform_T = rr_free_mech_remainingTime_transform.GetComponent<TextMeshProUGUI>();

    StartCoroutine(UpdateAdsRemainingCountdown());
}",0.00,0.00,8.00,0.05,,,,,,,,,,,,,,,,,,,
OpenMarketPlace,"public void SwitchMarketplace()
{
    audioManager.Play_defaultButtonClick();
    if (marketPlaceTransform.gameObject.activeSelf)
    {
        //marketPlaceTransform.gameObject.SetActive(false);
        UIBoxAnimate.UI_Anim_OnClose(marketPlaceTransform);
    }
    else
    {
        //marketPlaceTransform.gameObject.SetActive(true);

        UIBoxAnimate.UI_Anim_OnOpen(marketPlaceTransform);
        buildingsManager.DisableAnyGhostWhileBuildingOnHolderOpen();

        // check on marketplace holder open
        // raw res free ad buttons check if they are available 1h cooldown
        GetFreeRrAdsRemaining();
    }
}",2.00,0.00,6.00,0.20,,,,,,,,,,,,,,,,,,,
OpenMarketPlace,"public void OpenMarketplace_PremiumSection()
{
    audioManager.Play_defaultButtonClick();

    CloseAllSection();

    if (!marketPlaceTransform.gameObject.activeSelf)
    {
        UIBoxAnimate.UI_Anim_OnOpen(marketPlaceTransform);
        buildingsManager.DisableAnyGhostWhileBuildingOnHolderOpen();
    }
    
    CloseAllSection();
    premiumSectionTransform.gameObject.SetActive(true);
}",2.00,0.00,7.00,0.20,,,,,,,,,,,,,,,,,,,
OpenMarketPlace,"public void OpenMarketplace_SpecialSection()
{
    audioManager.Play_defaultButtonClick();

    CloseAllSection();

    if (!marketPlaceTransform.gameObject.activeSelf)
    {
        UIBoxAnimate.UI_Anim_OnOpen(marketPlaceTransform);
        buildingsManager.DisableAnyGhostWhileBuildingOnHolderOpen();
    }

    CloseAllSection();
    specialSectionTransform.gameObject.SetActive(true);
}",2.00,0.00,7.00,0.20,,,,,,,,,,,,,,,,,,,
OpenMarketPlace,"public void OpenMarketplace_RawResource()
{
    audioManager.Play_defaultButtonClick();

    CloseAllSection();

    if (!marketPlaceTransform.gameObject.activeSelf)
    {
        UIBoxAnimate.UI_Anim_OnOpen(marketPlaceTransform);
        buildingsManager.DisableAnyGhostWhileBuildingOnHolderOpen();
    }

    CloseAllSection();
    rawResourceSectionTransform.gameObject.SetActive(true);
}",2.00,0.00,7.00,0.20,,,,,,,,,,,,,,,,,,,
OpenMarketPlace,"public void OpenMarketplace_ExchangeSection()
{
    audioManager.Play_defaultButtonClick();

    CloseAllSection();

    if (!marketPlaceTransform.gameObject.activeSelf)
    {
        UIBoxAnimate.UI_Anim_OnOpen(marketPlaceTransform);
        buildingsManager.DisableAnyGhostWhileBuildingOnHolderOpen();
    }

    CloseAllSection();
    exchangeSectionTransform.gameObject.SetActive(true);
}",2.00,0.00,7.00,0.20,,,,,,,,,,,,,,,,,,,
OpenMarketPlace,"private void CloseAllSection()
{
    premiumSectionTransform.gameObject.SetActive(false);
    specialSectionTransform.gameObject.SetActive(false);
    rawResourceSectionTransform.gameObject.SetActive(false);
    exchangeSectionTransform.gameObject.SetActive(false);
}",0.00,0.00,4.00,0.05,,,,,,,,,,,,,,,,,,,
OpenMarketPlace,"public void OpenAchievementSection()
{
    achievementsManager.OpenAchievementsHolder();
}",2.00,0.00,1.00,0.20,,,,,,,,,,,,,,,,,,,
OpenMarketPlace,"public void RefreshVisualOnAdWatched()
{
    GetFreeRrAdsRemaining();
}",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
OpenMarketPlace,"private string GetFormattedTimeRemainingText(int secs)
{
    TimeSpan t = TimeSpan.FromSeconds(secs);

    if (t.Hours > 0)
    {
        return string.Format(""{0:D2}h {1:D2}m {2:D2}s"",
            t.Hours,
            t.Minutes,
            t.Seconds);
    }
    else
    {
        return string.Format(""{0:D2}m {1:D2}s"",
            t.Minutes,
            t.Seconds);
    }

}",0.00,0.00,5.00,0.10,,,,,,,,,,,,,,,,,,,
DirtySelectedDetailsManager,"private void Start()
{
    buildingsManager = BuildingsManager.Instance;
    resourceManager = RawResource.Instance;
    displayError = DisplayError.Instance;
    guidedTutorialManager = GuidedTutorialManager.Instance;
    criminalEventsManager = CriminalEventsManager.Instance;

    DIRTY_AREA_REMOVE_COST = RemoveCostDefaultValues.Instance.GetDirtyRemoveCost();
}",0.00,0.00,7.00,0.02,,,,,,,,,,,,,,,,,,,
DirtySelectedDetailsManager,"public void OnRemoveButtonClicked()
{
    if (selectedDirty == null)
    {
        return;
    }

    var ypAvailable = resourceManager.getYCoin();

    if (ypAvailable < DIRTY_AREA_REMOVE_COST)
    {
        // does not have enough resource
        displayError.ShowError(""Does not have enough resource!"");
    }
    else
    {
        if (buildingsManager.DemolishDirtyPrefab(selectedDirty))
        {
            guidedTutorialManager.OnDirtyAreaRemoved();
            TryCloseDetailsUi();
            resourceManager.decreaseYCoin(DIRTY_AREA_REMOVE_COST);
        }
    }

}",2.00,0.00,10.00,1.00,,,,,,,,,,,,,,,,,,,
DirtySelectedDetailsManager,"public void OnRemoveAllButtonClicked()
{
    // calculate the count of dirty prefabs
    var dirtyCount = buildingsManager.GetDirtyList().Count;
    var ypAvailable = resourceManager.getYCoin();

    if (ypAvailable < DIRTY_AREA_REMOVE_COST * dirtyCount)
    {
        // does not have enough resource
        displayError.ShowError(""Does not have enough resource!"");
    }
    else
    {
        buildingsManager.DemolishAllDirtyPrefab();
        guidedTutorialManager.OnDirtyAreaRemoved();
        TryCloseDetailsUi();
        resourceManager.decreaseYCoin(dirtyCount * DIRTY_AREA_REMOVE_COST);
    }

}",2.00,0.00,9.00,1.00,,,,,,,,,,,,,,,,,,,
DirtySelectedDetailsManager,"public void TryCloseDetailsUi()
{
    //detailsHolder.gameObject.SetActive(false);
    UIBoxAnimate.UI_Anim_OnClose(detailsHolder);
}",2.00,0.00,1.00,0.02,,,,,,,,,,,,,,,,,,,
SelectedDetailsManager,"private void Start()
{
    defaulBuildingInfo = BuildingInfo.Instance;
    technologyInfo = TechnologyInfo.Instance;
    buildingsManager = BuildingsManager.Instance;
    techManager = TechnologyManager.Instance;
    leaderManager = Leader.Instance;
    environment = EnvironmentManager.Instance;
    resourceManager = RawResource.Instance;
    seedResource = SeedResource.Instance;
    saveManager = SaveManager.Instance;
    isolatedSimulator = IsolatedSimulator.Instance;
    screensManager = ScreenManager.Instance;
    gridBuildingSystem = GridBuildingSystem.Instance;
    farmlandGridBuildingSystem = FarmlandGridBuildingSystem.Instance;
    marketplace = Marketplace.Instance;
    displayError = DisplayError.Instance;
    continuosRoadDeletionManager = ContinuosRoadDeletionManager.Instance;
    playerAuthManager = PlayerAuthManager.Instance;
    guidedTutorialManager = GuidedTutorialManager.Instance;
    utilitiesManager = Utilities.Instance;
    criminalEventsManager = CriminalEventsManager.Instance;

    IronSourceRewardedVideoEvents.onAdRewardedEvent += TryRemoveRemainingSecondsFromBuilding;
    IronSourceRewardedVideoEvents.onAdRewardedEvent += TryExtinguishFireFromBuilding;
    IronSourceRewardedVideoEvents.onAdRewardedEvent += TryRemoveRemainingTimeFromFarm;

    StartCoroutine(UpdateSelectedDetailsCoroutine());
}",0.00,0.00,27.00,0.08,,,,,,,,,,,,,,,,,,,
SelectedDetailsManager,"public void SetOnlyPlacedObjec(PlacedObject_Done plcd)
{
    placedObject_Done = plcd;
}",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
SelectedDetailsManager,"public void TryDemolishBuilding()
{
    //var isDemolished = buildingsManager.DemolishRoad(placedObject_Done);
    continuosRoadDeletionManager.ActivateContinuousRoadDeletion();

    TryCloseUi();

    // close selected details ui
    //if (isDemolished) { TryCloseUi(); }

    //saveManager.SaveStartMainCallback();
    //isolatedSimulator.OnAnyChangeSetNewNotificationMainCallback();
}",2.00,0.00,2.00,0.20,,,,,,,,,,,,,,,,,,,
SelectedDetailsManager,"public void OnCollectButtonClicked()
{
    audioManager.Play_defaultButtonClick();

    buildingsManager.FarmTileSelfCollectButtonOnClick(placedObject_Done);

    StartCoroutine(UpdateUiLate());
}",2.00,0.00,4.00,0.25,,,,,,,,,,,,,,,,,,,
SelectedDetailsManager,"public void OnDragHarvestClicked()
{
    //audioManager.Play_defaultButtonClick();

    buildingsManager.FarmTileDragCollectButtonOnClick(placedObject_Done);

    //StartCoroutine(UpdateUiLate());
}",2.00,0.00,1.00,0.10,,,,,,,,,,,,,,,,,,,
SelectedDetailsManager,"public void ShowSelectedBuildingDetails()
{
    if (!detailsContainerTransformToShowHide.gameObject.activeSelf)
    {
        // show
        //detailsContainerTransformToShowHide.gameObject.SetActive(true);
        UIBoxAnimate.UI_Anim_OnOpen(detailsContainerTransformToShowHide);
    }
    else
    {
        detailsContainerTransformToShowHide.gameObject.SetActive(false);
        detailsContainerTransformToShowHide.gameObject.SetActive(true);
    }
}",0.00,0.00,4.00,0.20,,,,,,,,,,,,,,,,,,,
SelectedDetailsManager,"public void HideSelectedBuildingDetails()
{
    if (detailsContainerTransformToShowHide.gameObject.activeSelf)
    {
        audioManager.Play_defaultButtonClick();

        // hide
        //detailsContainerTransformToShowHide.gameObject.SetActive(false);
        UIBoxAnimate.UI_Anim_OnClose(detailsContainerTransformToShowHide);
    }
}",2.00,0.00,3.00,0.20,,,,,,,,,,,,,,,,,,,
SelectedDetailsManager,"public void HideResearchPartSmall()
{
    if (researchSallDetailsContainerTransformToShowHide.gameObject.activeSelf)
    {
        researchSallDetailsContainerTransformToShowHide.gameObject.SetActive(false);
    }
}",2.00,0.00,2.00,0.20,,,,,,,,,,,,,,,,,,,
SelectedDetailsManager,"public void ShowResearchPartSmall()
{
    if (!researchSallDetailsContainerTransformToShowHide.gameObject.activeSelf)
    {
        researchSallDetailsContainerTransformToShowHide.gameObject.SetActive(true);
    }
    else
    {
        researchSallDetailsContainerTransformToShowHide.gameObject.SetActive(false);
        researchSallDetailsContainerTransformToShowHide.gameObject.SetActive(true);
    }
}",2.00,0.00,4.00,0.20,,,,,,,,,,,,,,,,,,,
SelectedDetailsManager,"public void TryPlantFarmWithNormalSeed()
{
    // duplicate function (for drag) below attention

    var details = placedObject_Done.GetPlcdFarmTileDetails();
    if (details.isWorking)
    {
        displayError.ShowError(""Farm already working!"");
        return;
    }
    else
    {
        var didTakeSeed = seedResource.tryUseRegularSeed();
        if (didTakeSeed)
        {
            // seed taken
            details.isWorking = true;
            details.hasatZamaniRemainingSeconds = 1800;

            placedObject_Done.FarmTileAddRemovePrefabsBasedOnCrop();

            guidedTutorialManager.OnFarmSeedPlanted();
        }
    }
    saveManager.SaveStartMainCallback();
    StartCoroutine(UpdateUiLate());
}",2.00,0.00,14.00,1.00,,,,,,,,,,,,,,,,,,,
SelectedDetailsManager,"public void TryPlantFarmWithNormalSeed_Drag(PlacedObject_Done plcd_farm)
{
    var details = plcd_farm.GetPlcdFarmTileDetails();
    if (details.isWorking)
    {
        return;
    }
    else
    {
        var didTakeSeed = seedResource.tryUseRegularSeed();
        if (didTakeSeed)
        {
            // seed taken
            details.isWorking = true;
            details.hasatZamaniRemainingSeconds = 1800;

            plcd_farm.FarmTileAddRemovePrefabsBasedOnCrop();
        }
    }
    //saveManager.SaveStartMainCallback();
    //StartCoroutine(UpdateUiLate());
}",2.00,0.00,14.00,1.00,,,,,,,,,,,,,,,,,,,
SelectedDetailsManager,"public void TryPlantFarmWithPreSeed()
{
    var details = placedObject_Done.GetPlcdFarmTileDetails();
    if (details.isWorking)
    {
        displayError.ShowError(""Farm already working!"");
        return;
    }
    else
    {
        var didTakeSeed = seedResource.tryUsePremiumSeed();
        if (didTakeSeed)
        {
            // seed taken
            details.isWorking = true;
            details.hasatZamaniRemainingSeconds = 10;
            details.isPreSeed = true;

            placedObject_Done.FarmTileAddRemovePrefabsBasedOnCrop();
        }
    }
    saveManager.SaveStartMainCallback();
    StartCoroutine(UpdateUiLate());
}",2.00,0.00,14.00,1.00,,,,,,,,,,,,,,,,,,,
SelectedDetailsManager,"private string GetFormattedTimeRemainingText(int secs)
{
    TimeSpan t = TimeSpan.FromSeconds(secs);

    if (t.Hours > 0)
    {
        return string.Format(""{0:D2}h {1:D2}m {2:D2}s"",
            t.Hours,
            t.Minutes,
            t.Seconds);
    }
    else
    {
        return string.Format(""{0:D2}m {1:D2}s"",
            t.Minutes,
            t.Seconds);
    }

}",0.00,0.00,5.00,0.10,,,,,,,,,,,,,,,,,,,
SelectedDetailsManager,"public void ShowBuildigConstructionSpeedUpAd()
{
    adsManager.TryShowRewardedVideoAd(""Game_Screen"");
}",2.00,0.00,1.00,0.05,,,,,,,,,,,,,,,,,,,
SelectedDetailsManager,"public void ShowBuildigFireExtinguishAd()
{
    adsManager.TryShowRewardedVideoAd(""ExtinguishABuilding"");
}",2.00,0.00,1.00,0.05,,,,,,,,,,,,,,,,,,,
SelectedDetailsManager,"public void ShowFarmFertilizerAd()
{
    adsManager.TryShowRewardedVideoAd(""Farmland_Boost_Farm"");
}",2.00,0.00,1.00,0.05,,,,,,,,,,,,,,,,,,,
SelectedDetailsManager,"private void TryRemoveRemainingSecondsFromBuilding(IronSourcePlacement placement, IronSourceAdInfo adInfo)
{
    var placementName = placement.getPlacementName();
    var rewardName = placement.getRewardName();

    if (placementName != ""Game_Screen"" || rewardName != ""selected_building_upgrade_speedup"")
    {
        return;
    }
    var buildingInfo = placedObject_Done.GetPlcdBuildingInformation();
    if (!buildingInfo.isUnderConstruction) return;

    var speedupAmountInSeconds = placement.getRewardAmount();
    buildingInfo.totalPassedIterationForUpgradeInSeconds += speedupAmountInSeconds;

    Debug.Log(""passed sec for building upgrade: "" + speedupAmountInSeconds);

    StartCoroutine(UpdateUiLate());
}",0.00,0.00,14.00,0.35,,,,,,,,,,,,,,,,,,,
SelectedDetailsManager,"public IEnumerator UpdateUiAfterUpgradeEndDelayed()
{
    if (placedObject_Done != null)
    {
        yield return new WaitForSeconds(1.0f);
        ChangeWhichObjectToSetDetails(placedObject_Done);
    }
}",0.00,0.00,2.00,0.10,,,,,,,,,,,,,,,,,,,
SelectedDetailsManager,"public IEnumerator UpdateUiLate()
{
    if (placedObject_Done != null)
    {
        yield return new WaitForSeconds(.3f);
        ChangeWhichObjectToSetDetails(placedObject_Done);
    }
}",0.00,0.00,2.00,0.10,,,,,,,,,,,,,,,,,,,
SelectedDetailsManager,"public void ELSTORAGE_Open_FromDepo()
{
    audioManager.Play_defaultButtonClick();
    utilitiesManager.isElectricFromDepoActive = true;

    // set usage text
    var usageFromDepo = BuildingInfo.FormatNumber((int)utilitiesManager.GetUiElectricyCUFromDepo());
    var maxUsageFromDepo = BuildingInfo.FormatNumber((int)utilitiesManager.GetElectricMaxOutputFromStorage());
    current_el_from_depo_usage_T.text = usageFromDepo;
    current_el_from_depo_max_T.text = maxUsageFromDepo;

    ELStorage_Open.gameObject.SetActive(true);
    ELStorage_Close.gameObject.SetActive(false);
}",2.00,0.00,12.00,1.00,,,,,,,,,,,,,,,,,,,
SelectedDetailsManager,"public void ELSTORAGE_Close_FromDepo()
{
    audioManager.Play_defaultButtonClick();
    utilitiesManager.isElectricFromDepoActive = false;

    ELStorage_Open.gameObject.SetActive(false);
    ELStorage_Close.gameObject.SetActive(true);
}",2.00,0.00,4.00,0.30,,,,,,,,,,,,,,,,,,,
SelectedDetailsManager,"public void TryCloseUi()
{
    if (detailsContainerTransformToShowHide.gameObject.activeSelf) detailsContainerTransformToShowHide.gameObject.SetActive(false);
}",2.00,0.00,1.00,0.02,,,,,,,,,,,,,,,,,,,
SelectedDetailsManager,"private IEnumerator DisableApiExceptionReporting()
{
    yield return new WaitForSeconds(5);

    isApiReportingEnabled = false;
}",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
SelectedDetailsManager,"private void WhitenAllBuildingsOnMoveStart()
{
    var buildingList = buildingsManager.GetBuildingsList();

    foreach (var building in buildingList)
    {
        if (building == placedObject_Done) continue;
        var renderer = building.buildingVisual.GetComponentInChildren<Renderer>();
        renderer.material.mainTexture = whiteTextureOnMove;
    }
}",2.00,0.00,6.00,2.00,,,,,,,,,,,,,,,,,,,
SelectedDetailsManager,"public void REVERT_WhitenAllBuildingsOnMoveEnd()
{
    var buildingList = buildingsManager.GetBuildingsList();

    foreach (var building in buildingList)
    {
        if (building == placedObject_Done) continue;
        var visual = building.buildingVisual;
        if (visual == null)
        {
            Debug.Log(""visual null"");
            continue;
        }
        var renderer = visual.GetComponentInChildren<Renderer>();
        if (renderer == null)
        {
            Debug.Log(""renderer null"");
        }
        else
        {
            renderer.material.mainTexture = building.correctMaterialTexture;
        }
    }
}",2.00,0.00,11.00,3.00,,,,,,,,,,,,,,,,,,,
SelectedDetailsManager,"public void ReActivateBuildingVisualOnCancel()
{
    if (placedObject_Done != null)
    {
        placedObject_Done.buildingVisual.gameObject.SetActive(true);
    }
}",2.00,0.00,2.00,0.02,,,,,,,,,,,,,,,,,,,
TechSelectedDetailsManager,"private void Start()
{
    defaulBuildingInfo = BuildingInfo.Instance;
    buildingsManager = BuildingsManager.Instance;
    techManager = TechnologyManager.Instance;
    leaderManager = Leader.Instance;
    environment = EnvironmentManager.Instance;
    resourceManager = RawResource.Instance;
    saveManager = SaveManager.Instance;
    isolatedSimulator = IsolatedSimulator.Instance;
    screensManager = ScreenManager.Instance;
    gridBuildingSystem = GridBuildingSystem.Instance;
    farmlandGridBuildingSystem = FarmlandGridBuildingSystem.Instance;
    marketplace = Marketplace.Instance;
    defaultTechInfos = TechnologyInfo.Instance;
    displayError = DisplayError.Instance;
    playerAuthManager = PlayerAuthManager.Instance;
}",0.00,0.00,15.00,0.02,,,,,,,,,,,,,,,,,,,
TechSelectedDetailsManager,"private void FixedUpdate()
{
    if (detailsContainerTransformToShowHide.gameObject.activeSelf == false) return;

    var techUpgradeList = techManager.nextLevelCurrentlyResearching;

    foreach (var techUpgrading in techUpgradeList)
    {
        if (techUpgrading.TechCode == techCode)
        {
            sliderRemainingCountdownText.gameObject.GetComponent<TextMeshProUGUI>().text = GetFormattedTimeRemainingText(techUpgrading.remainingSeconds);
        }
    }
}",0.00,0.00,6.00,0.30,,,,,,,,,,,,,,,,,,,
TechSelectedDetailsManager,"public void TryLevelUpTech()
{
    // TODO
    // if techcode = """" show error
    if (techCode == """")
    {
        return;
    }

    techManager.TryUpgradeTech(techCode);
}",2.00,0.00,2.00,0.10,,,,,,,,,,,,,,,,,,,
TechSelectedDetailsManager,"public void ShowTechSelectedBuildingDetails()
{
    if (!detailsContainerTransformToShowHide.gameObject.activeSelf)
    {
        audioManager.Play_defaultButtonClick();

        // hide
        //detailsContainerTransformToShowHide.gameObject.SetActive(true);
        UIBoxAnimate.UI_Anim_OnOpen(detailsContainerTransformToShowHide);
    }
}",2.00,0.00,3.00,0.20,,,,,,,,,,,,,,,,,,,
TechSelectedDetailsManager,"public void HideTechSelectedBuildingDetails()
{
    if (detailsContainerTransformToShowHide.gameObject.activeSelf)
    {
        audioManager.Play_defaultButtonClick();

        // hide
        //detailsContainerTransformToShowHide.gameObject.SetActive(false);
        UIBoxAnimate.UI_Anim_OnClose(detailsContainerTransformToShowHide);
    }
}",2.00,0.00,3.00,0.20,,,,,,,,,,,,,,,,,,,
TechSelectedDetailsManager,"private string GetFormattedTimeRemainingText(int secs)
{
    TimeSpan t = TimeSpan.FromSeconds(secs);

    if (t.Hours > 0)
    {
        return string.Format(""{0:D2}h {1:D2}m {2:D2}s"",
            t.Hours,
            t.Minutes,
            t.Seconds);
    }
    else
    {
        return string.Format(""{0:D2}m {1:D2}s"",
            t.Minutes,
            t.Seconds);
    }

}",0.00,0.00,5.00,0.10,,,,,,,,,,,,,,,,,,,
TechSelectedDetailsManager,"public void TryCloseTechUi()
{
    if (detailsContainerTransformToShowHide.gameObject.activeSelf) detailsContainerTransformToShowHide.gameObject.SetActive(false);
}",2.00,0.00,2.00,0.01,,,,,,,,,,,,,,,,,,,
TechSelectedDetailsManager,"private IEnumerator DisableApiExceptionReporting()
{
    yield return new WaitForSeconds(5);

    isApiReportingEnabled = false;
}",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
StoryManager,"private void Start()
{
    dialogueTextTransforms[currentStoryIndex].gameObject.SetActive(true);

    dialogueCount = dialogueTextTransforms.Count;
    previousStoryImageWidth = dialogueTextTransforms[currentStoryIndex].transform.GetComponent<RectTransform>().sizeDelta.x;

    StartAllAudiosOnStart();

    StartCoroutine(StartImageMoveDownDelayed());
}",0.00,0.00,6.00,0.02,,,,,,,,,,,,,,,,,,,
StoryManager,"private IEnumerator StartNextDialogueDelayed()
{
    isNextButtonDisabled = true;
    yield return new WaitForSeconds(slyteDuration);
    dialogueTextTransforms[currentStoryIndex].gameObject.SetActive(true);
    isNextButtonDisabled = false;
}",0.00,0.00,3.00,2.00,,,,,,,,,,,,,,,,,,,
StoryManager,"private IEnumerator StartImageMoveDownDelayed()
{
    yield return new WaitForSeconds(imgGoDownDelayDuraion);
    var localPos = listOfImgs[currentStoryIndex].transform.localPosition.y;
    listOfImgs[currentStoryIndex].transform.DOLocalMoveY(localPos - 52.0f, 45f);
}",0.00,0.00,2.00,2.00,,,,,,,,,,,,,,,,,,,
StoryManager,"private void AudioChange()
{
    // if index == 4
    // stop first audio
    // start second audio
    if (currentStoryIndex == 4)
    {
        audioSources[0].DOFade(0.1f, 2.5f);
        audioSources[1].DOFade(1f, 2.5f);
    }
    // if index == 7
    // stop second audio
    // start third audio
    if (currentStoryIndex == 7)
    {
        audioSources[1].DOFade(0.1f, 2.5f);
        audioSources[2].DOFade(1f, 2.5f);
    }
    // if index == 9
    // stop third audio
    // start forrth audio
    if (currentStoryIndex == 9)
    {
        audioSources[2].DOFade(0.1f, 2.5f);
        audioSources[3].DOFade(1f, 2.5f);
    }
}",0.00,0.00,9.00,0.40,,,,,,,,,,,,,,,,,,,
StoryManager,"private void StartAllAudiosOnStart()
{
    foreach(var au in audioSources)
    {
        au.Play();
    }
}",0.00,0.00,1.00,0.03,,,,,,,,,,,,,,,,,,,
StoryManager,"public void ExitStory()
{
    CloseAllDialogue();
    changeScene.GoToMainGameScene();
}",2.00,0.00,2.00,0.15,,,,,,,,,,,,,,,,,,,
StoryManager,"private void CloseAllDialogue()
{
    dilogueHolderTransform.gameObject.SetActive(false);
}",0.00,0.00,2.00,0.03,,,,,,,,,,,,,,,,,,,
StoryManager,"public static void SetSelfUiTypeWriter(UITypeWriter typeWriter)
{
    uITypeWriter = typeWriter;
}",0.00,0.00,1.00,0.02,,,,,,,,,,,,,,,,,,,
EnvironmentUIUpdater,"void Start()
{
    environment = EnvironmentManager.Instance;
    population = Population.Instance;

    dpUGUI = dpTransform.gameObject.GetComponent<TextMeshProUGUI>();
    dpUGUI2 = dpTransform2.gameObject.GetComponent<TextMeshProUGUI>();
    airUGUI = airTransform.gameObject.GetComponent<TextMeshProUGUI>();
    waterUGUI = waterTransform.gameObject.GetComponent<TextMeshProUGUI>();
    groundUGUI = groundTransform.gameObject.GetComponent<TextMeshProUGUI>();
    noiseUGUI = noiseTransform.gameObject.GetComponent<TextMeshProUGUI>();
    visualUGUI = visualTransform.gameObject.GetComponent<TextMeshProUGUI>();
    popUGUI = popTransform.gameObject.GetComponent<TextMeshProUGUI>();

    StartCoroutine(UpdateUi());
}",0.00,0.00,22.00,0.02,,,,,,,,,,,,,,,,,,,
EnvironmentUIUpdater,"private IEnumerator UpdateUi()
{
    while (true)
    {
        yield return new WaitForSeconds(1.0f);

        dpUGUI.text = environment.getDP().ToString(""F0"");
        dpUGUI2.text = environment.getDP().ToString(""F0"");
        airUGUI.text = environment.getAirPollution().ToString();
        waterUGUI.text = environment.getWaterPollution().ToString();
        groundUGUI.text = environment.getGroundPollution().ToString();
        noiseUGUI.text = environment.getNoisePollution().ToString();
        visualUGUI.text = environment.getVisualPollution().ToString();
        popUGUI.text = population.GetCurrentPop().ToString() + ""/"" + population.GetCurrentVisualPopCap().ToString();
    }

}",0.00,0.00,31.00,1.50,,,,,,,,,,,,,,,,,,,
InGameNotificationManagerAndUpdater,"private void Start()
{
    buildingsManager = BuildingsManager.Instance;
}",0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,
InGameNotificationManagerAndUpdater,"public void AddInGameNotification(string message)
{
    InGameNotificationItem noti = new()
    {
        notificationTriggerTime = DateTime.Now,
        message = message,
        uiDisplay = DateTime.Now.ToString(""H:mm"") + ""   "" + message,
    };

    notificationList.Add(noti);
    var notNew = Instantiate(notificationExampleItem, parent: notificationItemParent);
    notNew.gameObject.SetActive(true);
    var text_ref = notNew.GetComponent<TextMeshProUGUI>();
    noti.textRef = text_ref;
    text_ref.text = noti.uiDisplay;

    if (!newIcon.gameObject.activeSelf) newIcon.gameObject.SetActive(true);
}",0.00,0.00,15.00,1.50,,,,,,,,,,,,,,,,,,,
InGameNotificationManagerAndUpdater,"public void SwitchInGameNotificationExpanded()
{
    audioManager.Play_defaultButtonClick();
    if (InGameNotificationExpandedTransform.gameObject.activeSelf)
    {
        // hide notification
        //InGameNotificationExpandedTransform.gameObject.SetActive(false);
        UIBoxAnimate.UI_Anim_OnClose(InGameNotificationExpandedTransform);
    }
    else
    {
        // show
        //InGameNotificationExpandedTransform.gameObject.SetActive(true);
        UIBoxAnimate.UI_Anim_OnOpen(InGameNotificationExpandedTransform);

        // change to correct lang
        LoopAndCorrectAllOnInGameNotificationsOpen();

        buildingsManager.DisableAnyGhostWhileBuildingOnHolderOpen();
    }
    if (newIcon.gameObject.activeSelf) newIcon.gameObject.SetActive(false);
}",2.00,0.00,8.00,0.50,,,,,,,,,,,,,,,,,,,
InGameNotificationManagerAndUpdater,"private void LoopAndCorrectAllOnInGameNotificationsOpen()
{
    foreach (var noti in notificationList)
    {
        noti.uiDisplay = noti.notificationTriggerTime.ToString(""H:mm"") + ""   "" + GetCorrectLangugeString_ForInGameNotifications(noti.message);
        noti.textRef.text = noti.uiDisplay;
    }
}",0.00,0.00,4.00,0.15,,,,,,,,,,,,,,,,,,,
ResourceUIUpdater,"private void Start()
{
    rawResource = RawResource.Instance;
    seedResource = SeedResource.Instance;

    yCoinTMP = yCoinTransform.gameObject.GetComponent<TextMeshProUGUI>();
    ypTMP = ypTransform.gameObject.GetComponent<TextMeshProUGUI>();
    cementTMP = cementTransform.gameObject.GetComponent<TextMeshProUGUI>();
    wireTMP = wireTransform.gameObject.GetComponent<TextMeshProUGUI>();
    chemicalTMP = chemicalTransform.gameObject.GetComponent<TextMeshProUGUI>();
    mechanicalTMP = mechanicalTransform.gameObject.GetComponent<TextMeshProUGUI>();
    seedNormalTMP = seedNormalTransform.gameObject.GetComponent<TextMeshProUGUI>();
    seedPreTMP = seedPreTransform.gameObject.GetComponent<TextMeshProUGUI>();

    marketyCoinTMP = marketplaceyCoinTransform.gameObject.GetComponent<TextMeshProUGUI>();
    marketypTMP = marketplaceypTransform.gameObject.GetComponent<TextMeshProUGUI>();

    StartCoroutine(UpdateRRUi());
}",0.00,0.00,24.00,0.05,,,,,,,,,,,,,,,,,,,
ResourceUIUpdater,"private void FixedUpdate()
{

    yCoinTMP.text = string.Format($""{rawResource.getYCoin():n0}"");
    marketyCoinTMP.text = string.Format($""{rawResource.getYCoin():n0}"");

    ypTMP.text = string.Format($""{rawResource.getYp():n0}"");
    marketypTMP.text = string.Format($""{rawResource.getYp():n0}"");

    cementTMP.text = string.Format($""{rawResource.getCement():n0}"") + "" / "" + string.Format($""{rawResource.getCementCap():n0}"");
    wireTMP.text = string.Format($""{rawResource.getWire():n0}"") + "" / "" + string.Format($""{rawResource.getWireCap():n0}"");
    chemicalTMP.text = string.Format($""{rawResource.getChemical():n0}"") + "" / "" + string.Format($""{rawResource.getChemicalCap():n0}"");
    mechanicalTMP.text = string.Format($""{rawResource.getMechanicalPart():n0}"") + "" / "" + string.Format($""{rawResource.getMechanicalPartCap():n0}"");
    seedNormalTMP.text = string.Format($""{seedResource.getRegularSeedAmount():n0}"");
    seedPreTMP.text = string.Format($""{seedResource.getPremiumSeedAmount():n0}"");
}",0.00,0.00,30.00,0.10,,,,,,,,,,,,,,,,,,,
ResourceUIUpdater,"private IEnumerator UpdateRRUi()
{
    while (true)
    {
        yield return new WaitForSeconds(1.0f);
        yCoinTMP.text = BuildingInfo.FormatNumber((int)rawResource.getYCoin());
        marketyCoinTMP.text = BuildingInfo.FormatNumber((int)rawResource.getYCoin());


        ypTMP.text = BuildingInfo.FormatNumber((int)rawResource.getYp());
        marketypTMP.text = BuildingInfo.FormatNumber((int)rawResource.getYp());


        cementTMP.text = BuildingInfo.FormatNumber((int)rawResource.getCement()) + "" / "" + BuildingInfo.FormatNumber((int)rawResource.getCementCap());

        wireTMP.text = BuildingInfo.FormatNumber((int)rawResource.getWire()) + "" / "" + BuildingInfo.FormatNumber((int)rawResource.getWireCap());

        chemicalTMP.text = BuildingInfo.FormatNumber((int)rawResource.getChemical()) + "" / "" + BuildingInfo.FormatNumber((int)rawResource.getChemicalCap());

        mechanicalTMP.text = BuildingInfo.FormatNumber((int)rawResource.getMechanicalPart()) + "" / "" + BuildingInfo.FormatNumber((int)rawResource.getMechanicalPartCap());

        seedNormalTMP.text = BuildingInfo.FormatNumber(seedResource.getRegularSeedAmount());

        seedPreTMP.text = BuildingInfo.FormatNumber(seedResource.getPremiumSeedAmount());
    }
}",0.00,0.00,38.00,0.15,,,,,,,,,,,,,,,,,,,
UITypeWriter,"void OnEnable()
{
    StoryManager.SetSelfUiTypeWriter(this);

    txt = GetComponent<TextMeshProUGUI>();
    story = txt.text;
    txt.text = """";

    // TODO: add optional delay when to start
    _cr = StartCoroutine(PlayText());
}",0.00,0.00,8.00,0.20,,,,,,,,,,,,,,,,,,,
UITypeWriter,"IEnumerator PlayText()
{
    isTypeWriterTyping = true;
    foreach (char c in story)
    {
        txt.text += c;
        yield return new WaitForSeconds(0.05f);
    }
    isTypeWriterTyping = false;
}",0.00,0.00,3.00,0.30,,,,,,,,,,,,,,,,,,,
UITypeWriter,"public void TypeWrite_FastForward()
{
    if (_cr != null) StopCoroutine(_cr);

    isTypeWriterTyping = false;

    txt.text = story;
}",0.00,0.00,4.00,0.15,,,,,,,,,,,,,,,,,,,
UITypeWriter,public bool GetIsTypeWriterTyping() { return isTypeWriterTyping; },0.00,0.00,1.00,0.01,,,,,,,,,,,,,,,,,,,